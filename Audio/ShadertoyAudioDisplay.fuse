--[[--/*

  ShadertoyAudioDisplay.fuse

  Based on https://www.shadertoy.com/view/MtVfWh a WebGL shader created by saidwho12.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  bool   Spektrum;
  int    BlockCnt;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)
    #define swi3S(a,b,c,d,e) a.b##c##d = e
  #else
    #define swi3S(a,b,c,d,e) {float3 tmp = e; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z;}
  #endif

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f3(value,divisor) fmod(value,divisor)
 #define abs_f3(a) _fabs(a)

#else

 #if defined(USE_NATIVE_OPENCL_IMPL)

  #define reflect(I,N) (I-2.0f*dot(N,I)*N)

  #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

  #define mod_f3(value,divisor) _fmod(value,divisor)
  #define abs_f3(a) fabs(a)

 #else // Generic

  #define fract(a) ((a)-_floor(a))
  #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
  #define mod_f3(value,divisor) to_float3(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)),mod_f((value).z, (divisor)))
  #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif
#endif


]]
-- /*


-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image '/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3' to iChannel0

#define R iResolution
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)


// Not mine!!!
__DEVICE__ float3 hsv2rgb( in float3 c ) {
  float3 rgb = clamp( abs_f3(mod_f3(c.x*6.0f+to_float3(0.0f,4.0f,2.0f),6.0f)-3.0f)-1.0f, 0.0f, 1.0f);
  rgb = rgb*rgb*(3.0f-2.0f*rgb); // cubic smoothing
  return c.z * _mix(to_float3_s(1.0f), rgb, c.y);
}

__KERNEL__ void ShadertoyAudioDisplayJipi986Fuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
  DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

  if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float4 O   = to_float4_s(0.0f);
  float2 u   = to_float2(fusion_x,fusion_y);

  bool   Spektrum = params->Spektrum;
  int    BlockCnt = params->BlockCnt;

  // --------
    u+=0.5f;
    float2 U = u/iResolution;

    float N = 32.0f * BlockCnt,
         _x = fract(U.x * N),
         _y = texture(iChannel0, to_float2((_floor(U.x * N)+0.5f) / N, 1-Spektrum)).x;

    if(_fabs(_x*2.0f-1.0f) < 0.75f)
      swi3S(O,x,y,z, clamp(1.0f - 90.0f*(U.y - _y) ,0.0f,1.0f)
                     * hsv2rgb(to_float3((1.0f - _y)*0.6f, 0.5f, 0.9f)) );

  O.w=1.0f;

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, O);
}
]]
-- /*


-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  InSpektrumCheckbox = self:AddInput("Spektrum", "Spektrum", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InBlockCntSlider = self:AddInput("BlockCnt", "BlockCnt", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 1,
      INP_MaxScale       = 5,
      INP_Default        = 1,
      INP_Integer        = true,
  })

  ShaderFuse.end_create()
end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "ShadertoyAudioDisplayJipi986Fuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one
  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters
  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")
  local params = {}
  params = node:GetParamBlock(ShaderParameters)
  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height

  params.Spektrum = InSpektrumCheckbox:GetValue(req).Value
  params.BlockCnt = InBlockCntSlider:GetValue(req).Value

  -- Resolution
  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution

  -- Set parameters and add I/O
  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end


-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


