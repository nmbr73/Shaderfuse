--[[--/*

  Heartdemo.fuse

  Based on https://www.shadertoy.com/view/wttXD7 a WebGL shader created by 17dpn01
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--

-- /*

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()


-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })


-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   Tex;
  float  ColorBKG1[4];
  float  ColorBKG2[4];
  float  ColorObject[4];
  float  ColorFre[4];
  float  ColorLin[4];
  float  TexScale;
  float  PumpLevel;
  float  PumpFreq;
  float  BKGLevel;
  float  BKGHorz;
  float  ViewXY[2];
  float  ViewZ;
  float  OCC;
  float  LIN;
  float  Test;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

#if defined(USE_NATIVE_METAL_IMPL)

 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

#define MAX_MARCHING_STEPS  255
#define MIN_DIST  0.0f
#define MAX_DIST  100.0f
#define EPSILON 0.001f
#define PI  3.14159265359f
#define PHI 1.6180339887498948482045868343656f

__DEVICE__ float heartShape(float3 p, float rad) {
    // TODO 1: Change this to a heart SDF function
    //float result = length(p) - rad;
    //return result;

    float z = p.z * (2.0f - p.y / 15.0f);
    float y = 1.3f * p.y - _fabs(p.x) * _sqrtf(1.0f - _fabs(p.x));
    float3 p2 = to_float3(p.x, y, p.z);
    return length(p2) - rad;
}

// TODO 2.1: Write function to call heartShape with animated radius

// SDF for the scene
__DEVICE__ float sceneSDF(float3 samplePoint, float iTime, float PumpFreq) {

    // we want to make the sphere bigger
    // we will do this by
    //samplePoint *= to_float3(_sinf(iTime), 1.0f, _cosf(iTime));
    float result = heartShape(samplePoint, 0.2f * _fabs(_sinf(PI * iTime * PumpFreq + samplePoint.y * 0.1f)) + 0.6f);
    return result;
}


// get shortest distance to surface using ray marching
__DEVICE__ float shortestDistanceToSurface(float3 eye, float3 marchingDirection, float start, float end, float iTime, float PumpFreq) {
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        // TODO 2.1: Call animated radius version of SDF instead of heartShape
        float dist = sceneSDF(eye + depth * marchingDirection, iTime, PumpFreq);
        //float dist = heartShape(eye + depth * marchingDirection, 0.5f);
        if (dist < EPSILON) {
            return depth;
        }
        // SPHERE CASTING! :D
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}

/////// ******** SHADER STUFF ******** ///////
/////// don't worry about all of this! ///////
/////// this is all to make the heart  ///////
/////// shiny. if you want to know     ///////
/////// more about this, ask or pop me ///////
/////// an email!             ///////

// estimate normal using SDF gradient
__DEVICE__ float3 estimateNormal(float3 pos) {
    float2 e = to_float2(1.0f,-1.0f)*0.5773f*0.0005f;
    return normalize( swi3(e,x,y,y) * heartShape( pos + swi3(e,x,y,y), 0.7f ) +
                      swi3(e,y,y,x) * heartShape( pos + swi3(e,y,y,x), 0.7f ) +
                      swi3(e,y,x,y) * heartShape( pos + swi3(e,y,x,y), 0.7f ) +
                      swi3(e,x,x,x) * heartShape( pos + swi3(e,x,x,x), 0.7f ));
}

__DEVICE__ float2 map( float3 q, float iTime )
{
    q *= 100.0f;

    float2 res = to_float2( q.y, 2.0f );

    float r = 15.0f;
    q.y -= r;
    float ani = _powf( 0.5f+0.5f*_sinf(6.28318f*iTime + q.y/25.0f), 4.0f );
    q *= 1.0f - 0.2f*to_float3(1.0f,0.5f,1.0f)*ani;
    q.y -= 1.5f*ani;
    float x = _fabs(q.x);
    float y = q.y;
    float z = q.z;
    y = 4.0f + y*1.2f - x*_sqrtf(_fmaxf((20.0f-x)/15.0f,0.0f));
    z *= 2.0f - y/15.0f;
    float d = _sqrtf(x*x+y*y+z*z) - r;
    d = d/3.0f;
    if( d<res.x ) res = to_float2( d, 1.0f );

    res.x /= 100.0f;
    return res;
}

__DEVICE__ float3 forwardSF( float i, float n)
{
    float phi = 2.0f*PI*fract(i/PHI);
    float zi = 1.0f - (2.0f*i+1.0f)/n;
    float sinTheta = _sqrtf( 1.0f - zi*zi);
    return to_float3( _cosf(phi)*sinTheta, _sinf(phi)*sinTheta, zi);
}

__DEVICE__ float hash1( float n )
{
    return fract(_sinf(n)*43758.5453123f);
}

__DEVICE__ float calcAO( in float3 pos, in float3 nor, float iTime ) {
    float ao = 0.0f;
    for( int i=0; i<64; i++ )
    {
        float3 kk;
        float3 ap = forwardSF( (float)(i), 64.0f );
        ap *= sign_f( dot(ap,nor) ) * hash1((float)(i));
        ao += clamp( map( pos + nor*0.01f + ap*0.2f, iTime ).x*20.0f, 0.0f, 1.0f );
    }
    ao /= 64.0f;

    return clamp( ao, 0.0f, 1.0f );
}

/////////////////////////////////////////////////
//////////////// end of shader ! ////////////////
/////////////////////////////////////////////////


/////////////// main function ///////////////////
__KERNEL__ void HeartdemoJipiFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   Tex = params->Tex;
  float4 ColorBKG1 = to_float4(params->ColorBKG1[0], params->ColorBKG1[1], params->ColorBKG1[2], params->ColorBKG1[3]);
  float4 ColorBKG2 = to_float4(params->ColorBKG2[0], params->ColorBKG2[1], params->ColorBKG2[2], params->ColorBKG2[3]);
  float4 ColorObject = to_float4(params->ColorObject[0], params->ColorObject[1], params->ColorObject[2], params->ColorObject[3]);
  float4 ColorFre = to_float4(params->ColorFre[0], params->ColorFre[1], params->ColorFre[2], params->ColorFre[3]);
  float4 ColorLin = to_float4(params->ColorLin[0], params->ColorLin[1], params->ColorLin[2], params->ColorLin[3]);
  float  TexScale = params->TexScale;
  float  PumpLevel = params->PumpLevel;
  float  PumpFreq = params->PumpFreq;
  float  BKGLevel = params->BKGLevel;
  float  BKGHorz = params->BKGHorz;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  OCC = params->OCC;
  float  LIN = params->LIN;
  float  Test = params->Test;

  // --------

    float3 eye   = to_float3(0, 0, 5.0f) + to_float3_aw(ViewXY,0.0f);
    float3 up    = to_float3(0, 1, 0);
    float3 right = to_float3(1, 0, 0);

    float an = 0.2f*(iTime+2.0f);
    float u = fragCoord.x * 2.0f / iResolution.x - 1.0f;
    float v = fragCoord.y * 2.0f / iResolution.y - 1.0f;
    float aspect = iResolution.x / iResolution.y;
    float3 rayOrigin = (right * u * aspect + up * v - eye) * ViewZ;
    float3 rayDirection = normalize(cross(right, up));

    float dist = shortestDistanceToSurface(rayOrigin, rayDirection, MIN_DIST, MAX_DIST, iTime, PumpFreq);

    // if our ray didn't hit anything,
    if (dist >= MAX_DIST - 2.0f * EPSILON) {
        // TODO 3: Change background from white to color gradiant
        //fragColor = to_float4_s(1.0f);
        //return;

        // blue
        float4 col1 = to_float4(0.25f, 0.3f, 0.8f, 1.0f);
        // yellow
        float4 col2 = to_float4(1.2f, 0.77f, 0.5f, 1.0f);
        //fragColor = _mix(col2, col1, v * 0.5f);
        fragColor = _mix(ColorBKG2, ColorBKG1, (v+BKGHorz) * 0.5f * BKGLevel);
        _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
        return;
    }

    float3 position = rayOrigin + dist * rayDirection;
    float3 normal = estimateNormal(position);
    float3 ref = reflect(rayDirection, normal);
    float fre = clamp(1.0f + dot(normal, rayDirection), 0.0f, 1.0f);
    float occ = calcAO(position, normal, iTime);
    occ = occ*occ;
    // OPTIONAL TODO: change object color
    float3 col = swi3(ColorObject,x,y,z);//to_float3(0.9f,0.05f,0.01f);

    //col = texture(iChannel0, fragCoord/iResolution).xyz;
    if(Tex)
    {
      position *= ((1.0f) - (0.2f*PumpLevel) * _fabs(_sinf(PI * iTime * PumpFreq + position.y * 0.1f)) + (0.6f))*TexScale;
      swi2S(position,x,y, swi2(position,x,y) + swi2(iMouse,x,y)/iResolution);
      position.x/=aspect;
      col = swi3(texture(iChannel0, swi2(position,x,y)),x,y,z);
    }

    col = col*0.72f + 0.2f*fre*swi3(ColorFre,x,y,z);//to_float3(1.0f,0.8f,0.2f);

//    float3 lin  = 4.0f*LIN*swi3(ColorLin,x,y,z)*(0.5f+0.5f*normal.y)*occ;
//    lin += 0.5f*fre*to_float3(1.0f,1.0f,1.00f)*(0.6f+0.4f*occ);
//    col = col * lin; //!!!!!!!
    col += smoothstep(0.0f,0.4f,ref.y)*(0.06f+0.94f*_powf(fre,5.0f))*occ;

    col = pow_f3(col,to_float3_s(0.4545f));
    col = clamp(col,0.0f,1.0f);
    //col -= 0.5f; //+ 0.8f*_powf(16.0f*u*v*(1.0f-u)*(1.0f-v),0.2f);

    fragColor = to_float4_aw(col, 1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls


  -- Speed Slider
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })

self:BeginControlNest("Texture", "Texture", true, {})

  InTexCheckbox = self:AddInput("Tex", "Tex", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  -- iMouse Controls
  InMouseXY = self:AddInput("Texture.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })

  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
    IC_Visible   = false,
  })

  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
    IC_Visible   = false,
  })

  InTexScaleSlider = self:AddInput("TexScale", "TexScale", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InPumpLevelSlider = self:AddInput("TexPumpLevel", "PumpLevel", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

self:EndControlNest()


self:BeginControlNest("Colors", "Colors", true, {})
  self:BeginControlNest("ColorBKG1", "ColorBKG1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorBKG1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBKG1ColorR = self:AddInput("Red",   "ColorBKG1Red",   { INP_Default  = 0.25, IC_ControlID = 0, attrs})
    InColorBKG1ColorG = self:AddInput("Green", "ColorBKG1Green", { INP_Default  = 0.3, IC_ControlID = 1, attrs})
    InColorBKG1ColorB = self:AddInput("Blue",  "ColorBKG1Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColorBKG1ColorA = self:AddInput("Alpha", "ColorBKG1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorBKG2", "ColorBKG2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorBKG2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBKG2ColorR = self:AddInput("Red",   "ColorBKG2Red",   { INP_Default  = 1.2, IC_ControlID = 0, attrs})
    InColorBKG2ColorG = self:AddInput("Green", "ColorBKG2Green", { INP_Default  = 0.77, IC_ControlID = 1, attrs})
    InColorBKG2ColorB = self:AddInput("Blue",  "ColorBKG2Blue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColorBKG2ColorA = self:AddInput("Alpha", "ColorBKG2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorObject", "ColorObject", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorObject",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorObjectColorR = self:AddInput("Red",   "ColorObjectRed",   { INP_Default  = 0.9, IC_ControlID = 0, attrs})
    InColorObjectColorG = self:AddInput("Green", "ColorObjectGreen", { INP_Default  = 0.05, IC_ControlID = 1, attrs})
    InColorObjectColorB = self:AddInput("Blue",  "ColorObjectBlue",  { INP_Default  = 0.01, IC_ControlID = 2, attrs})
    InColorObjectColorA = self:AddInput("Alpha", "ColorObjectAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorFre", "ColorFre", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorFre",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorFreColorR = self:AddInput("Red",   "ColorFreRed",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColorFreColorG = self:AddInput("Green", "ColorFreGreen", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InColorFreColorB = self:AddInput("Blue",  "ColorFreBlue",  { INP_Default  = 0.2, IC_ControlID = 2, attrs})
    InColorFreColorA = self:AddInput("Alpha", "ColorFreAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorLin", "ColorLin", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorLin",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
      IC_Visible = false,
    }

    InColorLinColorR = self:AddInput("Red",   "ColorLinRed",   { INP_Default  = 0.7, IC_ControlID = 0, attrs})
    InColorLinColorG = self:AddInput("Green", "ColorLinGreen", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InColorLinColorB = self:AddInput("Blue",  "ColorLinBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InColorLinColorA = self:AddInput("Alpha", "ColorLinAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

self:EndControlNest()

  InPumpFreqSlider = self:AddInput("PumpFreq", "PumpFreq", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.5,
      })

  InBKGLevelSlider = self:AddInput("BKGLevel", "BKGLevel", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InBKGHorzSlider = self:AddInput("BKGHorz", "BKGHorz", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InOCCSlider = self:AddInput("OCC", "OCC", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          IC_Visible         = false,
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InLINSlider = self:AddInput("LIN", "LIN", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          IC_Visible         = false,
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InTestSlider = self:AddInput("Test", "Test", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          IC_Visible         = false,
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })



  Sep3 = self:AddInput(string.rep("_", 102), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
	  IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })


  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, },
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })

  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})

  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })

  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false })

  ----- In/Out
  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ShaderFuse.end_create()
end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)
    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value
		end
	end

  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then
	    SourceDepth = 5
    else
	    if InDepth:GetValue(req).Value == 2 then
	        SourceDepth = 6
	    else
	        if InDepth:GetValue(req).Value == 3 then
 		        SourceDepth = 7
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


 node = DVIPComputeNode(req,
    "HeartdemoJipiFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  -- iMouse

  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)

  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y

  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end

  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end

  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.Tex = InTexCheckbox:GetValue(req).Value
  params.ColorBKG1 = {
    InColorBKG1ColorR:GetValue(req).Value,
    InColorBKG1ColorG:GetValue(req).Value,
    InColorBKG1ColorB:GetValue(req).Value,InColorBKG1ColorA:GetValue(req).Value
  }
  params.ColorBKG2 = {
    InColorBKG2ColorR:GetValue(req).Value,
    InColorBKG2ColorG:GetValue(req).Value,
    InColorBKG2ColorB:GetValue(req).Value,InColorBKG2ColorA:GetValue(req).Value
  }
  params.ColorObject = {
    InColorObjectColorR:GetValue(req).Value,
    InColorObjectColorG:GetValue(req).Value,
    InColorObjectColorB:GetValue(req).Value,InColorObjectColorA:GetValue(req).Value
  }
  params.ColorFre = {
    InColorFreColorR:GetValue(req).Value,
    InColorFreColorG:GetValue(req).Value,
    InColorFreColorB:GetValue(req).Value,InColorFreColorA:GetValue(req).Value
  }
  params.ColorLin = {
    InColorLinColorR:GetValue(req).Value,
    InColorLinColorG:GetValue(req).Value,
    InColorLinColorB:GetValue(req).Value,InColorLinColorA:GetValue(req).Value
  }
  params.TexScale = InTexScaleSlider:GetValue(req).Value
  params.PumpLevel = InPumpLevelSlider:GetValue(req).Value
  params.PumpFreq = InPumpFreqSlider:GetValue(req).Value
  params.BKGLevel = InBKGLevelSlider:GetValue(req).Value
  params.BKGHorz = InBKGHorzSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.OCC = InOCCSlider:GetValue(req).Value
  params.LIN = InLINSlider:GetValue(req).Value
  params.Test = InTestSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value
print("Edges", edges)
  -- Set parameters and add I/O
  node:SetParamBlock(params)
  --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  DefineEdges(edges, node)

  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)


  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)

  collectgarbage();
end

-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end

		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end

 	end
end


-- */
