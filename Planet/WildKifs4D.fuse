--[[--
Wildkifs4D

    Based on https://www.shadertoy.com/view/wttBzM a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/nmbr73)
    for use in DaFusion.

    Shader created by iapafoto


V0.1
V0.2
V0.3
V0.4

--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
Wildkifs4DParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float rotation[2];
  float color[3];
  float alpha;
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
Wildkifs4DKernel =
    [[
 //**** mat4 ****
typedef struct
  {
  float4 r0, r1,r2, r3;
  } mat4;


__DEVICE__ inline mat4 make_mat4( float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13,
  float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)
  {
  mat4 M;
  M.r0 = make_float4(m00, m01, m02, m03);
  M.r1 = make_float4(m10, m11, m12, m13);
  M.r2 = make_float4(m20, m21, m22, m23);
  M.r3 = make_float4(m30, m31, m32, m33);
  return M;
  }

__DEVICE__ inline float4 mat4_multi_f4( mat4 B, float4 A)
  {
  float4 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z + A.w * B.r0.w;
  C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z + A.w * B.r1.w;
  C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z + A.w * B.r2.w;
  C.w = A.x * B.r3.x + A.y * B.r3.y + A.z * B.r3.z + A.w * B.r3.w;
  return C;
  }

__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
__DEVICE__ float4 abs_f4(float4 a) {return (to_float4(_fabs(a.x), _fabs(a.y),_fabs(a.z),_fabs(a.w)));}
__DEVICE__ float fract_f(float A){return A - _floor(A);}
#define lpowf _powf
__DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}
__DEVICE__ float4 reflect_f4(float4 I, float4 N) {return I - 2.0f * dot(N, I) * N;}


#define swiwxyz(V) to_float4((V).w,(V).x,(V).y,(V).z)
#define swiyzw(V) to_float3((V).y,(V).z,(V).w)
#define swixyz(V) to_float3((V).x,(V).y,(V).z)


#define swixyyy(V) to_float4((V).x,(V).y,(V).y,(V).y)
#define swiyxyy(V) to_float4((V).y,(V).x,(V).y,(V).y)
#define swiyyxy(V) to_float4((V).y,(V).y,(V).x,(V).y)
#define swiyyyx(V) to_float4((V).y,(V).y,(V).y,(V).x)


#define _itime (itime + _cosf(0.75f*itime)-17.0f)


// Created by sebastien durand - 2021
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.
// ----------------------------
// based on [wyatt] kaleidoscope iterative function - https://www.shadertoy.com/view/MdKyRw
// ----------------------------


// Kifs paremeters
#define ITER 17
#define SCALE 0.766f
#define ADD -0.75f*to_float4(3.0f,-0.075f,0.0f,2.3f)


// Ray Marching parameters
#define RAY_STEP 100
#define DIST_MAX 5.5f




// 4D adaptation of Kif fractal
__DEVICE__ float4 map(float4 p, mat4 mRot) {
    float4 ot = to_float4_s(0);
    float t = 0.09f;
    for (int i = 0; i < ITER; i++) {
        t = t*SCALE;
        p += t*ADD;

        //p.wxyz *= mRot;
        float4 pwxyz = mat4_multi_f4(mRot, swiwxyz(p));
        p.w = pwxyz.x;
        p.x = pwxyz.y;
        p.y = pwxyz.z;
        p.z = pwxyz.w;

        p = abs_f4(p) - t;
        ot += p/t;
    }
    //return to_float4((length(p)-2.0f*t),         // Distance
    //           4.0f*swixwz(ot)/(_powf(_fabs(ot.y),1.7f)+0.01f)); // Color (4th Dimension give electric colors tuch !!!)
	return to_float4((length(p)-2.0f*t),
                4.0f*(ot.x)/(_powf(_fabs(ot.y),1.7f)+0.01f),
				4.0f*(ot.w)/(_powf(_fabs(ot.y),1.7f)+0.01f),
				4.0f*(ot.z)/(_powf(_fabs(ot.y),1.7f)+0.01f)
				); // Color (4th Dimension give electric colors tuch !!!)
}

__DEVICE__ float4 castRay(float4 ro, float4 rd, mat4 mRot, float4 *closest) {
    const float precis = 0.005f;
    float h = precis*2.0f, t = 1.0f;
    float4 res;
    *closest = to_float4(999.0f,0,0,0);
    for (int i=0; i<RAY_STEP; i++ ) {
        if (_fabs(h)<precis || t>DIST_MAX) break;
		t += h;
        res = map( ro+rd*t, mRot);
        h = res.x;
        if (h < (*closest).x)               // get closest for halo
            (*closest).x = h;
        //*closest.yzw += res.yzw;        // halo color
		(*closest).y += res.y;
		(*closest).z += res.z;
		(*closest).w += res.w;
    }
    return to_float4( t, res.y,res.z,res.w );
}

__DEVICE__ float softshadow(float4 ro, float4 rd, float mint, mat4 mRot) {
    float res = 1.0f,
    h,t = mint;
    for( int i=0; i<16; i++ ) {
        h = map( ro + rd*t, mRot ).x;
        res = _fminf( res, 7.0f*h/t );
        t += 0.028f;
    }
    return _clampf( res-0.6f, 0.0f, 1.0f );
}

__DEVICE__ float4 calcNormal(float4 p, mat4 mRot) {
    const float2 e = to_float2( 1e-3, 0.0f);

    return normalize(to_float4(
		map(p+swixyyy(e), mRot).x - map(p-swixyyy(e), mRot).x,
		map(p+swiyxyy(e), mRot).x - map(p-swiyxyy(e), mRot).x,
		map(p+swiyyxy(e), mRot).x - map(p-swiyyxy(e), mRot).x,
		map(p+swiyyyx(e), mRot).x - map(p-swiyyyx(e), mRot).x
		));
}

__DEVICE__ float calcAO(float4 p, float4 n, mat4 mRot ){
    float dd, hr, ao = 0.0f, k = 1.0f;
    float4 pos;
    for( int aoi=0; aoi<5; aoi++ ) {
        hr = 0.01f + 0.05f*(float)(aoi);
        pos =  n * hr + p;
        ao += -(map(pos, mRot).x-hr)*k;
        k *= 0.75f;
    }
    return _clampf( 1.0f - 4.0f*ao, 0.0f, 1.0f );
}
#define out
__DEVICE__ float3 render(float4 ro, float4 rd , float3 backColor, out float *d, float4 lig, mat4 mRot, float *alpha, __CONSTANTREF__ Wildkifs4DParams *params){
    float3 col;
    float4 closest;

    float4 res = castRay(ro,rd, mRot, &closest);
    float t = res.x;
    float3 uvw = 0.85f*swiyzw(res);

    if (t<DIST_MAX) {
      float4 pos = ro + t*rd,
      nor = calcNormal( pos, mRot );

	col = to_float3_v(params->color) + 0.6f*abs_f3(uvw);

      float ao = calcAO( pos, nor, mRot ); ao*=ao;
      float dif = _clampf( dot( nor, lig ), 0.0f, 1.0f ),
      bac = _clampf( dot( nor, normalize(to_float4(-lig.x,0.0f,-lig.z,0.0f))), 0.0f, 1.0f )*_clampf(1.0f-pos.y,0.0f,1.0f);

	float sh = 1.0f;
	if (dif>0.02f) {
            sh = softshadow( pos, lig, 0.025f, mRot);
            dif *= sh;
      }

      float3 brdf =  0.1f*to_float3(0.10f,0.11f,0.13f)*ao;
      brdf += 0.2f*bac*to_float3_s(0.15f)*ao;
      brdf += 0.8f*dif*to_float3(1,0.9f,0.7f);

      float pp = clamp( dot( reflect_f4(rd,nor), lig ), 0.0f, 1.0f ),
      spe = sh*_powf(pp,16.0f),
      fre = ao*_powf( _clampf(1.0f+dot(nor,rd),0.0f,1.0f), 2.0f );

      *alpha = 1.0f;
      col = col*brdf + 2.0f*(0.5f+0.5f*col)*spe + 0.4f*fre*(0.6f+0.4f*col);

    } else {
        col = _mix(backColor, clamp(0.004f*swiyzw(closest),0.0f,1.0f), smoothstep(0.42f,0.0f,_powf(closest.x,0.4f)));
    }

    *d = t;
    return ( clamp(col,0.0f,1.0f) );
}

// Rotation Matrix to apply to 4D objects
__DEVICE__ mat4 Rot4(float a, float b, float c) {
    float c1 = _cosf(a), s1 = _sinf(a),
          c2 = _cosf(b), s2 = _sinf(b),
          c3 = _cosf(c), s3 = _sinf(c);
    return make_mat4(c2,  s2*s3,   0, -s2*c3,
                 0,  c1*c3, -s1,  c1*s3,
                 0,  c3*s1,  c1,  s1*s3,
                s2, -c2*s3,   0,  c2*c3);
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void Wildkifs4DKernel(__CONSTANTREF__ Wildkifs4DParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......
    mat4 rot1;
    mat4 mRot;
    float4 closest = to_float4(999.0f,0,0,0);
	float alpha = params->alpha;

    float2 R=iResolution;
    float2 mo=to_float2_v(params->rotation);

    float2 q = fragCoord/R;
    float2 p = -1.0f+2.0f*q;
    p.x *= R.x/R.y;


	// Standardparameter
    p -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f); //*ratio*2.0f
    p *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f); //*ratio
    p = spin(p, pivot, params->angle, 1.0f); //params->debug






    // Noisy background
    float h = dot(to_float3_aw(q,1.0f),to_float3(127.1f,311.7f,758.5453123f));
    float3 colorSum = 0.75f*(to_float3_s(0.0512f) + 0.05f*fract_f(_sinf(h)*43758.5453123f));

    float d = 999.0f;
    if (length(p)<0.92f) {

        //float2 mo = M/R;
        float time = 0.5f*_itime;
        // Rotations
        mRot = Rot4(0.1f*time, 0.351f*time+2.0f, 0.232f*time+1.3f);
        rot1 = Rot4((_itime-3.0f)/2.031f, 1.0f+(_itime-3.0f)/2.1f, 0.1f*_itime);

        // Camera (real cam4D definition available at: https://www.shadertoy.com/view/4tX3Rn)
        float4
		ro = to_float4(3.2f*_cosf(0.24f*_itime + 6.0f*mo.x+ 1.0f), 1.5f + 2.0f*mo.y, 3.2f*_sinf(0.24f*_itime+ 6.0f*mo.x+1.0f),0),
		ta = to_float4_s(0),
		cw = normalize( ta-ro ),
		cp = to_float4(0,1,0,0),
		cu = normalize(to_float4_aw(cross(swixyz(cw),swixyz(cp)),0)),
		cv = normalize(to_float4_aw(cross(swixyz(cu),swixyz(cw)),0)),
		rd = normalize( p.x*cu + p.y*cv + 2.5f*cw ),
		light = normalize(-cw*0.5f-cu+cv+0.5f*cp);

        // Rotation of 4D scene
        ro = mat4_multi_f4(rot1, ro);
		rd = mat4_multi_f4(rot1, rd);
        light = mat4_multi_f4(rot1, light);

        // Render
		colorSum = render( ro, rd, colorSum, &d, light, mRot, &alpha, params);
    }

    // Post process
    float3 col = pow_f3(swixyz(colorSum),to_float3_s(0.56f));
    col *= _powf(16.0f*q.x*q.y*(1.0f-q.x)*(1.0f-q.y), 0.5f);
	fragColor = to_float4_aw(col, alpha*d);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- Wildkifs4D ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})
  InRotation = self:AddInput("Rotation","Rotation", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })


 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
	  IC_Visible          = false,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
	  IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
	  IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })
  InAlpha = self:AddInput("Alpha", "Alpha", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })


self:EndControlNest()

--------------------------------------------
  --  InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
  -- 	INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })


--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
	  -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    Sep1:SetAttrs({LINKS_Name = "____________Wildkifs4D______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "Wildkifs4DKernel", Wildkifs4DKernel, "Wildkifs4DParams", Wildkifs4DParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.rotation = {InRotation:GetValue(req).X,InRotation:GetValue(req).Y}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
        params.alpha    = InAlpha:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(Wildkifs4DParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.rotation = {InRotation:GetValue(req).X,InRotation:GetValue(req).Y}
        params.color    = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
        params.alpha    = InAlpha:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end


    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end



