--[[--
Fake3DScene

Based on https://www.shadertoy.com/view/MddSWB Erstellt von LaBodilsen am 2016-04-23


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess    = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-----------------------------------
-- Description of kernel parameters

----------------Fake3DScene---------------
Fake3DSceneParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float groundmove[2];
  float groundmovespeed[2];
  float ballmove[2];
  float ballmovespeed;
  float ballrotationspeed[2];
  float balllightning[2];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
Fake3DSceneKernel =
    [[
//-----------------------
//-------- mat2 ---------
//-----------------------
 typedef struct
  {
  float2 r0, r1;
  } mat2;

 __DEVICE__ inline mat2 make_mat2( float2 A, float2 B)
  {
  mat2 C;
  C.r0 = A;
  C.r1 = B;
  return C;
  }

 __DEVICE__ inline mat2 make_mat2_2( float A, float B, float C, float D)
  {
  mat2 E;
  E.r0 = to_float2(A,B);
  E.r1 = to_float2(C,D);
  return E;
  }

 __DEVICE__ inline float2 f2_multi_mat2( float2 A, mat2 B)
  {
  float2 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y;
  C.y = A.x * B.r1.x + A.y * B.r1.y;
  return C;
  }

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void Fake3DSceneKernel(__CONSTANTREF__ Fake3DSceneParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    float2 uv = (2.0f*fragCoord - iResolution) / iResolution.y;

	// Standardparameter
    uv -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f);
    uv *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f);
    uv = spin(uv, pivot, params->angle, 1.0f);

    float r = 0.7f;
    float2 ground = to_float2_s(0.0f);
    float3 color = to_float3_s(0.0f);
    fragColor = to_float4_s(0.0f);

    //Floor mapper
    float a = _cosf(itime*0.4f)*0.2f;
    uv = f2_multi_mat2(uv, make_mat2_2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a)) ); //tilt ground)

    if (uv.y < 0.5f){
	ground.x = (uv.x/params->groundmove[0])/(0.5f-uv.y)+_sinf(itime*params->groundmovespeed[0]);
    	ground.y = uv.y / (uv.y-params->groundmove[1])-itime/params->groundmove[1];
    	float4 fc = _tex2DVecN(iChannel1,ground.x, ground.y, 15);
    	color = to_float3(fc.x,fc.y,fc.z)*to_float3_s(_sinf(0.5f-uv.y));
    }
    //move Sphere
    float div = iResolution.x/iResolution.y-0.7f;
    float2 move = to_float2_s(0);
    // move.x = -div+(_fabs(_mod1f(itime*1.5f,div*4.0f)-div*2.0f));
    move.y = params->ballmove[0]-_fabs(_sinf(itime/params->ballmovespeed)*params->ballmove[1]);

    // Shadow
    float2 sphe = uv;
    sphe.y += (uv.y+uv.x*0.5f)+move.y+1.6f;
    sphe.x += (-uv.x*0.1f+1.4f)-move.y-0.5f;
    float radius = r+move.y/2.0f-0.1f;
    float shadow = step(length(sphe),radius);
    if (shadow > radius){
        float shadow = 0.7f;//(length(sphe+(r/3.0f))*0.7f/r);
        color *= shadow;
    }
    //Sphere mapper (derived from https://www.shadertoy.com/view/4d33RM)
    float sphere = step(length(uv+move),r);
    if (sphere > r){
    	float2 map = to_float2_s(0.0f);
    float2 p = uv+move;
	float d=_sqrtf(dot(p,p));
    map.x=p.x/(r+_sqrtf(r-d))+1.0f-_sinf(itime*params->ballrotationspeed[0]);
	map.y=p.y/(r+_sqrtf(r-d))-itime*params->ballrotationspeed[1];
      float light = 1.0f-length(uv+move-(r/params->balllightning[0]))*params->balllightning[1]/r;
      float4 _tex = _tex2DVecN(iChannel0,map.x,map.y,15);
      color = to_float3(light,light,light)*to_float3(_tex.x,_tex.y,_tex.z)*2.0f;
      }

    fragColor = to_float4_aw(color,1.0f);

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

Logo_On = true

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- Fake3DScene ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible         = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	  INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
self:BeginControlNest("Parameter", "_Parameter", false, {})
  InGroundMove = self:AddInput("Ground Move","GroundMove", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 4.0,
    INP_DefaultY = 0.5,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InGroundMoveSpeed = self:AddInput("Ground Movespeed","GroundMoveSpeed", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.4,
    INP_DefaultY = 1.5,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })

  InBallMove = self:AddInput("Ball Move","BallMove", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.4,
    INP_DefaultY = 0.9,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })

  InBallMoveSpeed = self:AddInput("Ball Move Speed", "BallMoveSpeed", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.4,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InBallRotationSpeed = self:AddInput("Ball Rotation Speed","BallRotationSpeed", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.4,
    INP_DefaultY = 1.2,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })

  InBallLightning1 = self:AddInput("BallLightning1", "BallLightning1", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 3.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InBallLightning2 = self:AddInput("BallLightning2", "BallLightning2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.7,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:EndControlNest()


  -- InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	-- INP_Passive         = true,
  -- })



--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
    INP_Required = false
  })

  InImage2 = self:AddInput("Ground", "Ground", {
    LINKID_DataType = "Image",
    LINK_Main = 2,
    INP_Required = false
  })
  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)

  if inp ~= nil and param ~= nil then

    if (param.Value == 1 and inp == InfoButton) then
      bmd.openurl(dctlfuse_infourl)
    end

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end


    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
	  -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end
      if (InImage2:GetValue(req) ~= nil) then
         src2 = InImage2:GetValue(req)
      else
         src2 = Image(imgattrs)
         src2:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}

    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end

    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end
    acttime = _acttime / framerate


 --   Sep1:SetAttrs({LINKS_Name = "____________Fake3DScene______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "Fake3DSceneKernel", Fake3DSceneKernel, "Fake3DSceneParams", Fake3DSceneParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.groundmove        = {InGroundMove:GetValue(req).X,InGroundMove:GetValue(req).Y}
        params.groundmovespeed   = {InGroundMoveSpeed:GetValue(req).X,InGroundMoveSpeed:GetValue(req).Y}
        params.ballmove          = {InBallMove:GetValue(req).X,InBallMove:GetValue(req).Y}
        params.ballmovespeed     = InBallMoveSpeed:GetValue(req).Value
        params.ballrotationspeed = {InBallRotationSpeed:GetValue(req).X,InBallRotationSpeed:GetValue(req).Y}
        params.balllightning     = {InBallLightning1:GetValue(req).Value,InBallLightning2:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(Fake3DSceneParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.groundmove        = {InGroundMove:GetValue(req).X,InGroundMove:GetValue(req).Y}
        params.groundmovespeed   = {InGroundMoveSpeed:GetValue(req).X,InGroundMoveSpeed:GetValue(req).Y}
        params.ballmove          = {InBallMove:GetValue(req).X,InBallMove:GetValue(req).Y}
        params.ballmovespeed     = InBallMoveSpeed:GetValue(req).Value
        params.ballrotationspeed = {InBallRotationSpeed:GetValue(req).X,InBallRotationSpeed:GetValue(req).Y}
        params.balllightning     = {InBallLightning1:GetValue(req).Value,InBallLightning2:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)
    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
	  node:AddInput("iChannel1", src2)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end


