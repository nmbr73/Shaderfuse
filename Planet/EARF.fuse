--[[--
EARF

    Based on https://www.shadertoy.com/view/ls3SDj a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/nmbr73)
    for use in DaFusion.

    Shader created by zackpudil


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
EARFParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float sunposition;
  float spec;
  float intens;
  float light[3];
  float color1[3];
  float color2[3];
  float color3[3];
  float color4[3];
  float color5[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
EARFKernel =
    [[
      //**** mat3 ****
      typedef struct
       {
       float3 r0, r1, r2;
       } mat3;

       __DEVICE__ inline mat3 make_mat3( float3 A, float3 B, float3 C)
       {
       mat3 D;
       D.r0 = A;
       D.r1 = B;
       D.r2 = C;
       return D;
       }

     __DEVICE__ inline float3 mat3_multi_f3( mat3 B, float3 A) {
       float3 C;
       C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
       C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
       C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
       return C;
       }

     //-----------------------
     //-------- mat2 ---------
     //-----------------------
      typedef struct
       {
       float2 r0, r1;
       } mat2;

      __DEVICE__ inline mat2 make_mat2( float2 A, float2 B)
       {
       mat2 C;
       C.r0 = A;
       C.r1 = B;
       return C;
       }

      __DEVICE__ inline mat2 make_mat2_2( float A, float B, float C, float D)
       {
       mat2 E;
       E.r0 = to_float2(A,B);
       E.r1 = to_float2(C,D);
       return E;
       }

     __DEVICE__ inline float2 mat2_multi_f2( mat2 B, float2 A)
       {
       float2 C;
       C.x = A.x * B.r0.x + A.y * B.r0.y;
       C.y = A.x * B.r1.x + A.y * B.r1.y;
       return C;
       }

       #define swixy(V) to_float2((V).x,(V).y)
       #define swixx(V) to_float2((V).x,(V).x)
       #define swiyx(V) to_float2((V).y,(V).x)
       #define swiyy(V) to_float2((V).y,(V).y)

       #define swizy(V) to_float2((V).z,(V).y)
       #define swixz(V) to_float2((V).x,(V).z)

     __DEVICE__ float3 reflect_f3(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
     #define lpowf _powf
     __DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}
     __DEVICE__ float fract_f(float A){return A - _floor(A);}
     __DEVICE__ float3 fract_f3(float3 A){return make_float3(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.z));}

     //-----------------------------------
     #define TMAX  20.0f

     __DEVICE__ float hash(float n) {
     return fract_f(_sinf(n)*43758.54831f);
     }

     __DEVICE__ float hash2(float2 n) {
         return fract_f(_sinf(dot(n, to_float2(12.989f, 71.233f)))*43758.5453f);
     }

     __DEVICE__ float noise(float3 x) {
       float3 p = _floor(x);
       float3 f = fract_f3(x);

       f = f*f*(3.0f - f*2.0f);

       float n = p.x + p.y*57.0f + p.z*113.0f;

       return 	_mix(
                _mix(
           _mix(hash(n + 000.0f), hash(n + 001.0f), f.x),
           _mix(hash(n + 057.0f), hash(n + 058.0f), f.x),	f.y),
           _mix(
           _mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
           _mix(hash(n + 170.0f), hash(n + 171.0f), f.x),  f.y),  f.z);
     }

     __DEVICE__ float fbm(float3 p) {
       float f = 0.0f;

       f += 0.5000f*noise(p); p *= 2.01f;
       f += 0.2500f*noise(p); p *= 2.04f;
       f += 0.1250f*noise(p); p *= 2.02f;
       f += 0.0625f*noise(p);

       f /= 0.9375f;

       return f;
     }

     #define inout
     __DEVICE__ float2 _rotate(inout float2 p, float a) {
       float s = _sinf(a);
       float c = _cosf(a);

       return mat2_multi_f2( make_mat2_2(c, s, -s, c) , p);

    }

    __DEVICE__ float2 map(float3 p, float itime) {
         float3 q = p;
         float2 _p = _rotate(swixz(p), 0.1f*itime);
         p.x = _p.x; p.z = _p.y;
         float f = 0.0f;
         if(length(p) - 1.0f <= 0.1f ) {
			 f = smoothstep(0.0f, 1.0f, 100.0f*smoothstep(0.5f, 1.0f, fbm(4.0f*p)));
			 f += smoothstep(0.0f, 1.0f, 10.0f*smoothstep(0.5f, 1.0f, fbm(2.0f*p + to_float3(0, 0, itime))));
         }
         float2 d1 = to_float2(length(p) - 1.0f - 0.01f*f, 0.0f); //Erde
         _p = _rotate(swixz(q), 0.5f*itime);
         q.x = _p.x; q.z = _p.y;

         q.x -= 1.8f;
         f = 0.0f;
         if(length(q) - 0.3f <= 0.1f) {
            f = fbm(5.0f*q);
         }
         float2 d2 = to_float2(length(q) - 0.3f + 0.05f*f, 1.0f); //Mond

         return d1.x < d2.x ? d1 : d2;
    }

    __DEVICE__ float3 intersect(float3 ro, float3 rd, float itime) {
       float td = 0.0f;
       float mid = -1.0f;
       float g = 0.0f;

       for(int i = 0; i < 100; i++) {
         float2 s = map(ro + rd*td, itime);
         if(_fabs(s.x) < 0.001f || td >= TMAX) break;
         td += s.x*0.95f;
         mid = s.y;
         if(s.y <= 0.0f) g += _clampf(0.05f - s.x, 0.0f, 1.0f);
       }

       if(td >= TMAX) mid = -1.0f;
       return to_float3(td, mid, g);
    }

    __DEVICE__ float3 normal(float3 p, float itime) {
         float2 h = to_float2(0.001f, 0.0f);
         float3 hxyy = to_float3(h.x,h.y,h.y);
         float3 hyxy = to_float3(h.y,h.x,h.y);
         float3 hyyx = to_float3(h.y,h.y,h.x);

         float3 n = to_float3(
         map(p + hxyy, itime).x - map(p - hxyy, itime).x,
         map(p + hyxy, itime).x - map(p - hyxy, itime).x,
         map(p + hyyx, itime).x - map(p - hyyx, itime).x);

          return normalize(n);
    }

    __DEVICE__ float3 earfColor(float3 p, float itime, __CONSTANTREF__ EARFParams *params) {
       float f = 0.0f;
       float3 col = to_float3(params->color2[0], params->color2[1], params->color2[2]);
       float2 _p = _rotate(swixz(p), 0.1f*itime);
       p.x = _p.x; p.z = _p.y;

       f = smoothstep(0.5f, 1.0f, fbm(4.0f*p));
       col = _mix(col, to_float3(params->color1[0], params->color1[1], params->color1[2]), smoothstep(0.0f, 1.0f, 100.0f*f));

       f = smoothstep(0.5f, 1.0f, fbm(2.0f*p + to_float3(0, 0, itime)));
       col = _mix(col, to_float3(params->color3[0],params->color3[1],params->color3[2]), smoothstep(0.0f, 1.0f, 10.0f*f));

       return col;
    }

    __DEVICE__ float3 moonColor(float3 p, float itime) {
       float3 col = to_float3_s(0.2f);
       float2 _p = _rotate(swixz(p), 0.5f*itime);
       p.x = _p.x; p.z = _p.y;

       p.x -= 1.8f;
       float f = fbm(5.0f*p);
       col *= f;

       return col;
    }

    __DEVICE__ mat3 camera(float3 e, float3 l) {
       float3 f = normalize(l - e);
       float3 r = cross(to_float3(0, 1, 0), f);
       float3 u = cross(f, r);

       return make_mat3(r, u, f);
    }

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void EARFKernel(__CONSTANTREF__ EARFParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

     //Functionality.......
     float2 uv = -1.0f + 2.0f*( fragCoord / iResolution );
     //uv.x *= iResolution.x/iResolution.y;
     uv.x *= ratio;

     // Standardparameter
     uv -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f);
     uv *= params->scale;
     float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f);
     uv = spin(uv, pivot, params->angle, 1.0f);


     float atime = itime*0.3f;
     float s = params->sunposition;
     float3 ro = 2.5f*to_float3(_cosf(s), 0, -_sinf(s));
     float3 rd = mat3_multi_f3( camera(ro, to_float3_s(0)) , normalize(to_float3_aw(uv, 2.0f)) );

     float3 col = to_float3_s(1.0f)*step(0.997f, hash2(swixy(rd)));

     float3 i = intersect(ro, rd, itime);

     if(i.y > -0.5f) {
       col = to_float3_s(0);
       float3 lig = normalize(to_float3(params->light[0], params->light[1], params->light[2]));
       float3 pos = ro + rd*i.x;
       float3 nor = normal(pos, itime);
       float3 ref = reflect_f3(rd, nor);

       float dif = _clampf(dot(lig, nor), 0.0f, 1.0f);
       float spe = _powf(_clampf(dot(ref, lig), 0.0f, 1.0f), params->spec);
       float fre = _powf(_clampf(1.0f + dot(rd, nor), 0.0f, 1.0f), 2.0f);

       col =  0.01f*to_float3(1.0f, 0.97f, 0.85f);
       col += 0.70f*to_float3(1.0f, 0.97f, 0.85f)*dif;

       if(i.y == 0.0f) {
         col *= earfColor(pos, itime, params);
         col += 2.0f*spe*to_float3(1.0f, 0.97f, 0.1f)*dif;
         col += 0.1f*fre*to_float3(1.0f, 1.0f, 1.0f)*dif;
       } else {
         col *= moonColor(pos, itime);
         col += params->intens*fre*to_float3(params->color5[0], params->color5[1], params->color5[2]);
       }
     }

     col += _powf(_fabs(i.z), 4.0f)*to_float3(params->color4[0], params->color4[1], params->color4[2]);
     col = pow_f3(col, to_float3_s(0.454545f));

     fragColor = to_float4_aw(col, 1);
       _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- EARF ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})
  InSunposition = self:AddInput("Sunposition", "Sunposition", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InSpec = self:AddInput("Specular", "Spec", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 32.0,
	INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InIntens = self:AddInput("Moon intensity", "Intens", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.1,
	INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InLightX = self:AddInput("Light X", "LightX", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = -1.0,
	  INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InLightY = self:AddInput("Light Y", "LightY", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InLightZ = self:AddInput("Light Z", "LightZ", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = -0.2,
	  INP_MinScale = 0.0,
    INP_MaxScale = 6.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:EndControlNest()

--------------------------------------------
  --  InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })

--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------

------------------ COLOR PAGE -----------------------------
self:AddControlPage("Color")
  Sep6 = self:AddInput("______Mainland_______", "Separator6", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  -- color wheel
  InRed1 = self:AddInput("Red 1", "Red1", {
    ICS_Name            = "Mainland",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.2,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreen1 = self:AddInput("Green 1", "Green1", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlue1 = self:AddInput("Blue 1", "Blue1", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })

  Sep7 = self:AddInput("______Water_______", "Separator7", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  -- color wheel
  InRed2 = self:AddInput("Red 2", "Red2", {
    ICS_Name            = "Water",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.2,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2 = self:AddInput("Green 2", "Green2", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2 = self:AddInput("Blue 2", "Blue2", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })
  Sep9 = self:AddInput("______Clouds_______", "Separator9", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  -- color wheel
  InRed3 = self:AddInput("Red 3", "Red3", {
    ICS_Name            = "Clouds",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 3,
    IC_ControlID        = 0,
  })
  InGreen3 = self:AddInput("Green 3", "Green3", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 3,
    IC_ControlID        = 1,
  })
  InBlue3 = self:AddInput("Blue 3", "Blue3", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 3,
    IC_ControlID        = 2,
  })
  Sep10 = self:AddInput("______Atmosphere_______", "Separator10", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
    -- color wheel
  InRed4 = self:AddInput("Red 4", "Red4", {
    ICS_Name            = "Atmosphere",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.0,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 4,
    IC_ControlID        = 0,
  })
  InGreen4 = self:AddInput("Green 4", "Green4", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.3,
    IC_ControlGroup     = 4,
    IC_ControlID        = 1,
  })
  InBlue4 = self:AddInput("Blue 4", "Blue4", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 4,
    IC_ControlID        = 2,
  })
  Sep11 = self:AddInput("______Moon_______", "Separator11", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
     -- color wheel
  InRed5 = self:AddInput("Red 5", "Red5", {
    ICS_Name            = "Moon",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 5,
    IC_ControlID        = 0,
  })
  InGreen5 = self:AddInput("Green 5", "Green5", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 5,
    IC_ControlID        = 1,
  })
  InBlue5 = self:AddInput("Blue 5", "Blue5", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 5,
    IC_ControlID        = 2,
  })





--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________EARF______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "EARFKernel", EARFKernel, "EARFParams", EARFParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

		params.sunposition = InSunposition:GetValue(req).Value
		params.spec        = InSpec:GetValue(req).Value
		params.intens      = InIntens:GetValue(req).Value
		params.light   = {InLightX:GetValue(req).Value, InLightY:GetValue(req).Value, InLightZ:GetValue(req).Value}
        params.color1  = {InRed1:GetValue(req).Value, InGreen1:GetValue(req).Value, InBlue1:GetValue(req).Value}
        params.color2  = {InRed2:GetValue(req).Value, InGreen2:GetValue(req).Value, InBlue2:GetValue(req).Value}
        params.color3  = {InRed3:GetValue(req).Value, InGreen3:GetValue(req).Value, InBlue3:GetValue(req).Value}
		    params.color4  = {InRed4:GetValue(req).Value, InGreen4:GetValue(req).Value, InBlue4:GetValue(req).Value}
        params.color5  = {InRed5:GetValue(req).Value, InGreen5:GetValue(req).Value, InBlue5:GetValue(req).Value}
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(EARFParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.sunposition = InSunposition:GetValue(req).Value
		params.spec        = InSpec:GetValue(req).Value
		params.intens      = InIntens:GetValue(req).Value
		params.light   = {InLightX:GetValue(req).Value, InLightY:GetValue(req).Value, InLightZ:GetValue(req).Value}
        params.color1  = {InRed1:GetValue(req).Value, InGreen1:GetValue(req).Value, InBlue1:GetValue(req).Value}
        params.color2  = {InRed2:GetValue(req).Value, InGreen2:GetValue(req).Value, InBlue2:GetValue(req).Value}
        params.color3  = {InRed3:GetValue(req).Value, InGreen3:GetValue(req).Value, InBlue3:GetValue(req).Value}
		    params.color4  = {InRed4:GetValue(req).Value, InGreen4:GetValue(req).Value, InBlue4:GetValue(req).Value}
        params.color5  = {InRed5:GetValue(req).Value, InGreen5:GetValue(req).Value, InBlue5:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
     node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR, TEX_ADDRESS_MODE_CLAMP, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end



