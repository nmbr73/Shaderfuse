--[[--
FunWithMetaballs

    Based on https://www.shadertoy.com/view/MlyXWV a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/channel/UCItO4q_3JgMVV2MFIPDGQGg)
    for use in DaFusion.

    Shader created by fwilliams

--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
FunWithMetaballsParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float lcolor[3];
  float shine;
  float acolor[4];
  int bkgaction;
  float bkgcolor[4];
  float b1color[3];
  float b2color[3];
  float b3color[3];
  float b4color[3];
  float radius[4];
  float blend[3];
  int iterations;
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
FunWithMetaballsKernel =
    [[
 #define swixyz(V) to_float3((V).x,(V).y,(V).z)
__DEVICE__ inline float3 reflect_f3(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}


#define EPSILON  1e-2

#define SPHERE1_CTR to_float4(0.75f*_sinf(0.5f*itime), -1.5f*_sinf(0.5f*itime), 5.0f, 1.0f)
#define SPHERE2_CTR to_float4(-0.69f*_cosf(0.5f*itime), 1.5f*_sinf(0.5f*itime), 5.0f, 1.0f)
#define SPHERE3_CTR to_float4(0.83f*_cosf(0.5f*itime), -1.0f*_cosf(0.5f*itime), 5.0f, 1.0f)
#define SPHERE4_CTR to_float4(1.7f*_cosf(0.6f*itime), 1.7f*_cosf(0.7f*itime), 5.0f, 1.0f)

__DEVICE__ float saturate(float x) { return _clampf(x, 0.0f, 1.0f); }

__DEVICE__ float sphereImplicit(float4 pt, float radius, float4 position) {
	return length(pt - position) - radius;
}

__DEVICE__ float s_fminf(float a, float b, float blendRadius) {
    float c = saturate(0.5f + (b - a) * (0.5f / blendRadius));
    return _mix(b, a, c) - blendRadius * c * (1.0f - c);
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void FunWithMetaballsKernel(__CONSTANTREF__ FunWithMetaballsParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......
	int MAX_ITERS = params->iterations;
	float4 SPHERE1_COLOR = to_float4(params->b1color[0], params->b1color[1], params->b1color[2], 1.0f);
	float4 SPHERE2_COLOR = to_float4(params->b2color[0], params->b2color[1], params->b2color[2], 1.0f);
	float4 SPHERE3_COLOR = to_float4(params->b3color[0], params->b3color[1], params->b3color[2], 1.0f);
	float4 SPHERE4_COLOR = to_float4(params->b4color[0], params->b4color[1], params->b4color[2], 1.0f);
	float SPHERE1_RAD = params->radius[0];
	float SPHERE2_RAD = params->radius[1];
	float SPHERE3_RAD = params->radius[2];
	float SPHERE4_RAD = params->radius[3];

	const float4 LIGHT1_POS = to_float4(10.0f, -10.0f, -10.0f, 1.0f);
	const float4 LIGHT2_POS = to_float4(0.0f, 0.0f, -10.0f, 1.0f);
	const float4 LIGHT3_POS = to_float4(-10.0f, 10.0f, -10.0f, 1.0f);
	const float4 LIGHT_COLOR = to_float4(params->lcolor[0], params->lcolor[1], params->lcolor[2], 1.0f);
	const float SHINE = params->shine;
	const float4 AMBIENT = to_float4(params->acolor[0], params->acolor[1], params->acolor[2], params->acolor[3]); //to_float4(0.06f, 0.05f, 0.05f, 1.0f);

    float4 GROUND_COLOR = to_float4(params->bkgcolor[0], params->bkgcolor[1], params->bkgcolor[2], params->bkgcolor[3]);

    if (params->bkgaction == 1)
	       GROUND_COLOR = to_float4(0.5f* (0.5f + _cosf(0.05f*itime)), 0.65f, 0.7f * (0.5f + _sinf(0.5f*itime)), 1.0f);




    float2 uv = (fragCoord/iResolution);
    uv.x -=0.25;
    uv.x *= ratio;

	// Standardparameter
    uv -=  to_float2( (params->center[0]-0.5f)*ratio, (params->center[1]-0.5f));
    uv *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.0f)),(params->pivot[1]-0.0f));
    uv = spin(uv, pivot, params->angle, 1.0f);

    float4 rayDir = to_float4(uv.x - 0.5f, uv.y - 0.5f, 1.0f, 0.0f);
    float4 iterPos = to_float4_aw(swixyz(rayDir), 1.0f);
    rayDir = rayDir / length(rayDir);

    float specular = 0.0f;

    float4 color = GROUND_COLOR;
    float3 normal = to_float3(0.0f, 01.0f, 0.0f);

    for (int i = 0; i < MAX_ITERS; i++) {
        float d = s_fminf(s_fminf(s_fminf(sphereImplicit(iterPos, SPHERE1_RAD, SPHERE1_CTR),
                                           sphereImplicit(iterPos, SPHERE2_RAD, SPHERE2_CTR), params->blend[0]),
                                           sphereImplicit(iterPos, SPHERE3_RAD, SPHERE3_CTR), params->blend[1]),
                                           sphereImplicit(iterPos, SPHERE4_RAD, SPHERE4_CTR), params->blend[2]);

        if (d < EPSILON) {
            specular = ( 8.0f * SHINE ) / ( 8.0f * 3.14159265f );
            float d1 = _fabs(1.0f/(EPSILON + sphereImplicit(iterPos, 0.5f, SPHERE1_CTR)));
            float d2 = _fabs(1.0f/(EPSILON + sphereImplicit(iterPos, 0.5f, SPHERE2_CTR)));
            float d3 = _fabs(1.0f/(EPSILON + sphereImplicit(iterPos, 0.5f, SPHERE3_CTR)));
            float d4 = _fabs(1.0f/(EPSILON + sphereImplicit(iterPos, 0.5f, SPHERE4_CTR)));

            float i1 = d1 / (d1+d2+d3+d4);
            float i2 = d2 / (d1+d2+d3+d4);
            float i3 = d3 / (d1+d2+d3+d4);
            float i4 = d4 / (d1+d2+d3+d4);

            float3 normal1 = normalize(swixyz(iterPos - SPHERE1_CTR));
            float3 normal2 = normalize(swixyz(iterPos - SPHERE2_CTR));
            float3 normal3 = normalize(swixyz(iterPos - SPHERE3_CTR));
            float3 normal4 = normalize(swixyz(iterPos - SPHERE4_CTR));

            normal = normalize(i1*normal1 + i2*normal2 + i3*normal3 + i4*normal4);
            color = (i1*SPHERE1_COLOR + i2*SPHERE2_COLOR + i3*SPHERE3_COLOR + i4*SPHERE4_COLOR);
            break;
        } else {
            iterPos += d*rayDir;
        }
    }

    float3 light1dir = normalize(swixyz(LIGHT1_POS - iterPos));
    float3 light2dir = normalize(swixyz(LIGHT2_POS - iterPos));
    float3 light3dir = normalize(swixyz(LIGHT3_POS - iterPos));

    float3 r1 = -1.0f*normalize(reflect_f3(light1dir, (normal)));
    float3 r2 = -1.0f*normalize(reflect_f3(light2dir, (normal)));
    float3 r3 = -1.0f*normalize(reflect_f3(light3dir, (normal)));

    float3 v = -1.0f*normalize(to_float3(iterPos.x,iterPos.y,iterPos.z));
    float3 h1 = normalize(light1dir + v);
    float3 h2 = normalize(light2dir + v);
    float3 h3 = normalize(light3dir + v);

    fragColor = LIGHT_COLOR * (
        dot(normal, light1dir) + specular*_powf(_fmaxf(dot(r1, h1), 0.0f), SHINE) +
        dot(normal, light2dir) + specular*_powf(_fmaxf(dot(r2, h2), 0.0f), SHINE) +
        dot(normal, light3dir) + specular*_powf(_fmaxf(dot(r3, h3), 0.0f), SHINE) );
    fragColor *= color;
    fragColor += AMBIENT;

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- FunWithMetaballs ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})
  Sep11 = self:AddInput("______Light_______", "Separator11", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

   InLRedCH = self:AddInput("Red", "LRedCH", {
    ICS_Name            = "Light",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    --INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 6,
    IC_ControlID        = 0,
  })
  InLGreenCH = self:AddInput("Green", "LGreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    IC_ControlGroup     = 6,
    IC_ControlID        = 1,
  })
  InLBlueCH = self:AddInput("Blue", "LBlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    IC_ControlGroup     = 6,
    IC_ControlID        = 2,
  })



  InShine = self:AddInput("Shine", "Shine", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 499.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })


  InARedCH = self:AddInput("Red", "ARedCH", {
    ICS_Name            = "Ambient",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.0,
    --INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 7,
    IC_ControlID        = 0,
  })
  InAGreenCH = self:AddInput("Green", "AGreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.0,
    IC_ControlGroup     = 7,
    IC_ControlID        = 1,
  })
  InABlueCH = self:AddInput("Blue", "ABlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.0,
    IC_ControlGroup     = 7,
    IC_ControlID        = 2,
  })
  InAAlphaCH = self:AddInput("Alpha", "AAlphaCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.0,
    IC_ControlGroup     = 7,
    IC_ControlID        = 3,
  })


 InBKGAction = self:AddInput("Background auto", "BKGAction", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    INP_External        = false,
  })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Background",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    --INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 5,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    IC_ControlGroup     = 5,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.7,
    IC_ControlGroup     = 5,
    IC_ControlID        = 2,
  })
  InAlphaCH = self:AddInput("Alpha", "AlphaCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 5,
    IC_ControlID        = 3,
  })


self:EndControlNest()
--------------------------------------------

  -- InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })

--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
--------------------------------------------


------------------ Blob PAGE -----------------------------
self:AddControlPage("Blobs")
  Sep6 = self:AddInput("______Blob 1_______", "Separator6", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
  -- color wheel
  InRed1 = self:AddInput("Red 1", "Red1", {
    ICS_Name            = "Blob 1",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreen1 = self:AddInput("Green 1", "Green1", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.2,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlue1 = self:AddInput("Blue 1", "Blue1", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })
  InBlob1Radius = self:AddInput("Radius", "Blob1Radius", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  Sep7 = self:AddInput("______Blob 2_______", "Separator7", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
  -- color wheel
  InRed2 = self:AddInput("Red 2", "Red2", {
    ICS_Name            = "Blob 2",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.1,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2 = self:AddInput("Green 2", "Green2", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.1,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2 = self:AddInput("Blue 2", "Blue2", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })
  InBlob2Radius = self:AddInput("Radius", "Blob2Radius", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })


  Sep9 = self:AddInput("______Blob 3_______", "Separator9", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
  -- color wheel
  InRed3 = self:AddInput("Red 3", "Red3", {
    ICS_Name            = "Blob 3",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.2,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 3,
    IC_ControlID        = 0,
  })
  InGreen3 = self:AddInput("Green 3", "Green3", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    IC_ControlGroup     = 3,
    IC_ControlID        = 1,
  })
  InBlue3 = self:AddInput("Blue 3", "Blue3", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.2,
    IC_ControlGroup     = 3,
    IC_ControlID        = 2,
  })
  InBlob3Radius = self:AddInput("Radius", "Blob3Radius", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })


  Sep10 = self:AddInput("______Blob 4_______", "Separator10", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
    -- color wheel
  InRed4 = self:AddInput("Red 4", "Red4", {
    ICS_Name            = "Blob 4",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 4,
    IC_ControlID        = 0,
  })
  InGreen4 = self:AddInput("Green 4", "Green4", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    IC_ControlGroup     = 4,
    IC_ControlID        = 1,
  })
  InBlue4 = self:AddInput("Blue 4", "Blue4", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.05,
    IC_ControlGroup     = 4,
    IC_ControlID        = 2,
  })
  InBlob4Radius = self:AddInput("Radius", "Blob4Radius", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  Sep12 = self:AddInput("______Blend_______", "Separator12", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })
  InBlobBlend1 = self:AddInput("Blend 1", "BlobBlend1", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.3,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InBlobBlend2 = self:AddInput("Blend 2", "BlobBlend2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.2,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InBlobBlend3 = self:AddInput("Blend 3", "BlobBlend3", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.25,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })


  InIterations = self:AddInput("Iterations", "Iteerations", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 64,
	INP_Integer = true,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
--------------------------------------------


------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

	if inp == InBKGAction then
      if param.Value == 1 then
	     InRedCH:SetAttrs({IC_Visible = false})
		 InGreenCH:SetAttrs({IC_Visible = false})
		 InBlueCH:SetAttrs({IC_Visible = false})
		 InAlphaCH:SetAttrs({IC_Visible = false})
	  else
	     InRedCH:SetAttrs({IC_Visible = true})
		 InGreenCH:SetAttrs({IC_Visible = true})
		 InBlueCH:SetAttrs({IC_Visible = true})
		 InAlphaCH:SetAttrs({IC_Visible = true})
	  end
	end


    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________FunWithMetaballs______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "FunWithMetaballsKernel", FunWithMetaballsKernel, "FunWithMetaballsParams", FunWithMetaballsParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.lcolor       = {InLRedCH:GetValue(req).Value, InLGreenCH:GetValue(req).Value, InLBlueCH:GetValue(req).Value}
        params.shine        = InShine:GetValue(req).Value
        params.acolor       = {InARedCH:GetValue(req).Value, InAGreenCH:GetValue(req).Value, InABlueCH:GetValue(req).Value, InAAlphaCH:GetValue(req).Value}
		params.bkgaction    = InBKGAction:GetValue(req).Value
        params.bkgcolor     = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value, InAlphaCH:GetValue(req).Value}

		params.b1color      = {InRed1:GetValue(req).Value, InGreen1:GetValue(req).Value, InBlue1:GetValue(req).Value}
		params.b2color      = {InRed2:GetValue(req).Value, InGreen2:GetValue(req).Value, InBlue2:GetValue(req).Value}
		params.b3color      = {InRed3:GetValue(req).Value, InGreen3:GetValue(req).Value, InBlue3:GetValue(req).Value}
		params.b4color      = {InRed4:GetValue(req).Value, InGreen4:GetValue(req).Value, InBlue4:GetValue(req).Value}
        params.radius       = {InBlob1Radius:GetValue(req).Value, InBlob2Radius:GetValue(req).Value, InBlob3Radius:GetValue(req).Value, InBlob4Radius:GetValue(req).Value}
		params.blend        = {InBlobBlend1:GetValue(req).Value, InBlobBlend2:GetValue(req).Value, InBlobBlend3:GetValue(req).Value}
		params.iterations   = InIterations:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(FunWithMetaballsParams)

        params.center[0] = center.X
        params.center[1] = center.Y
        params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.lcolor       = {InLRedCH:GetValue(req).Value, InLGreenCH:GetValue(req).Value, InLBlueCH:GetValue(req).Value}
        params.shine        = InShine:GetValue(req).Value
        params.acolor       = {InARedCH:GetValue(req).Value, InAGreenCH:GetValue(req).Value, InABlueCH:GetValue(req).Value, InAAlphaCH:GetValue(req).Value}
		params.bkgaction    = InBKGAction:GetValue(req).Value
        params.bkgcolor     = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value, InAlphaCH:GetValue(req).Value}

		params.b1color      = {InRed1:GetValue(req).Value, InGreen1:GetValue(req).Value, InBlue1:GetValue(req).Value}
		params.b2color      = {InRed2:GetValue(req).Value, InGreen2:GetValue(req).Value, InBlue2:GetValue(req).Value}
		params.b3color      = {InRed3:GetValue(req).Value, InGreen3:GetValue(req).Value, InBlue3:GetValue(req).Value}
		params.b4color      = {InRed4:GetValue(req).Value, InGreen4:GetValue(req).Value, InBlue4:GetValue(req).Value}
        params.radius       = {InBlob1Radius:GetValue(req).Value, InBlob2Radius:GetValue(req).Value, InBlob3Radius:GetValue(req).Value, InBlob4Radius:GetValue(req).Value}
		params.blend        = {InBlobBlend1:GetValue(req).Value, InBlobBlend2:GetValue(req).Value, InBlobBlend3:GetValue(req).Value}
		params.iterations   = InIterations:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end


