--[[--/*

  PigSquad.fuse

  Based on https://www.shadertoy.com/view/WdBcRh a WebGL shader created by bpfarrell.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  Color4[4];
  float  Color5[4];

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)

 #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define abs_f3(a) fabs(a)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


#define AUTO  //Comment this line to gain mouse controll.

#define MAX_STEPS 300
#define SURF_DIST 1e-3
#define MAX_DIST 100.0f
//#define float2 float2
//#define float3 float3
//#define float4 float4
#define lerp _mix

#define saturate(v) clamp(v,0.0f,0.1f)
//#define fmod _fmod
__DEVICE__ float hash21(float2 p) {
    p = fract_f2(p * to_float2(233.34f, 851.74f));
    p += dot(p, p + 23.45f);
    return fract(p.x * p.y);
}
__DEVICE__ float2 hash22(float2 p) {
    float k = hash21(p);
    return to_float2(k, hash21(p + k));
}
__DEVICE__ float sdSphere(float3 p, float s)
{
    return length(p) - s;
}

__DEVICE__ mat3 rotateY(float theta) {
    float c = _cosf(theta);
    float s = _sinf(theta);

    return to_mat3_f3(
                  to_float3(c, 0, s),
                  to_float3(0, 1, 0),
                  to_float3(-s, 0, c)
    );
}
__DEVICE__ float opSmoothUnion(float d1, float d2, float k) {
    float h = clamp(0.5f + 0.5f * (d2 - d1) / k, 0.0f, 1.0f);
    return lerp(d2, d1, h) - k * h * (1.0f - h);
}
__DEVICE__ float opSmoothSubtraction(float d1, float d2, float k) {
    float h = clamp(0.5f - 0.5f * (d2 + d1) / k, 0.0f, 1.0f);
    return lerp(d2, -d1, h) + k * h * (1.0f - h);
}
__DEVICE__ float sdPlane(float3 p, float4 n)
{
    return dot(p, swi3(n,x,y,z)) + n.w;
}
__DEVICE__ float sdRoundBox(float3 p, float3 b, float r)
{
    float3 q = abs_f3(p) - b;
    return length(_fmaxf(q, to_float3_s(0.0f))) + _fminf(_fmaxf(q.x, _fmaxf(q.y, q.z)), 0.0f) - r;
}

__DEVICE__ float sdPig(float3 p,float jump, float iTime) {
    p*= 1.0f + to_float3(-0.2f,0.2f,-0.2f)*(0.5f+0.5f*_sinf(iTime*10.0f+3.5f));
    float3 j = to_float3(0.0f, -jump, 0.0f);
    p.x = _fabs(p.x);
    float g = opSmoothUnion(sdRoundBox(p+j, to_float3_s(1.0f), 0.1f), sdSphere(p + j, 1.2f), 1.0f); //Main Body
    g = _fminf(g,
            opSmoothUnion(
                          sdRoundBox(p - to_float3(0, -0.25f, 0.9f) + j, to_float3(0.4f, 0.3f, 0.5f), 0.1f),
                          sdSphere(p - to_float3(0, -0.25f, 0.9f) + j, 0.5f), 0.5f) //nose
                         );
    float s = sdRoundBox(p - to_float3(0.2f, -0.25f, 1.5f) + j, to_float3(0.03f, 0.13f, 0.2f), 0.05f); //nostrile
    s = _fminf(s, sdRoundBox(p - to_float3(0.4f, 0.5f, 1.3f) + j, to_float3(0.05f, 0.2f, 0.05f), 0.05f)); //eye
    return opSmoothSubtraction(s, g, 0.02f);
}

__DEVICE__ float sdBridge(float3 p, float t) {
    float gap = 2.4f;
    float tread = _fminf(_fmod(t, 3.141529f * 2.0f) / 3.141529f, 1.0f) * gap;
    float backScale = smoothstep(3.141529f * 2.0f, 3.141529f, _fmod(t, 3.141529f * 2.0f));
    float frontScale = smoothstep(0.0f, 3.141529f, _fmod(t, 3.141529f * 2.0f));
    float g = _fminf(
                    sdRoundBox(p - to_float3(0.0f, -2.3f - ((1.0f - backScale) * 3.0f), gap * -1.0f - tread), to_float3_s(backScale), 0.1f),
                    sdRoundBox(p - to_float3(0.0f, -2.3f, 0.0f - tread), to_float3_s(1.0f), 0.1f)
                    );
    g = _fminf(g, sdRoundBox(p - to_float3(0.0f, -2.3f, gap - tread), to_float3_s(1.0f), 0.1f));
    float alternate = _fmod(_floor(t / (3.141529f * 2.0f)), 2.0f);
    p = (mul_mat3_f3(rotateY(alternate > 0.5f ? (frontScale - 1.0f) : (1.0f - frontScale)) , p));
    return _fminf(g, sdRoundBox(p - to_float3(0.0f, -2.3f, gap * 2.0f - tread), to_float3_s(frontScale), 0.1f));
}

__DEVICE__ float GetDist(float3 p, float iTime) {
float zzzzzzzzzzzzzzzzzzzz;
    float t = iTime * 10.0f;
    //float2 id = _floor(swi2(p,x,z) * 0.2f);
    //swi2(p,x,z) = fract(swi2(p,x,z) * 0.2f) *5.0f - 2.5f;
    //float2 h = hash22(id);
    float g = sdPig(p, _fmaxf(_sinf(iTime * 10.0f /*+ h.x * 3.141529f * 2.0f*/), 0.0f), iTime);
    //g = _fminf(g, sdPlane(p-float3(0,-1.3f,0), float4(0, 1, 0, 0)));
    g = _fminf(g, sdBridge(p, t));

    return g;
}
__DEVICE__ float CalculateAO(float3 p, float3 n, float iTime) {
    float d = 0.6f;
    return smoothstep(0.0f,d,GetDist(p + n*d, iTime));
}
__DEVICE__ float Raymarch(float3 ro, float3 rd, float iTime) {
    float dO = 0.0f;
    float dS;
    for (int i = 0; i < MAX_STEPS; i+=1) {
        float3 p = ro + rd * dO;
        dS = GetDist(p, iTime);
        dO += dS;
        if (dS<SURF_DIST || dO>MAX_DIST) break;
    }
    return dO;
}

__DEVICE__ float3 GetNormal(float3 p, float iTime) {
    float2 e = to_float2(1e-2, 0.0f);

    float3 n = GetDist(p,iTime) - to_float3(
                                  GetDist(p-swi3(e,x,y,y),iTime),
                                  GetDist(p-swi3(e,y,x,y),iTime),
                                  GetDist(p-swi3(e,y,y,x),iTime)
                                  );

    return normalize(n);
}

__DEVICE__ float4 scene (float3 ro,float3 rd, float iTime, float3 Color[5], out bool *alpha)
{

    float3 col = to_float3_s(0);

    float d = Raymarch(ro, rd, iTime);
    float3 light1Dir = normalize(to_float3(0.8f, 1, 0.2f));
    float3 light1Color = to_float3(1, 0.9f, 0.9f);

    if (d < MAX_DIST) {
        float3 p = ro + d * rd;
        float3 n = GetNormal(p, iTime);
        float ground = smoothstep(-1.18f, -1.19f, p.y);
        //col = lerp(to_float3(1, 0.7f, 0.8f), to_float3(0.5f, 0.6f, 0.9f), ground);
        col = lerp(Color[0], Color[1], ground);
        col += _powf(saturate(dot(reflect(rd, n), light1Dir)), 0.6f) * light1Color * 0.3f;
        col += n * 0.15f;
        col *= CalculateAO(p, n, iTime) * 0.4f + 0.6f;
        *alpha = false;
    }
    else
    {
        float3 bg = lerp(Color[2], Color[3], rd.x);
        bg = lerp(bg, Color[4], rd.y);
        col = bg;
        *alpha = true;
    }
    return to_float4_aw(col, 0.0f);
}

__DEVICE__ mat2 Rot(float a) {
    float s = _sinf(a);
    float c = _cosf(a);
    return to_mat2(c, -s, s, c);
}

__DEVICE__ float3 GetRayDir(float2 uv, float3 p, float3 l, float z) {
    float3 f = normalize(l-p),
        r = normalize(cross(to_float3(0,1,0), f)),
        u = cross(f,r),
        c = p+f*z,
        i = c + uv.x*r + uv.y*u,
        d = normalize(i-p);
    return d;
}


__KERNEL__ void PigSquadJipiFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float4 Color4 = to_float4(params->Color4[0], params->Color4[1], params->Color4[2], params->Color4[3]);
  float4 Color5 = to_float4(params->Color5[0], params->Color5[1], params->Color5[2], params->Color5[3]);

  // --------



    float3 Color[] = {swi3(Color1,x,y,z),swi3(Color2,x,y,z),swi3(Color3,x,y,z),swi3(Color4,x,y,z),swi3(Color5,x,y,z)};

    bool alphasignal;
    float alpha = 1.0f;

    float2 uv = (fragCoord-0.5f*iResolution)/iResolution.y;
    float2 m = swi2(iMouse,x,y)/iResolution;

    float3 col = to_float3_s(0);

    float3 ro = to_float3(0, 5, -5);
    if(iMouse.w<0.5f){
      swi2S(ro,y,z, mul_f2_mat2(swi2(ro,y,z) , Rot(-0.4f)));
      swi2S(ro,x,z, mul_f2_mat2(swi2(ro,x,z) , Rot(iTime*0.5f+2.0f)));
    }else{
      swi2S(ro,y,z, mul_f2_mat2(swi2(ro,y,z) , Rot(-m.y*3.14f+1.0f)));
      swi2S(ro,x,z, mul_f2_mat2(swi2(ro,x,z) , Rot(-m.x*6.2831f)));
    }
    float3 rd = GetRayDir(uv, ro, to_float3_s(0), 1.0f);

    fragColor = scene(ro,rd, iTime, Color, &alphasignal);

    if (!alphasignal) alpha = Color1.w;
    else              alpha = Color3.w;

    fragColor.w = alpha;

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_Passive = true,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.9, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor3ColorA = self:AddInput("Alpha", "Color3Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color4", "Color4", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color4",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor4ColorR = self:AddInput("Red",   "Color4Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor4ColorG = self:AddInput("Green", "Color4Green", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColor4ColorB = self:AddInput("Blue",  "Color4Blue",  { INP_Default  = 0.9, IC_ControlID = 2, attrs})
    InColor4ColorA = self:AddInput("Alpha", "Color4Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color5", "Color5", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color5",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor5ColorR = self:AddInput("Red",   "Color5Red",   { INP_Default  = 0.8, IC_ControlID = 0, attrs})
    InColor5ColorG = self:AddInput("Green", "Color5Green", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColor5ColorB = self:AddInput("Blue",  "Color5Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor5ColorA = self:AddInput("Alpha", "Color5Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()



  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "PigSquadJipiFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value,InColor3ColorA:GetValue(req).Value
  }
  params.Color4 = {
    InColor4ColorR:GetValue(req).Value,
    InColor4ColorG:GetValue(req).Value,
    InColor4ColorB:GetValue(req).Value,InColor4ColorA:GetValue(req).Value
  }
  params.Color5 = {
    InColor5ColorR:GetValue(req).Value,
    InColor5ColorG:GetValue(req).Value,
    InColor5ColorB:GetValue(req).Value,InColor5ColorA:GetValue(req).Value
  }
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


