--[[--
20210930_CLUB-CAVE-09

    Based on https://www.shadertoy.com/view/ss3SD8 a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT)
    for use in DaFusion.

    Shader created by 0b5vr on 2021-09-30
    "Shader of the Week"

--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()


-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
SimpleSphereRaymarchingParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  bool tex[2];
  int spheres;
  float seed;
  float planeZ;
  float bumpmap;
  bool light[3];
  float mouse[2];
  float look[3];
  float color[3];
  float alpha;
  float color2[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
SimpleSphereRaymarchingKernel =
    [[
//############### BufferA->Noise A  #####################


//-----------------------
//-------- mat2 ---------
//-----------------------
typedef struct
  {
    float2 r0, r1;
  } mat2;

__DEVICE__ inline mat2 make_mat2( float A, float B, float C, float D)
  {
    mat2 E;
    E.r0 = to_float2(A,B);
    E.r1 = to_float2(C,D);
    return E;
  }

__DEVICE__ inline float2 f2_multi_mat2( float2 A, mat2 B )
  {
	float2 C;
	C.x = A.x * B.r0.x + A.y * B.r0.y;
	C.y = A.x * B.r1.x + A.y * B.r1.y;
	return C;
  }
__DEVICE__ inline float2 mat2_multi_f2( mat2 B, float2 A)
  {
	float2 C;
	C.x = A.x * B.r0.x + A.y * B.r1.x;
	C.y = A.x * B.r0.y + A.y * B.r1.y;
	return C;
  }

//-----------------------
//-------- mat3 ---------
//-----------------------

//**** mat3 ****
typedef struct
  {
	float3 r0, r1, r2;
  } mat3;

__DEVICE__ inline mat3 make_mat3( float3 A, float3 B, float3 C)
  {
	mat3 D;
	D.r0 = A;
	D.r1 = B;
	D.r2 = C;
	return D;
  }

__DEVICE__ inline float3 mat3_multi_f3( mat3 B, float3 A) {
	float3 C;

	C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
	C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
	C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
	return C;
  }

#define lpowf _powf
__DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}
__DEVICE__ float fract_f(float A){return A - _floor(A);}
__DEVICE__ float3 fract_f3(float3 A){return make_float3(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.z));}
__DEVICE__ float sign_f(float value) { if (value == 0.0f) return 0.0f; return value > 0.0f ? 1.0f : -1.0f;}
__DEVICE__ float2 sign_f2(float2 a) {return (to_float2(sign_f(a.x), sign_f(a.y)));}
__DEVICE__ float3 sign_f3(float3 a) {return (to_float3(sign_f(a.x), sign_f(a.y),sign_f(a.z)));}
__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
__DEVICE__ float3 sin_f3(float3 i) {float3 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); return r;}

#if defined(DEVICE_IS_OPENCL) || defined(DEVICE_IS_METAL)
__DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
#endif


#define swixy(V) to_float2((V).x,(V).y)
#define swixz(V) to_float2((V).x,(V).z)
#define swiyz(V) to_float2((V).y,(V).z)

#define swixyz(V) to_float3((V).x,(V).y,(V).z)
#define swiyzx(V) to_float3((V).y,(V).z,(V).x)
#define swizxy(V) to_float3((V).z,(V).x,(V).y)

#define fs(i) (fract_f(_sinf((i)*114.514f)*1919.810f))
#define fs3(i) (fract_f3(sin_f3((i)*114.514f)*1919.810f))
#define lofi(i,j) (_floor((i)/(j))*(j))

#define PI _acosf(-1.0f)

// CAVE 09
// ENTER THE CAVE
//
// DJ: Pinieon

__DEVICE__ mat2 r2d(float t){
  return make_mat2(_cosf(t),_sinf(t),-_sinf(t),_cosf(t));
}

__DEVICE__ mat3 orthBas(float3 z){
  z=normalize(z);
  float3 up=_fabs(z.y)>0.999f?make_float3(0,0,1):make_float3(0,1,0);
  float3 x=normalize(cross(up,z));
  return make_mat3(x,cross(z,x),z);
}

__DEVICE__ float random(float *seed){
  *seed += 1.0f;
  return fs(*seed);
}

__DEVICE__ float3 uniformLambert(float3 n,float *seed){

  float p=PI*2.0f*random(seed);
  float cost=_sqrtf(random(seed));
  float sint=_sqrtf(1.0f-cost*cost);
  return mat3_multi_f3(orthBas(n) , make_float3(_cosf(p)*sint,_sinf(p)*sint,cost));
}

__DEVICE__ float4 tbox(float3 ro,float3 rd,float3 s){
  float3 _or=ro/rd;
  float3 pl=abs_f3(s/rd);
  float3 f=-_or-pl;
  float3 b=-_or+pl;
  float fl=_fmaxf(f.x,_fmaxf(f.y,f.z));
  float bl=_fminf(b.x,_fminf(b.y,b.z));
  if(bl<fl||fl<0.0f){return to_float4_s(1E2);}
  float3 n=-1.0f*sign_f3(rd)*step(swiyzx(f),swixyz(f))*step(swizxy(f),swixyz(f));
  return to_float4_aw(n,fl);
}

struct QTR {
  float3 cell;
  float3 pos;
  float len;
  float size;
  bool hole;
};

__DEVICE__ bool isHole(float3 p){
  if(_fabs(p.x)<0.5f &&_fabs(p.y)<0.5f){return true;}
  float dice=fs(dot(p,make_float3(-2,-5,7)));
  if(dice<0.3f){return true;}
  return false;
}

__DEVICE__ struct QTR qt(float3 ro,float3 rd,float itime){
  float3 haha=lofi(ro+rd * 1e-2f,0.5f);
  float ha=fs(dot(haha,make_float3(6,2,0)));
  ha=smoothstep(-0.2f,0.2f,_sinf(0.5f*itime+PI*2.0f*(ha-0.5f)));

  ro.z+=ha;

  struct QTR r;
  r.size=1.0f;
  for(int i=0;i<4;i++){
    r.size/=2.0f;
    r.cell=lofi(ro+rd * 1e-2f * r.size,r.size)+r.size/2.0f;
    if(isHole(r.cell)){break;}
    float dice=fs(dot(r.cell,make_float3(5,6,7)));
    if(dice>r.size){break;}
  }

  float3 _or=(ro-r.cell)/rd;
  float3 pl=abs_f3(r.size/2.0f/rd);
  float3 b=-_or+pl;
  r.len=_fminf(b.x,_fminf(b.y,b.z));

  r.pos=r.cell-make_float3(0,0,ha);
  r.hole=isHole(r.cell);

  return r;
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void SimpleSphereRaymarchingKernel(__CONSTANTREF__ SimpleSphereRaymarchingParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {
     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

	//Functionality.......
	float2 uv=fragCoord/iResolution;
	float2 p=uv*2.0f-1.0f;
	p.x*= ratio;//iResolution.x/iResolution.y;


  	// Standardparameter
    p -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f);
    p *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*1.0f),(params->pivot[1]-0.5f)*1.0f);
    p = spin(p, pivot*params->scale, params->angle, 1.0f);


  float time = itime;
  float seed = fs((uv.x-uv.y)*0.01f);

  if (params->tex[0])   seed = _tex2DVecN(iChannel0,p.x,p.y,15).x;

  seed += fract_f(time);

  float haha=time*62.0f/60.0f;
  float haha2=_floor(haha)-0.2f*_expf(-fract_f(haha));

  p=mat2_multi_f2(r2d(time*0.2f+0.2f*_floor(haha)) , p);

  float3 ro0=make_float3(0,0,1);
  ro0.z-=haha2;
  ro0+=0.02f*to_float3(_sinf(time*1.36f),_sinf(time*1.78f),0);

  float3 rd0=normalize(to_float3_aw(p,-1.0f));

  float3 ro=ro0;
  float3 rd=rd0;
  float3 fp=ro+rd*2.0f;
  ro += to_float3_aw(0.04f* f2_multi_mat2(make_float2(random(&seed),random(&seed)) , make_mat2(1,1,-1,1)),0);
  rd=normalize(fp-ro);

  float rl=0.01f;
  float3 rp=ro+rd*rl;

  float3 col = to_float3_s(0);
  float3 colRem = to_float3_s(1);
  float samples = 1.0f;

  float3 mtl;

  for(int i=0;i<200;i++){
    struct QTR qtr=qt(rp,rd, itime);

    float4 isect;
    if(qtr.hole){
      isect=to_float4_s(1E2);
    }else{
      float size=qtr.size*0.5f;
      size-=0.01f;
      size-=0.02f*(0.5f+0.5f*_sinf(5.0f*time+15.0f*qtr.cell.z));
      isect=tbox(rp-qtr.pos,rd,to_float3_s(size));
    }

    if(isect.w<1E2){
      float fog=_expf(-0.2f*rl);
      colRem*=fog;

      rl+=isect.w;
      rp=ro+rd*rl;

       mtl=fs3(cross(qtr.cell,make_float3(4,8,1)));

      float3 n=swixyz(isect);

      if(mtl.x<0.1f){
        //col+=colRem*make_float3(10,1,1);
		col+=colRem*to_float3_v(params->color)*10.0f;
        colRem*=0.0f;
      }else if(mtl.x<0.2f){
        //col+=colRem*make_float3(6,8,11);
		col+=colRem*to_float3_v(params->color2)*10.0f;
        colRem*=0.0f;
      }else{
        colRem*=0.3f;
      }

      ro=ro+rd*rl;
      rd=_mix(uniformLambert(n, &seed),reflect(rd,n),_powf(random(&seed),0.3f));
      rl=0.01f;
    } else{
      rl+=qtr.len;
      rp=ro+rd*rl;
    }

    if(colRem.x<0.01f){
      ro=ro0;
      rd=rd0;
      float3 fp=ro+rd*2.0f;
      ro += to_float3_aw(0.04f*f2_multi_mat2(make_float2(random(&seed),random(&seed)) , make_mat2(1,1,-1,1)),0);
      rd=normalize(fp-ro);
      rl=0.01f;
      rp=ro+rd*rl;
      colRem=to_float3_s(1);
      samples+=1.0f;
    }
  }

  col=pow_f3(col/samples,to_float3_s(0.4545f));
  col*=1.0f-0.4f*length(p);
  col=make_float3( smoothstep(0.1f,0.9f,col.x),
			       smoothstep(0.0f,1.0f,col.y),
                   smoothstep(-0.1f,1.1f,col.z) );


  fragColor = to_float4_aw(col,1.0f);


	if (!params->tex[0]) fragColor.w = params->alpha;

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------
  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- SimpleSphereRaymarching ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    PC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Color1",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.1,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.1,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })
  InAlphaCH = self:AddInput("Alpha", "AlphaCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 1,
    IC_ControlID        = 3,
  })


  InRed2CH = self:AddInput("Red", "Red2CH", {
    ICS_Name            = "Color2",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.6,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2CH = self:AddInput("Green", "Green2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2CH = self:AddInput("Blue", "Blue2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.1,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })
self:EndControlNest()

--self:BeginControlNest("Image "..dctlfuse_name, "ImageNest2", true, {ICS_ControlPage  = "Image",})
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
	{ CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	{ CCS_AddString  = "Image1", },
    { CCS_AddString  = "1920x1080", },
	{ CCS_AddString  = "1200x675", },
	{ CCS_AddString  = "800x450", },
	{ CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	ICS_ControlPage  = "Image",
  })

  	InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})

    InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
--self:EndControlNest()

self:AddControlPage("Image")
InGlobalIn = self:AddInput("Global In", "GlobalIn", {
  LINKID_DataType     = "Number",
})
InGlobalOut = self:AddInput("Global Out", "GlobalOut", {
  LINKID_DataType     = "Number",
})



InLogoSw = self:AddInput("Logo", "LogoSw", {
  LINKID_DataType = "Number",
  INPID_InputControl = "CheckboxControl",
  INP_Integer = true,
  INP_DoNotifyChanged = true,
  INP_Default         = 1,
  IC_Visible          = false,
  INP_External        = false,
  INP_Passive         = true,
})

--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Background", "_Background", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	--LINK_Visible = false,
    INP_Required = false
  })
  InImage2 = self:AddInput("Textur", "Textur", {
    LINKID_DataType = "Image",
    LINK_Main = 2,
	LINK_Visible = false,
    INP_Required = false
  })
  InImage3 = self:AddInput("Bumpmap", "_Bumpmap", {
    LINKID_DataType = "Image",
    LINK_Main = 3,
	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

		if inp == InSize then
		  if param.Value == 1 then
			 InWidth:SetAttrs({ IC_Visible = true })
			 InHeight:SetAttrs({ IC_Visible = true })
		  else
			 InWidth:SetAttrs({ IC_Visible = false })
			 InHeight:SetAttrs({ IC_Visible = false })
		  end

		  if param.Value == 3 then --1920x1080
			 InWidth:SetSource(Number(1920),0,0)
			 InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			 InWidth:SetSource(Number(1200),0,0)
			 InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			 InWidth:SetSource(Number(800),0,0)
			 InHeight:SetSource(Number(450),0,0)
		  end
 	      if param.Value == 6 then --640x360
		     InWidth:SetSource(Number(640),0,0)
			 InHeight:SetSource(Number(360),0,0)
		  end
		end

	if inp == InLogoSw then
	  if param.Value == 1 then
		 --authorlogo:SetAttrs({IC_Visible = true})
	  else
		 --authorlogo:SetAttrs({IC_Visible = false})
	  end
	end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences

	-- Imagesize
    if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InImage2:GetValue(req) ~= nil) then
			   Width = InImage2:GetValue(req).Width
			   Height = InImage2:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value
		end
	end


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

	  tex1 = false
      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
		 tex1 = true
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

	  --print("Image2",InImage2:GetValue(req))

	  tex2 = false
	  if (InImage2:GetValue(req) ~= nil) then
         src2 = InImage2:GetValue(req)
		 tex2 = true
      else
         src2 = Image(imgattrs)
         src2:Fill(p)
      end

	  --print("Image3",InImage3:GetValue(req))

      if (InImage3:GetValue(req) ~= nil) then
         src3 = InImage3:GetValue(req)
		 --tex = true
      else
         src3 = Image(imgattrs)
         src3:Fill(p)
      end

    src = Image(imgattrs)
    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}



    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________SimpleSphereRaymarching______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "SimpleSphereRaymarchingKernel", SimpleSphereRaymarchingKernel, "SimpleSphereRaymarchingParams", SimpleSphereRaymarchingParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.tex         = {tex1,tex2}

        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.alpha       = InAlphaCH:GetValue(req).Value
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(SimpleSphereRaymarchingParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

		params.tex         = {tex1,tex2}


        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.alpha       = InAlphaCH:GetValue(req).Value
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
	node:AddInput("iChannel1", src2)
	node:AddInput("iChannel2", src3)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
	collectgarbage();
end

-- **/ "End of LUA CODE"

