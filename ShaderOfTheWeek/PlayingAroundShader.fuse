--[[--/*

  PlayingAroundShader.fuse

  Based on https://www.shadertoy.com/view/NdscDf a WebGL shader created by MinimilisticBits.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  int    iFrame;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d
    #define swi3S(a,b,c,d,e) a.b##c##d = e

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}
    #define swi3S(a,b,c,d,e) {float3 tmp = e; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z;}
    #define swi4S(a,b,c,d,e,f) {float4 tmp = f; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z; (a).e = tmp.w;}

  #endif

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))
 #define mod_f3(value,divisor) fmod(value,divisor)

 #define sin_f2(i) sin(i)
 #define cos_f3(i) cos(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define sqrt_f3(a) _sqrtf(a)
 #define exp_f3(a) _expf((a))
 #define mix_f3(v,i,m) mix(v,i,m)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f(a,b) _fmod(a,b)
 #define mod_f3(value,divisor) _fmod(value,divisor)
 #define sin_f2(i) sin(i)
 #define cos_f3(i) cos(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define sqrt_f3(a) _sqrtf(a)
 #define exp_f3(a) _expf((a))
 #define mix_f3(v,i,m) mix(v,i,m)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define mod_f3(value,divisor) to_float3(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)),mod_f((value).z, (divisor)))
 #define sin_f2(i) to_float2( _sinf((i).x), _sinf((i).y))
 #define cos_f3(i) to_float3( _cosf((i).x), _cosf((i).y), _cosf((i).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define sqrt_f3(a) to_float3(_sqrtf((a).x),_sqrtf((a).y),_sqrtf((a).z))
 #define exp_f3(a) to_float3(_expf((a).x), _expf((a).y),_expf((a).z))
 #define mix_f3(v,i,m) to_float3(_mix((v).x,(i).x,(m).x),_mix((v).y,(i).y,(m).y),_mix((v).z,(i).z,(m).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer A 'Texture: Gray Noise Small' to iChannel0

#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

__DEVICE__ float ring(float2 p, float2 s){
return length(normalize(p)*s.x - p)-s.y;
}

__DEVICE__ float box(float2 p, float2 s){
float2 a = abs_f2(p)-s;
return _fmaxf(a.x,a.y);
}

__DEVICE__ float3 pal(float es, float3 a){
return 0.5f + 0.5f*cos_f3(2.0f*3.14159f*es + a);
}

#define pi  3.14159f

__DEVICE__ float2 rot(float2 a, float c){
float g = c;
float l = length(a);
a = normalize(a);
float ang = _atan2f(a.y,a.x)+g;
return to_float2(l*_cosf(ang),l*_sinf(ang));
}

//NOT MY CODE
__DEVICE__ uint wang_hash(inout uint *seed)
{
    *seed = (uint)(*seed ^ (uint)(61)) ^ (uint)(*seed >> (uint)(16));
    *seed *= (uint)(9);
    *seed = *seed ^ (*seed >> 4);
    *seed *= (uint)(0x27d4eb2d);
    *seed = *seed ^ (*seed >> 15);
    return *seed;
}

__DEVICE__ float rndf(inout uint *state)
{
    return (float)(wang_hash(state)) / 4294967296.0f;
}
/////////////


__DEVICE__ float jb(float3 p, inout float *escape){
    float s=3.0f, e=0.0f;
    s*=e=3.0f/_fminf(dot(p,p),50.0f);
    p=abs_f3(p)*e;
    *escape = 0.0f;
    for(int i=0;i++<17;){
        p=to_float3(2,4,2)-abs_f3(p-to_float3(2,4,2)),
            s*=e=8.0f/_fminf(dot(p,p),10.0f),
            p=abs_f3(p)*e;
            *escape += _expf(-0.2f*dot(p,p));
            }
    return _fminf(length(swi2(p,x,z))-0.1f,p.y)/s;
}

__DEVICE__ float jb3(float3 p, inout float *escape){
    float s=3.0f, e=0.0f;
    s*=e=3.0f/_fminf(dot(p,p),50.0f);
    p=abs_f3(p)*e;
    *escape = 0.0f;
    for(int i=0;i++<17;){
        p=to_float3(2,4,2)-abs_f3(p-to_float3(2,4,2)),
            s*=e=8.0f/_fminf(dot(p,p),10.0f),
            p=abs_f3(p)*e;
            *escape += _expf(-0.2f*dot(p,p));
            }
    return _fminf(length(swi2(p,x,z))-0.1f,p.y)/s;
}

  __DEVICE__ float DEmine(float3 p0, inout float *escape){
float4 p = to_float4_aw(p0, 1.0f);
*escape = 0.0f;
for(int i = 0; i < 7; i++){
  p*=4.79f;
  swi3S(p,x,y,z, mod_f3(swi3(p,x,y,z)-1.5f, 3.0f)-1.5f);
  float m = length(swi3(p,x,y,z));

  p/=dot(swi3(p,x,y,z),swi3(p,x,y,z))+mod_f(m, 1.0f);
  *escape += _expf(-0.2f*dot(swi3(p,x,y,z),swi3(p,x,y,z)));
}

return length(swi3(p,x,y,z))/p.w;
}
__DEVICE__ void sphere_fold(inout float3 *z, inout float *dz) {
  float fixed_radius2 = 1.9f;
  float min_radius2 = 0.1f;
  float r2 = dot(*z, *z);
  if(r2 < min_radius2) {
    float temp = (fixed_radius2 / min_radius2);
    *z *= temp; *dz *= temp;
  }else if(r2 < fixed_radius2) {
    float temp = (fixed_radius2 / r2);
    *z *= temp; *dz *= temp;
  }
}

__DEVICE__ float de22( float3 p ){

    float3 CSize = to_float3(1.0f, 1.7f, 1.0f);
    p = swi3(p,x,z,y);
    float scale = 1.1f;
    for( int i=0; i < 8;i++ ){
      p = 2.0f*clamp(p, -CSize, CSize) - p;
      float r2 = dot(p,p+_sinf(p.z*0.3f));
      float k = _fmaxf((2.0f)/(r2), 0.5f);
      p *= k; scale *= k;
    }
    float l = length(swi2(p,x,y));
    float rxy = l - 1.0f;
    float n = l * p.z;
    rxy = _fmaxf(rxy, (n) / 8.0f);
    return (rxy) / _fabs(scale);
  }
/////////////////////////////////////
__DEVICE__ float DEeerr(float3 p0, inout float *escape){
//p0 = mod_f(p0, 2.0f)-1.0f;
    float4 p = to_float4_aw(p0, 1.0f);
    *escape = 0.0f;
        //p.xyz=1.0f-_fabs(abs(swi3(p,x,y,z)+_sinf(swi3(p,x,y,z))*1.0f)-1.0f);

    if(p.x < p.z) swi2S(p,x,z, swi2(p,z,x));
    if(p.z > p.y) swi2S(p,z,y, swi2(p,y,z));
    if(p.y > p.x) swi2S(p,y,x, swi2(p,x,y));

    for(int i = 0; i < 12; i++){
        //if(p.x > p.z)swi2(p,x,z) = swi2(p,z,x);
       //if(p.z > p.y)swi2(p,z,y) = swi2(p,y,z);
       if(p.y > p.x) swi2S(p,y,x, swi2(p,x,y));
               // swi3(p,x,y,z) = _fabs(swi3(p,x,y,z));

        //box_fold(swi3(p,x,y,z));

        float3 par1 = swi3(p,x,y,z);
        float  par2 = p.w;
        //sphere_fold(swi3(p,x,y,z),p.w);
        sphere_fold(&par1,&par2);
        swi3S(p,x,y,z, par1);
        p.w = par2;

        //swi3(p,x,y,z) = _fabs(swi3(p,x,y,z));
        uint seed = (uint)(p.x+p.y+p.z);
        p*=(1.9f/clamp(dot(swi3(p,x,y,z),swi3(p,x,y,z)),0.0f,1.0f));
        swi3S(p,x,y,z, abs_f3(swi3(p,x,y,z))-to_float3(3.5f,0.5f,3.3f));
        //p*=1.2f;
        swi3S(p,y,x,z, swi3(p,y,x,z) - _sinf((float)(i)*1.0f)*0.9f);
        *escape += _expf(-0.2f*dot(swi3(p,x,y,z),swi3(p,x,y,z)));
        //vec3 norm = normalize(swi3(p,x,y,z));
        //float theta = _acosf(norm.z/length(swi3(norm,x,y,z)));
        //float phi = _atan2f(norm.y/norm.x);
        //*escape = _fminf(max(theta,phi),*escape);
    }
    float m = 1.5f;
    swi3S(p,x,y,z, swi3(p,x,y,z)-clamp(swi3(p,x,y,z),-m,m));
return (length(swi3(p,x,y,z))/p.w)*0.5f;
}
__DEVICE__ float newde(float3 p0, inout float *escape){
float4 p = to_float4_aw(p0, 1.0f);
*escape = 0.0f;
swi2S(p,x,z, (p.x > p.z)?swi2(p,z,x):swi2(p,x,z));
//swi2(p,y,z) = (p.y > p.z)?p.zy:swi2(p,y,z);
swi2S(p,x,y, (p.x > p.y)?swi2(p,y,x):swi2(p,x,y));

for(int i = 0; i < 12; i++){
  //p = _fabs(p);
  //swi2(p,x,z) = (p.x > p.z)?p.zx:swi2(p,x,z);
  //swi2(p,y,z) = (p.y > p.z)?p.zy:swi2(p,y,z);
  //swi2(p,x,y) = (p.x > p.y)?p.yx:swi2(p,x,y);

  swi3S(p,x,y,z,  mod_f(swi3(p,x,y,z)-1.0f, 2.0f)-1.0f);
  p *= 1.1f/clamp(dot(swi3(p,x,y,z),swi3(p,x,y,z)),0.0f,1.2f);
  //swi3(p,x,y,z) -= to_float3(2.0f,0.4f,0.6f);
  *escape += _expf(-0.2f*dot(swi3(p,x,y,z),swi3(p,x,y,z)));
}
p/=p.w;
return _fabs(p.x)*0.25f;
}

__DEVICE__ float fractal(float3 p0, inout float *escape){
//p0 = mod_f(p0, 2.0f)-1.0f;
    float4 p = to_float4_aw(p0, 1.0f);
    *escape = 0.0f;
    swi3S(p,x,y,z, abs_f3(swi3(p,x,y,z)));
    uint seed = (uint)(p.x+p.y+p.z);
    if(p.x < p.z) swi2S(p,x,z, swi2(p,z,x));
    if(p.z > p.y) swi2S(p,z,y, swi2(p,y,z));
    if(p.y > p.x) swi2S(p,y,x, swi2(p,x,y));
    for(int i = 0; i < 12; i++){
        if(p.x < p.z) swi2S(p,x,z, swi2(p,z,x));
        if(p.z < p.y) swi2S(p,z,y, swi2(p,y,z));
        if(p.y < p.x) swi2S(p,y,x, swi2(p,x,y));

        swi3S(p,x,y,z, abs_f3(swi3(p,x,y,z)));

        p*=((1.4f+rndf(&seed)*0.1f)/clamp(dot(swi3(p,x,y,z),swi3(p,x,y,z)),0.5f,1.0f));
        swi3S(p,x,y,z, swi3(p,x,y,z)-to_float3(0.2f+rndf(&seed)*0.2f,0.6f-rndf(&seed)*0.3f,2.3f));
        p*=1.2f-rndf(&seed)*0.4f;

        *escape += _expf(-0.2f*dot(swi3(p,x,y,z),swi3(p,x,y,z)));
        //vec3 norm = normalize(swi3(p,x,y,z));
        //float theta = _acosf(norm.z/length(swi3(norm,x,y,z)));
        //float phi = _atan2f(norm.y/norm.x);
        //*escape = _fminf(max(theta,phi),*escape);
    }
    float m = 1.5f;
    swi3S(p,x,y,z, swi3(p,x,y,z)-clamp(swi3(p,x,y,z),-m,m));
    return (length(swi3(p,x,y,z))/p.w)*0.5f;
}

__DEVICE__ float fractal_de46(float3 p, inout float *escape){
    float s = 2.0f;
    float e = 0.0f;
    *escape = 0.0f;

    for(int j=0;++j<7;){
        swi2S(p,x,z, abs_f2(swi2(p,x,z))-2.3f);

        //p.z>p.x?p=swi3(p,z,y,x):p,
        if (p.z>p.x) p=swi3(p,z,y,x);

        p.z=1.5f-_fabs(p.z-1.3f+_sinf(p.z)*0.2f);

        //p.y>p.x?p=swi3(p,y,x,z):p,
        if (p.y>p.x) p=swi3(p,y,x,z);

        p.x=3.0f-_fabs(p.x-5.0f+_sinf(p.x*3.0f)*0.2f);

        //p.y>p.x?p=swi3(p,y,x,z):p,
        if (p.y>p.x) p=swi3(p,y,x,z);

        p.y=0.9f-_fabs(p.y-0.4f);
        e=12.0f*clamp(0.3f/_fminf(dot(p,p),1.0f),0.0f,1.0f)+2.0f*clamp(0.1f/_fminf(dot(p,p),1.0f),0.0f,1.0f);
        p=e*p-to_float3(7,1,1);
        s*=e;
        *escape+=_expf(-0.2f*dot(p,p));
        }
    return length(p)/s;
}

__DEVICE__ float jb2(float3 p, inout float *escape){
  swi2S(p,x,z, fract_f2(swi2(p,x,z))-0.5f);
  *escape = 0.0f;
  float k=1.0f;
  float s=0.0f;
  for(int i=0;i++<12;){
    s=2.0f/clamp(dot(p,p),0.1f,1.0f),
    p=abs_f3(p)*s-to_float3(0.4f,5,0.5f),
    k*=s;
    *escape += _expf(-0.2f*dot(p,p));
    }

  return length(p)/k-0.001f;
}
__DEVICE__ float2 hash2( float2 p, __TEXTURE2D__ iChannel1 )
{
  return swi2(texture( iChannel1, (p+0.5f)/256.0f),x,y);
}
__DEVICE__ float2 voronoi(float2 p, __TEXTURE2D__ iChannel1){
float2 f = _floor(p);
float2 res = to_float2_s(8.0f);
for(int i = 0; i < 9; i++){
  float2 coords = f + to_float2(mod_f((float)(i),3.0f)-1.0f, (float)(i/3)-1.0f);
  float2 o = hash2( coords, iChannel1 );
  o = 0.5f + 0.4f*sin_f2(6.2831f*o );
  float2 pos = (coords+o);
  float d = dot(pos-p,pos-p);
  if( d < res.x )
  {
      res.y = res.x;
      res.x = d;
  }
  else if( d < res.y )
  {
      res.y = d;
  }
}
return res;
}

__DEVICE__ float3 lens(float2 p, float2 mouse, inout uint *k, inout float *escape, float iTime, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1){

float3 col = to_float3_s(_expf(-20.0f*length(mouse-p)));
col += _expf(-20.0f*length(-mouse*rndf(k)*0.5f-p));
col += _expf(-ring(-mouse*0.4f-p, to_float2(0.7f, 0.01f))*20.0f)*_sinf(texture(iChannel0, normalize(p*rndf(k))).x);
col *= pal(_expf(-length(-mouse*rndf(k)*0.9f-p)), to_float3(0.9f,0.5f,0.9f));
for(int i = 0;i < 5; i++){
  col += _expf(-ring(mouse*2.0f*(0.1f+(float)(i)/5.0f)-p, to_float2(0.1f-(float)(i)/15.0f, 0.001f*(float)(i+1)))*20.0f);
}
col *= pal(length(mouse*rndf(k)-p), to_float3(0.9f,0.5f,0.4f))*0.4f;//
//col += _expf(-length(mouse-p))*to_float3(0.9f,0.6f,0.2f)
//*_sinf(texture(iChannel0, normalize(mouse-p)).x)*_expf(-length(mouse-p)*5.0f)*2.0f;
//col += _expf(-length(mouse-p)*10.0f)*2.0f;
//col *= pal(length(-mouse-p)*10.0f, to_float3(0.9f,0.4f,0.9f));
col += _expf(-(_fabs(box(-mouse*rndf(k)-p, to_float2_s(0.1f)))+0.2f)*20.0f);
col += _expf(-jb3((to_float3_aw(p*2.0f,iTime*0.4f))/2.0f, escape)*1000.0f);
col *= pal(*escape, to_float3(0.9f,0.4f,0.2f));

col += _expf(-voronoi(p, iChannel1).x*200.0f);
col *= pal(*escape, to_float3(0.9f,0.4f,0.2f));

return col;
}

__KERNEL__ void PlayingAroundShaderFuse__Buffer_A(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);

  // --------

    fragCoord+=0.5f;

    float escape = 0.0f;

    // Normalized pixel coordinates (from 0 to 1)
    float2 uv = fragCoord/iResolution;
    ///NOT MY CODE///
    uint r = (uint)((uint)(fragCoord.x) * (uint)(1973)
           + (uint)(fragCoord.y) * (uint)(9277)
           + (uint)(iFrame) * (uint)(26699)) | (uint)(1);

    ///////////////

    uv = uv * 2.0f - 1.0f;
    uv.x *= 1.3f;
    uv.y /= 1.3f;
    uv *= 3.5f;
    // Time varying pixel color
    float2 mouse = swi2(iMouse,x,y) / iResolution;
    mouse = mouse * 2.0f - 1.0f;
    float3 col = to_float3_s(0.0f);

    for(int i = 0; i < 15; i++){
        uint k = (uint)(i+1);
        float offset = rndf(&k);
        col += lens(rot(uv*(rndf(&k)+0.04f), offset*iTime), to_float2(_cosf(offset*2.0f*3.14159f+iTime), _sinf(offset*2.0f*3.14159f-iTime))+mouse, &k, &escape, iTime, iChannel0, iChannel1)*offset*0.4f;
    }

    // Output to screen
    fragColor = to_float4_aw(col,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0



//NOT MY CODE//////////////////////
__DEVICE__ float3 ACESFilm(float3 x)
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0f,1.0f);
}
//////////////////////////////////

__DEVICE__ float3 blur(float2 uv, float r, float2 iResolution, __TEXTURE2D__ iChannel0){
float3 c = to_float3_s(0.0f);
uv *= iResolution;
float iter = 0.0f;
for(int i = 0; i < 10; i++){
  for(int k = 0; k < 10; k++){
     float x = (float)(k)-5.0f;
     float y = (float)(i)-5.0f;
     x*=r;
     y*=r;
     //float bok = texture(iChannel1, to_float2_s(0.5f)+((to_float2(x,y)*6.0f)/iResolution)).y;
     float4 c2 = texture(iChannel0, (uv+to_float2(x,y))/iResolution);
     float3 col = swi3(c2,x,y,z);
     col = clamp(col,0.0f,1.0f);
     //if(length(col) > 0.6f)col*=1.2f;
     c += col;
     iter+=1.0f;
  }
}
c/=iter;
return c;
}


__DEVICE__ float3 blur2(float2 p,float dist, float2 iResolution, __TEXTURE2D__ iChannel0){
    p*=iResolution;
    float3 s = to_float3_s(0.0f);

    float3 div = to_float3_s(0.0f);
    //vec2 off = to_float2(0.0f, r);
    float k = 0.61803398875f;
    for(int i = 0; i < 150; i++){
      float m = (float)(i)*0.01f;
      float r = 2.0f*3.14159f*k*(float)(i);
      float2 coords = to_float2(m*_cosf(r), m*_sinf(r))*dist;
      float4 c2 = texture(iChannel0, (p+coords)/iResolution);
      float3 c = swi3(c2,x,y,z) / (c2.w+1.0f);
      //c = c*c *1.8f;
      float3 bok = pow_f3(c,to_float3_s(4.0f));
      s+=c*bok;
      div += bok;
    }
    s/=div;
    return s;
}

__KERNEL__ void PlayingAroundShaderFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);

  // --------

    // Normalized pixel coordinates (from 0 to 1)
    float2 uv = fragCoord/iResolution;
    //vec3 col = _tex2DVecN(iChannel0,uv.x,uv.y,15).xyz;
    // Output to screen
    float3 col = blur2(uv, length((uv*2.0f-1.0f)*5.0f), iResolution, iChannel0);
    float off = _tex2DVecN(iChannel0,uv.x,uv.y,15).w;
    float3 rad = to_float3_s(0.0f);
    float2 offset2 = (fragCoord - iResolution/2.0f)*1.0f;
    for(int i = 0; i < 20; i++){
       float2 offset = fragCoord + offset2*smoothstep(0.0f,15.0f-length(uv*2.0f-1.0f)*1.5f, (float)(i)/20.0f)*1.0f;
       rad.x += texture(iChannel0, (offset+offset2*0.034f)/iResolution).x;
       rad.y += texture(iChannel0, (offset)/iResolution).y;
       rad.z += texture(iChannel0, (offset-offset2*0.034f)/iResolution).z;

    }
    rad /= 16.0f;

    col += rad*0.8f;
    col = clamp(col, 0.0f, 1.0f);
    col = to_float3_s(1.0f)-exp_f3(-1.3f*col);

    //NOT MY CODE//////////////////
    float3 a = to_float3(0.3f,0.3f,0.4f)-0.4f;
    col = mix_f3(col, smoothstep(to_float3_s(0.0f),to_float3_s(1.0f),col),a);
    //////////////////////////////
    // Output to screen
    float3 aa = to_float3(1.0f,1.1f,1.1f);
    col = sqrt_f3(col/aa);
    col = (1.0f/((1.0f)+exp_f3(-(10.0f)*(col-0.5f))));
    col = pow_f3(col, to_float3_s(1.5f))*1.8f;
    //col = _powf(col, to_float3(0.7f,0.8f,0.9f));
    col = ACESFilm(col);
    col = pow_f3(col, to_float3_s(1.0f/2.2f));

    fragColor = to_float4_aw(col,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })


  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
  	IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
   	INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Main = 2, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "PlayingAroundShaderFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "PlayingAroundShaderFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iFrame = req.Time

  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddInput("iChannel0", iChannel0)  -- Anpassen !!
    nodeA:AddInput("iChannel1", iChannel1)  -- Anpassen !!
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA


    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "PlayingAroundShaderFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddInput("iChannel1", iChannel0)           -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end


-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
