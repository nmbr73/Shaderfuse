--[[--/*

  Energeticflyby.fuse

  Based on https://www.shadertoy.com/view/csjGDD a WebGL shader created by Kali.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  Color1[4];
  float  Color2[4];
  float  ViewXY[2];
  float  ViewZ;
  float  Level0;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))

 #define sin_f3(i) sin(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f(a,b) _fmod(a,b)
 #define sin_f3(i) sin(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define sin_f3(i) to_float3( _sinf((i).x), _sinf((i).y), _sinf((i).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


#define time iTime
#define resolution iResolution
#define so fract(_sinf(time)*123.456f)

__DEVICE__ mat3 lookat(float3 dir, float3 up) {
  float3 rt=normalize(cross(dir,up));
  return to_mat3_f3(rt,cross(rt,dir),dir);
}
__DEVICE__ float3 path(float t) {
  return to_float3(_sinf(t+_cosf(t)*0.5f)*0.5f,_cosf(t*0.5f),t);
}
__DEVICE__ mat2 rot(float a) {
  float s=_sinf(a);
  float c=_cosf(a);
  return to_mat2(c,s,-s,c);
}
__DEVICE__ float3 fractal(float2 p, float iTime) {
  p=fract_f2(p*0.1f);
  float m=1000.0f;
  for (int i=0; i<7; i++) {
    p=abs_f2(p)/clamp(_fabs(p.x*p.y),0.25f,2.0f)-1.2f;
    m=_fminf(m,_fabs(p.y)+fract(p.x*0.3f+time*0.5f+(float)(i)*0.25f));
  }
  m=_expf(-6.0f*m);
  return m*to_float3(_fabs(p.x),m,_fabs(p.y));
}

__DEVICE__ float coso(float3 pp, float iTime, float *br) {
  pp*=0.7f;
  swi2S(pp,x,y, mul_f2_mat2(swi2(pp,x,y),rot(pp.z*2.0f)));
  swi2S(pp,x,z, mul_f2_mat2(swi2(pp,x,z),rot(time*2.0f)));
  swi2S(pp,y,z, mul_f2_mat2(swi2(pp,y,z),rot(time)));
  float sph=length(pp)-0.04f;
  sph-=length(sin_f3(pp*40.0f))*0.05f;
  sph=_fmaxf(sph,-length(pp)+0.11f);
  float br2=length(pp)-0.03f;
  br2=_fminf(br2,length(swi2(pp,x,y))+0.005f);
  br2=_fminf(br2,length(swi2(pp,x,z))+0.005f);
  br2=_fminf(br2,length(swi2(pp,y,z))+0.005f);
  br2=_fmaxf(br2,length(pp)-1.0f);
  *br=_fminf(br2,*br);
  float d=_fminf(*br,sph);
  return d;
}


__DEVICE__ float de(float3 p, float iTime, float *br, float *hit, float3 sphpos, float3 *pos, float *tub) {
  *hit=0.0f;
  *br=1000.0f;
  float3 pp=p-sphpos;
  swi2S(p,x,y, swi2(p,x,y) - swi2(path(p.z),x,y));
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y),rot(p.z+time*0.5f)));
  float s=_sinf(p.z*0.5f+time*0.5f);
  swi2S(p,x,y, swi2(p,x,y) * (1.3f-s*s*0.7f));

  for(int i=0; i<6; i++) {
    p=abs_f3(p)-0.4f;
  }
  *pos=p;
  *tub=-length(swi2(p,x,y))+0.45f+_sinf(p.z*10.0f)*0.1f*smoothstep(0.4f,0.5f,_fabs(0.5f-fract(p.z*0.05f))*2.0f);
  float co=coso(pp,iTime,br);
  co=_fminf(co,coso(pp+0.7f,iTime,br));
  co=_fminf(co,coso(pp-0.7f,iTime,br));
  float d=_fminf(*tub,co);
  if (d==*tub) *hit=step(fract(0.1f*length(sin_f3(p*10.0f))),0.05f);
  return d*0.3f;
}

__DEVICE__ float3 march(float3 from, float3 dir, float iTime, float3 sphpos, float3 Color2) {
  float det=0.001f, br=0.0f, tub=0.0f, hit=0.0f;
  float3 pos;

  float2 uv=to_float2(_atan2f(dir.x,dir.y)+time*0.5f,length(swi2(dir,x,y))+_sinf(time*0.2f));
  float3 col=fractal(uv,iTime);
  float d=0.0f,td=0.0f,g=0.0f, ref=0.0f, ltd=0.0f, li=0.0f;
  float3 p=from;
  for (int i=0; i<200; i++) {
    p+=dir*d;
    d=de(p, iTime, &br, &hit, sphpos, &pos, &tub);
    if (d<det && ref==0.0f && hit==1.0f) {
      float2 e=to_float2(0.0f,0.1f);
      float3 n=normalize(to_float3(de(p+swi3(e,y,x,x), iTime, &br, &hit, sphpos, &pos, &tub),de(p+swi3(e,x,y,x), iTime, &br, &hit, sphpos, &pos, &tub),de(p+swi3(e,x,x,y), iTime, &br, &hit, sphpos, &pos, &tub))-de(p, iTime, &br, &hit, sphpos, &pos, &tub));
      p-=dir*d*2.0f;
      dir=reflect(dir,n);
      ref=1.0f;
      td=0.0f;
      ltd=td;
      continue;
    }
    if (d<det || td>5.0f) break;
    td+=d;
    g+=0.1f/(0.1f+br*13.0f);
    li+=0.1f/(0.1f+tub*5.0f);
  }
  g=_fmaxf(g,li*0.15f);
  float f=1.0f-td/3.0f;
  if (ref==1.0f) f=1.0f-ltd/3.0f;
  if (d<0.01f) {
    col=to_float3_s(1.0f);
    float2 e=to_float2(0.0f,det);
    float3 n=normalize(to_float3(de(p+swi3(e,y,x,x), iTime, &br, &hit, sphpos, &pos, &tub),de(p+swi3(e,x,y,x), iTime, &br, &hit, sphpos, &pos, &tub),de(p+swi3(e,x,x,y), iTime, &br, &hit, sphpos, &pos, &tub))-de(p, iTime, &br, &hit, sphpos, &pos, &tub));
    col=to_float3_s(n.x)*0.7f;
    col+=fract(pos.z*5.0f)*to_float3(0.2f,0.1f,0.5f);
    col+=fractal(swi2(pos,x,z)*2.0f, iTime);
    if (tub>0.01f) col=to_float3_s(0.0f);
  }
  col*=f;
  float3 glo=g*0.1f*to_float3(2.0f,1.0f,2.0f)*(0.5f+so*1.5f)*0.5f;

  swi2S(glo,x,z, mul_f2_mat2(swi2(glo,x,z) , rot(dir.y*1.5f)));

  col+=glo;
  col*=Color2;//to_float3(0.8f,0.7f,0.7f);
  col=_mix(col,to_float3_s(1.0f),ref*0.3f);
  return col;
}


__KERNEL__ void EnergeticflybyJipiFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  Level0 = params->Level0;

  // --------

  float2 uv = to_float2(fragCoord.x / resolution.x, fragCoord.y / resolution.y);
  uv -= 0.5f;
  uv /= to_float2(resolution.y / resolution.x, 1);
  float t=time;
  float3 from = path(t) + to_float3_aw(ViewXY,ViewZ);
  if (mod_f(time,10.0f)>5.0f) from = path(_floor(t/4.0f+0.5f)*4.0f) + to_float3_aw(ViewXY,ViewZ);
  float3 sphpos=path(t+0.5f);
  from.x+=0.2f;
  float3 fw  = normalize(path(t+0.5f)-from);
  float3 dir = normalize(to_float3_aw(uv,0.5f));
  dir=mul_mat3_f3(lookat(fw,to_float3(fw.x*2.0f,1.0f,0.0f)),dir);
  swi2S(dir,x,z, swi2(dir,x,z) + _sinf(time)*0.3f);
  float3 col=march(from,dir, iTime, sphpos,swi3(Color2,x,y,z));
  col=_mix(to_float3_s(0.5f)*length(col),col,Level0);//0.8f);
  //fragColor = to_float4_aw(col,1.0f);

  fragColor = to_float4_aw(swi3(col,x,y,z) * (swi3(Color1,x,y,z) + 0.5f), Color1.w);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.8, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.7, IC_ControlID = 2, attrs})
    

  self:EndControlNest()

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InLevel0Slider = self:AddInput("Level0", "Level0", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.8,
      })



  Sep3 = self:AddInput(string.rep("_", 52), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
	  IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


    node = DVIPComputeNode(req,
    "EnergeticflybyJipiFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)


  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,
  }
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.Level0 = InLevel0Slider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution
  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
      
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */


