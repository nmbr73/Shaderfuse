--[[--/*

  ExitTheMatrix.fuse

  Based on https://www.shadertoy.com/view/NlsXDH a WebGL shader created by Kali
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
     mat3 D;
     D.r0 = A;
     D.r1 = B;
     D.r2 = C;
     return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
     float3 C;

     C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
     C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
     C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
     return C;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

  #define fract_f(A)  fract(A)
  #define fract_f3(A) fract(A)
  #define sign_f(value) sign(value)
  #define mod_f(a,b)  fmod((a),(b))
  #define mod_f2(value,divisor) fmod(value,divisor)

  #define abs_f2(a) _fabs(a)
  #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

    #define fract_f(A)  fract(A)
    #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
    #define sign_f(value) sign(value)
    #define mod_f(a,b) _fmod(a,b)
    #define mod_f2(value,divisor) _fmod(value,divisor)

    #define abs_f2(a) fabs(a)
    #define abs_f3(a) fabs(a)

 //-------refract--------

 #else // Generic

#if defined(DEVICE_IS_CUDA)
  #define radians(a) a * M_PI/180.0f
#endif

  #define fract(a) ((a)-_floor(a))

  #define fract_f(A)  fract(A)
  #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
  #define sign_f(value) (value == 0.0f ? 0.0f : value > 0.0f ? 1.0f : -1.0f)
  #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
  #define mod_f2(value,divisor) to_float2(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)))

  #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
  #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))



  #endif

#endif



]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------

#define swi2S(a,b,c,d) {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}


__DEVICE__ float hash(float2 p)
{
  float3 p3  = fract_f3(swi3(p,x,y,x) * 0.1031f);
    p3 += dot(p3, swi3(p3,y,z,x) + 33.33f);
    return fract((p3.x + p3.y) * p3.z);
}


__DEVICE__ mat2 rot(float a)
{
    float s=_sinf(a), c=_cosf(a);
    return to_mat2(c,s,-s,c);
}

__DEVICE__ float3 path(float t)
    {
    float3 p=to_float3_aw(to_float2(_sinf(t*0.1f),_cosf(t*0.05f))*10.0f,t);
    p.x+=smoothstep(0.0f,0.5f,_fabs(0.5f-fract_f(t*0.02f)))*10.0f;
    return p;
}

__DEVICE__ float fractal(float2 p, float t)
{
    p=abs_f2(5.0f-mod_f2(p*0.2f,10.0f))-5.0f;
    float ot=1000.0f;
    for (int i=0; i<7; i++)
    {
        p=abs_f2(p)/clamp(p.x*p.y,0.25f,2.0f)-1.0f;
        if(i>0)ot=_fminf(ot,_fabs(p.x)+0.7f*fract_f(_fabs(p.y)*0.05f+t*0.05f+(float)(i)*0.3f));

    }
    ot=_expf(-10.0f*ot);
    return ot;
}

__DEVICE__ float box(float3 p, float3 l)
{
    float3 c=abs_f3(p)-l;
    return length(_fmaxf(to_float3_s(0.0f),c))+_fminf(0.0f,_fmaxf(c.x,_fmaxf(c.y,c.z)));
}

__DEVICE__ float de(float3 p, inout float *boxhit, float t, float3 adv, inout float3 *boxp)
{
    *boxhit=0.0f;
    float3 p2=p-adv;
    swi2S(p2,x,z,mul_f2_mat2(swi2(p2,x,z),rot(t*0.2f)))
    swi2S(p2,x,y,mul_f2_mat2(swi2(p2,x,y),rot(t*0.1f)))
    swi2S(p2,y,z,mul_f2_mat2(swi2(p2,y,z),rot(t*0.15f)))
    float b=box(p2,to_float3_s(1.0f));
    swi2S(p,x,y,swi2(p,x,y)-swi2(path(p.z),x,y))
    float s=sign_f(p.y);
    p.y=-_fabs(p.y)-3.0f;
    p.z=mod_f(p.z,20.0f)-10.0f;
    for (int i=0; i<5; i++)
    {
        p=abs_f3(p)-1.0f;
        swi2S(p,x,z,mul_f2_mat2(swi2(p,x,z),rot(radians(s*-45.0f))))
        swi2S(p,y,z,mul_f2_mat2(swi2(p,y,z),rot(radians(90.0f))))
    }
    float f=-box(p,to_float3(5.0f,5.0f,10.0f));
    float d=_fminf(f,b);
    if (d==b) *boxp=p2, *boxhit=1.0f;
    return d*0.7f;
}


__DEVICE__ float3 march(float3 from, float3 dir, float t, float3 adv, float2 gl_FragCoord)
{
    float det=0.001f, boxhit;
    float3 boxp;

    float3 p,n,g=to_float3_s(0.0f);
    float d, td=0.0f;
    for (int i=0; i<80; i++)
    {
        p=from+td*dir;
        d=de(p,&boxhit,t,adv, &boxp)*(1.0f-hash(gl_FragCoord+t)*0.3f);
        if (d<det && boxhit<0.5f) break;
        td+=_fmaxf(det,_fabs(d));
        float f=fractal(swi2(p,x,y),t)+fractal(swi2(p,x,z),t)+fractal(swi2(p,y,z),t);
        //boxp*=0.5f;
        float b=fractal(swi2(boxp,x,y),t)+fractal(swi2(boxp,x,z),t)+fractal(swi2(boxp,y,z),t);

        float3 colf=to_float3(f*f,f,f*f*f);
        float3 colb=to_float3(b+0.1f,b*b+0.05f,0.0f);
        g+=colf/(3.0f+d*d*2.0f)*_expf(-0.0015f*td*td)*step(5.0f,td)/2.0f*(1.0f-boxhit);
        g+=colb/(10.0f+d*d*20.0f)*boxhit*0.5f;
    }
    return g;
}

__DEVICE__ mat3 lookat(float3 dir, float3 up)
{
  dir=normalize(dir);
  float3 rt=normalize(cross(dir,normalize(up)));
  return to_mat3_f3(rt,cross(rt,dir),dir);
}


__KERNEL__ void ExitTheMatrixFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);



  // --------



    float2 uv = (fragCoord-iResolution*0.5f)/iResolution.y;
    float t=iTime*7.0f;
    float3 from=path(t);
    float3 adv=path(t+6.0f+_sinf(t*0.1f)*3.0f);
    float3 dir=normalize(to_float3_aw(uv,0.7f));
    dir=mul_mat3_f3(lookat(adv-from,to_float3(0.0f,1.0f,0.0f)),dir);
    float3 col=march(from, dir,t,adv, fragCoord);
    fragColor=to_float4_aw(col,1.0f);


  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "ExitTheMatrixFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


