--[[--/*

  CubicDispersal.fuse

  Based on https://www.shadertoy.com/view/fldXWS a WebGL shader created by Tater.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  ColorAL[4];
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  ColorBKG1[4];
  float  ColorBKG2[4];
  float  Brightness;
  float  mix_ao;
  float  mix_col;
  float  diff1;
  float  diff2;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define cos_f3(i) cos(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define mix_f2(v,i,m) mix(v,i,m)
 #define sign_f(a) sign(a)
 #define sign_f3(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define cos_f3(i) cos(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define mix_f2(v,i,m) mix(v,i,m)
 #define sign_f(a) sign(a)
 #define sign_f3(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define cos_f3(i) to_float3( _cosf((i).x), _cosf((i).y), _cosf((i).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define mix_f2(v,i,m) to_float2(_mix((v).x,(i).x,(m).x),_mix((v).y,(i).y,(m).y))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define sign_f3(a) to_float3((a).x==0.0f?0.0f:(a).x>0.0f?1.0f:-1.0f, (a).y==0.0f?0.0f:(a).y>0.0f?1.0f:-1.0f,(a).z==0.0f?0.0f:(a).z>0.0f?1.0f:-1.0f)
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


//Building on ideas from
//https://www.shadertoy.com/view/fd3SRN
//https://www.shadertoy.com/view/fsySWm
//https://www.shadertoy.com/view/stdGz4
//https://www.shadertoy.com/view/7sKGRy
//https://www.shadertoy.com/view/fsyGD3
//https://www.shadertoy.com/view/fdyGDt
//https://www.shadertoy.com/view/7dVGDd
//https://www.shadertoy.com/view/NsKGDy

//I had some plans to make a more elaborate shape using the "fully animated subdivision"
//but it ended up not looking that interesting when applied to an octree and it's too
//expensive to make shapes out of multiple "sheets" of this.

//I hope you enjoy it none the less :)
//(sorry if it's expensive I didn't do much opmimizing)

#define MDIST 150.0f
#define STEPS 164.0f
#define pi 3.1415926535f
#define pmod(p,x) (mod_f(p,x)+0.5f*(x))
#define rot(a) to_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a))

//this is a useless trick but it's funny
#define vmm(v,minOrMax) minOrMax(v.x,minOrMax(v.y,v.z))

//iq box sdf
__DEVICE__ float ebox( float3 p, float3 b ){
  float3 q = abs_f3(p) - b;
  return length(_fmaxf(q,to_float3_s(0.0f))) + _fminf(  _fmaxf(q.x, _fmaxf(q.y,q.z)) , (0.0f));
}
//iq palette
__DEVICE__ float3 pal( in float t, in float3 a, in float3 b, in float3 c, in float3 d ){
  return a + b*cos_f3(2.0f*pi*(c*t+d));
}
__DEVICE__ float h11 (float a) {
  return fract(_sinf((a)*12.9898f)*43758.5453123f);
}
//https://www.shadertoy.com/view/fdlSDl
__DEVICE__ float2 tanha_f2(float2 x) {
  float2 x2 = x*x;
  return clamp(x*(27.0f + x2)/(27.0f+9.0f*x2), -1.0f, 1.0f);
}
__DEVICE__ float tanha(float x) {
  float x2 = x*x;
  return clamp(x*(27.0f + x2)/(27.0f+9.0f*x2), -1.0f, 1.0f);
}

struct sdResult
{
    float2 center;
    float2 dim;
    float id;
    float vol;
};

__DEVICE__ struct sdResult subdiv(float2 p,float seed,float iTime){
    float2 dMin = to_float2_s(-10.0f);
    float2 dMax = to_float2_s(10.0f);
    float t = iTime*0.6f;
    float t2 = iTime;
    float2 dim = dMax - dMin;
    float id = 0.0f;
    float ITERS = 6.0f;

    float MIN_SIZE = 0.1f;
    float MIN_ITERS = 1.0f;

    //big thanks to @0b5vr for letting me use his cleaner subdiv implementation
    //https://www.shadertoy.com/view/NsKGDy
    float2 diff2 = to_float2_s(1);
    for(float i = 0.0f;i<ITERS;i+=1.0f){
        float2 divHash=tanha_f2(to_float2(_sinf(t2*pi/3.0f+id+i*t2*0.05f),_cosf(t2*pi/3.0f+h11(id)*100.0f+i*t2*0.05f))*3.0f)*0.35f+0.5f;
        //divHash=to_float2(_sinf(t*pi/3.0f+id),_cosf(t*pi/3.0f+h11(id)*100.0f))*0.5f+0.5f;
        //if(iMouse.z>0.5f){divHash = _mix(divHash,M,0.9f);}
        divHash = _mix(to_float2_s(0.5f),divHash,tanha(_sinf(t*0.8f)*5.0f)*0.2f+0.4f);
        float2 divide = divHash * dim + dMin;
        divide = clamp(divide, dMin + MIN_SIZE+0.01f, dMax - MIN_SIZE-0.01f);
        float2 minAxis = _fminf(abs_f2(dMin - divide), abs_f2(dMax - divide));
        float minSize = _fminf( minAxis.x, minAxis.y);
        bool smallEnough = minSize < MIN_SIZE;
        if (smallEnough && i + 1.0f > MIN_ITERS) { break; }
        dMax = mix_f2( dMax, divide, step( p, divide ));
        dMin = mix_f2( divide, dMin, step( p, divide ));
        diff2 =step( p, divide)-
        to_float2(h11(diff2.x+seed)*10.0f,h11(diff2.y+seed)*10.0f);
        id = length(diff2)*100.0f;
        dim = dMax - dMin;
    }
    float2 center = (dMin + dMax)/2.0f;
    struct sdResult result;
    result.center = center;
    result.id = id;
    result.dim = dim;
    result.vol = dim.x*dim.y;
    return result;
}

__DEVICE__ float dibox(float3 p,float3 b,float3 rd){
    float3 dir = sign_f3(rd)*b;
    float3 rc = (dir-p)/rd;
    return _fminf(rc.x,rc.z)+0.01f;
}

__DEVICE__ float3 map(float3 p,float iTime, float3 rdg, bool traverse){
    float seed = sign_f(p.y)-0.3f;
    seed = 1.0f;
    //p.y = _fabs(p.y)-4.0f;

    float2 a = to_float2(99999,1);
    float2 b = to_float2_s(2);

    a.x = p.y-2.0f;
    float id = 0.0f;
    if(a.x<0.1||!traverse){
        float t = iTime;
        struct sdResult sdr = subdiv(swi2(p,x,z),seed,iTime);
        float3 centerOff = to_float3(sdr.center.x,0,sdr.center.y);
        float2 dim = sdr.dim;

        float rnd = 0.05f;
        float size = _fminf(dim.y,dim.x)*1.0f;
        //size = 1.0f;
        size+=(_sinf((centerOff.x+centerOff.z)*0.6f+t*4.5f)*0.5f+0.5f)*2.0f;
        size = _fminf(size,4.0f);
        a.x = ebox(p-centerOff-to_float3(0,0,0),to_float3(dim.x,size,dim.y)*0.5f-rnd)-rnd;
        if(traverse){
            b.x = dibox(p-centerOff,to_float3(dim.x,1,dim.y)*0.5f,rdg);
            a = (a.x<b.x)?a:b;
        }
        id = sdr.id;
    }
    return to_float3_aw(a,id);
}
__DEVICE__ float3 norm(float3 p,float iTime, float3 rdg, bool traverse){
    float2 e = to_float2(0.01f,0.0f);
    return normalize(map(p,iTime,rdg,traverse).x-to_float3(
                     map(p-swi3(e,x,y,y),iTime,rdg,traverse).x,
                     map(p-swi3(e,y,x,y),iTime,rdg,traverse).x,
                     map(p-swi3(e,y,y,x),iTime,rdg,traverse).x));
}

__KERNEL__ void CubicDispersalFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 ColorAL = to_float4(params->ColorAL[0], params->ColorAL[1], params->ColorAL[2], params->ColorAL[3]);
  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float4 ColorBKG1 = to_float4(params->ColorBKG1[0], params->ColorBKG1[1], params->ColorBKG1[2], params->ColorBKG1[3]);
  float4 ColorBKG2 = to_float4(params->ColorBKG2[0], params->ColorBKG2[1], params->ColorBKG2[2], params->ColorBKG2[3]);
  float  Brightness = params->Brightness;
  float  mix_ao = params->mix_ao;
  float  mix_col = params->mix_col;
  float  diff1 = params->diff1;
  float  diff2 = params->diff2;

  // --------





    mat2 unused;

    bool traverse = true;

    float2 R = iResolution;
    float2 uv = (fragCoord-0.5f*swi2(R,x,y))/R.y;
    float3 col = to_float3_s(0);

    float3 ro = to_float3(0,6.0f,-12)*1.2f;

    swi2S(ro,x,z, mul_f2_mat2(swi2(ro,x,z) , rot(0.35f)));
    float3 lk = to_float3(-1,-3,0.5f);
    if(iMouse.z>0.0f){
       ro*=2.0f;
       lk = to_float3_s(0);
       swi2S(ro,y,z, mul_f2_mat2(swi2(ro,y,z),rot(2.0f*(iMouse.y/iResolution.y-0.5f))));
       swi2S(ro,z,x, mul_f2_mat2(swi2(ro,z,x),rot(-9.0f*(iMouse.x/iResolution.x-0.5f))));
    }

    float3 f = (normalize(lk-ro));
    float3 r = normalize(cross(to_float3(0,1,0),f));
    float3 rd = normalize(f*(1.8f)+r*uv.x+uv.y*cross(f,r));
    float3 rdg = rd;
    float3 p = ro;
    float dO = 0.0f;
    float3 d;
    bool hit = false;

    for(float i = 0.0f; i<STEPS; i+=1.0f){
        p = ro+rd*dO;
        d = map(p,iTime,rdg,traverse);
        dO+=d.x;
        if(d.x<0.005f){
            hit = true;
            break;
        }
        if(dO>MDIST)break;
    }

    if(hit&&d.y!=2.0f){
        traverse = false;
        float3 n = norm(p,iTime,rdg,traverse);
        float3 r = reflect(rd,n);
        float3 e = to_float3_s(0.5f);
        //float3 al = pal(fract(d.z)*0.35f-0.8f,e*1.2f,e,e*2.0f,to_float3(0,0.33f,0.66f));
        float3 al = pal(fract(d.z)*0.35f-0.8f,e*1.2f,e,e*2.0f,swi3(ColorAL,x,y,z));
        col = al;
        float3 ld = normalize(to_float3(0,45,0)-p);

        //sss from nusan
        float sss=0.1f;
        float sssteps = 10.0f;
        for(float i=1.0f; i<sssteps; i+=1.0f){
            float dist = i*0.2f;
            sss += smoothstep(0.0f,1.0f,map(p+ld*dist,iTime,rdg,traverse).x/dist)/(sssteps*1.5f);
        }
        sss = clamp(sss,0.0f,1.0f);

        //float diff = _fmaxf(0.0f,dot(n,ld))*0.7f+0.3f;
        float diff = _fmaxf(0.0f,dot(n,ld))*diff1+diff2;
        float amb = dot(n,ld)*0.45f+0.55f;
        float spec = _powf(_fmaxf(0.0f,dot(r,ld)),13.0f);
        //blackle ao
        #define AO(a,n,p) smoothstep(-a,a,map(p+n*a,iTime,rdg,traverse).x)
        float ao = AO(0.1f,n,p)*AO(0.2f,n,p)*AO(0.3f,n,p);

        spec = smoothstep(0.0f,1.0f,spec);
        //col = to_float3(0.204f,0.267f,0.373f)*
        //                _mix(to_float3(0.169f,0.000f,0.169f),to_float3(0.984f,0.996f,0.804f),_mix(amb,diff,0.75f))
        //                +spec*0.3f;
        col = swi3(Color1,x,y,z)*
                   _mix(swi3(Color2,x,y,z),swi3(Color3,x,y,z),_mix(amb,diff,0.75f))
                   +spec*0.3f;


        col+=sss*al;
        col*=_mix(ao,1.0f,mix_ao);//0.65f);
        col = pow_f3(col,to_float3_s(0.85f));
    }
    else{
        //col = _mix(to_float3(0.373f,0.835f,0.988f),to_float3(0.424f,0.059f,0.925f),length(uv));
        col = _mix(swi3(ColorBKG1,x,y,z),swi3(ColorBKG2,x,y,z),length(uv));
    }

    col *=1.0f-0.5f*_powf(length(uv*to_float2(0.8f,1.0f)),2.7f);
    float3 col2 = smoothstep(to_float3(0.0f, 0.0f, 0.0f), to_float3(1.1f, 1.1f, 1.3f), col);
    //col = _mix(col,col2,0.5f)*Brightness;//1.05f;
    col = _mix(col,col2,mix_col)*Brightness;//1.05f;

    fragColor = to_float4_aw(col,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_Integer          = true,
    --INP_Passive = true,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  self:BeginControlNest("ColorAL", "ColorAL", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorAL",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorALColorR = self:AddInput("Red",   "ColorALRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InColorALColorG = self:AddInput("Green", "ColorALGreen", { INP_Default  = 0.33, IC_ControlID = 1, attrs})
    InColorALColorB = self:AddInput("Blue",  "ColorALBlue",  { INP_Default  = 0.66, IC_ControlID = 2, attrs})
    InColorALColorA = self:AddInput("Alpha", "ColorALAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.204, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.267, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.373, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.169, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.000, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.169, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 0.984, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.996, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.804, IC_ControlID = 2, attrs})
    InColor3ColorA = self:AddInput("Alpha", "Color3Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorBKG1", "ColorBKG1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorBKG1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBKG1ColorR = self:AddInput("Red",   "ColorBKG1Red",   { INP_Default  = 0.373, IC_ControlID = 0, attrs})
    InColorBKG1ColorG = self:AddInput("Green", "ColorBKG1Green", { INP_Default  = 0.835, IC_ControlID = 1, attrs})
    InColorBKG1ColorB = self:AddInput("Blue",  "ColorBKG1Blue",  { INP_Default  = 0.988, IC_ControlID = 2, attrs})
    InColorBKG1ColorA = self:AddInput("Alpha", "ColorBKG1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorBKG2", "ColorBKG2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorBKG2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBKG2ColorR = self:AddInput("Red",   "ColorBKG2Red",   { INP_Default  = 0.424, IC_ControlID = 0, attrs})
    InColorBKG2ColorG = self:AddInput("Green", "ColorBKG2Green", { INP_Default  = 0.059, IC_ControlID = 1, attrs})
    InColorBKG2ColorB = self:AddInput("Blue",  "ColorBKG2Blue",  { INP_Default  = 0.925, IC_ControlID = 2, attrs})
    InColorBKG2ColorA = self:AddInput("Alpha", "ColorBKG2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InBrightnessSlider = self:AddInput("Brightness", "Brightness", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 0.0,
      INP_MaxScale       = 2.0,
      INP_Default        = 1.05,
  })

  Inmix_aoSlider = self:AddInput("mix_ao", "mix_ao", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 2.0,
      INP_Default        = 0.65,
  })

  Inmix_colSlider = self:AddInput("mix_col", "mix_col", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 0.0,
      INP_MaxScale       = 1.0,
      INP_Default        = 0.5,
  })

  Indiff1Slider = self:AddInput("diff1", "diff1", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 0.0,
      INP_MaxScale       = 3.0,
      INP_Default        = 0.7,
  })

  Indiff2Slider = self:AddInput("diff2", "diff2", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 0.0,
      INP_MaxScale       = 3.0,
      INP_Default        = 0.3,
  })



  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "CubicDispersalFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.ColorAL = {
    InColorALColorR:GetValue(req).Value,
    InColorALColorG:GetValue(req).Value,
    InColorALColorB:GetValue(req).Value,InColorALColorA:GetValue(req).Value
  }
  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value,InColor3ColorA:GetValue(req).Value
  }
  params.ColorBKG1 = {
    InColorBKG1ColorR:GetValue(req).Value,
    InColorBKG1ColorG:GetValue(req).Value,
    InColorBKG1ColorB:GetValue(req).Value,InColorBKG1ColorA:GetValue(req).Value
  }
  params.ColorBKG2 = {
    InColorBKG2ColorR:GetValue(req).Value,
    InColorBKG2ColorG:GetValue(req).Value,
    InColorBKG2ColorB:GetValue(req).Value,InColorBKG2ColorA:GetValue(req).Value
  }
  params.Brightness = InBrightnessSlider:GetValue(req).Value
  params.mix_ao = Inmix_aoSlider:GetValue(req).Value
  params.mix_col = Inmix_colSlider:GetValue(req).Value
  params.diff1 = Indiff1Slider:GetValue(req).Value
  params.diff2 = Indiff2Slider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


