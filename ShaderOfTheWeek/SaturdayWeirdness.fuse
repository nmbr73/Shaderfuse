--[[--/*

  SaturdayWeirdness.fuse

  Based on https://www.shadertoy.com/view/43jXWt a WebGL shader created by mrange.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   Reset;
  float  SunCol[4];
  float  SunDir[4];
  float  LightCol0[4];
  float  LightPos0[4];
  float  LightCol1[4];
  float  LightPos1[4];
  float  BottomBoxCol[4];
  float  TopBoxCol[4];
  float  TOLERANCE;
  float  MAX_RAY_LENGTH;
  int    MAX_RAY_MARCHES;
  float  NORM_OFF;
  float  ViewXY[2];
  float  ViewZ;
  float  View2XY[2];
  float  View2Z;
  float  Level0;
  float  Level1;
  float  Level2;
  float  Level3;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3( float a, float b, float c, float d, float e, float f, float g, float h, float i)
  {
    return mat3(a,b,c,d,e,f,g,h,i);
  }

  __DEVICE__ inline float3 mul_f3_mat3( float3 A, mat3 B) { return (A*B); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3( float  a, float  b, float c,   float d, float e, float f,   float g, float h, float i)
  {
    mat3 t;
    t.r0.x = a; t.r0.y = b; t.r0.z = c;
    t.r1.x = d; t.r1.y = e; t.r1.z = f;
    t.r2.x = g; t.r2.y = h; t.r2.z = i;
    return t;
  }

__DEVICE__ inline float3 mul_f3_mat3( float3 A, mat3 B) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z;
    C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z;
    C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
    return C;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)

 #define cos_f2(i) cos(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define sqrt_f3(a) _sqrtf(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define cos_f2(i) cos(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define sqrt_f3(a) _sqrtf(a)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define cos_f2(i) to_float2( _cosf((i).x), _cosf((i).y))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define sqrt_f3(a) to_float3(_sqrtf((a).x),_sqrtf((a).y),_sqrtf((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

// CC0: Saturday weirdness
//  I saw a tweet from Kali where I thought I understood how he did something cool.
//  Turns out I didn't understand . Instead ended up with weird stuff.

#define TIME        iTime
#define RESOLUTION  iResolution
#define PI          3.141592654
#define TAU         (2.0f*PI)

#define ROT(a)      to_mat2(_cosf(a), _sinf(a), -_sinf(a), _cosf(a))


// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer A 'Previsualization: Buffer A' to iChannel0


// CC0: Saturday weirdness
//  I saw a tweet from Kali where I thought I understood how he did something cool.
//  Turns out I didn't understand . Instead ended up with weird stuff.

// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488

__DEVICE__ float3 hsv2rgb(float3 c) {
  const float4 hsv2rgb_K = to_float4(1.0f, 2.0f / 3.0f, 1.0f / 3.0f, 3.0f);
  float3 p = abs_f3(fract_f3(swi3(c,x,x,x) + swi3(hsv2rgb_K,x,y,z)) * 6.0f - swi3(hsv2rgb_K,w,w,w));
  return c.z * _mix(swi3(hsv2rgb_K,x,x,x), clamp(p - swi3(hsv2rgb_K,x,x,x), 0.0f, 1.0f), c.y);
}
// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488
//  Macro version of above to enable compile-time constants
#define HSV2RGB(c)  (c.z * _mix(swi3(hsv2rgb_K,x,x,x), clamp(abs_f3(fract_f3(swi3(c,x,x,x) + swi3(hsv2rgb_K,x,y,z)) * 6.0f - swi3(hsv2rgb_K,w,w,w)) - swi3(hsv2rgb_K,x,x,x), 0.0f, 1.0f), c.y))



// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/noacos/
__DEVICE__ mat3 rot(float3 d, float3 z) {
  float3  v = cross( z, d );
  float c = dot( z, d );
  float k = 1.0f/(1.0f+c);

  return to_mat3( v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,
                  v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,
                  v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );
}


// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
__DEVICE__ float3 aces_approx(float3 v) {
  v = _fmaxf(v, to_float3_s(0.0f));
  v *= 0.6f;
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/
__DEVICE__ float rayPlane(float3 ro, float3 rd, float4 p) {
  return -(dot(ro,swi3(p,x,y,z))+p.w)/dot(rd,swi3(p,x,y,z));
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/
__DEVICE__ float box(float2 p, float2 b) {
  float2 d = abs_f2(p)-b;
  return length(_fmaxf(d, to_float2_s(0.0f))) + _fminf(_fmaxf(d.x,d.y),0.0f);
}


//mat3 g_rot;

__DEVICE__ float sphere4(float3 p, float r) {
  p*=p;
  return _powf(dot(p,p), 0.25f) -r;
}

__DEVICE__ float df(float3 p, mat3 g_rot) {
  float3 op = p;
  p = mul_f3_mat3(p, g_rot);
  return sphere4(p, 1.0f);
}

#define BACKSTEP
__DEVICE__ float rayMarch(float3 ro, float3 rd, float tinit, out int *iter, float TOLERANCE, int MAX_RAY_MARCHES, float MAX_RAY_LENGTH, mat3 g_rot) {
  float t = tinit;
  const float tol = TOLERANCE;
#if defined(BACKSTEP)
  float2 dti = to_float2(1e10f,0.0f);
#endif
  int i = 0;
  for (i = 0; i < MAX_RAY_MARCHES; ++i) {
    float d = df(ro + rd*t, g_rot);
#if defined(BACKSTEP)
    if (d<dti.x) { dti=to_float2(d,t); }
#endif
    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {
      break;
    }
    t += d;
  }
#if defined(BACKSTEP)
  if(i==MAX_RAY_MARCHES) { t=dti.y; };
#endif
  *iter = i;
  return t;
}


__DEVICE__ float3 normal(float3 pos, mat3 g_rot, float NORM_OFF) {
  float2  eps = to_float2(NORM_OFF,0.0f);
  float3 nor;
  nor.x = df(pos+swi3(eps,x,y,y), g_rot) - df(pos-swi3(eps,x,y,y), g_rot);
  nor.y = df(pos+swi3(eps,y,x,y), g_rot) - df(pos-swi3(eps,y,x,y), g_rot);
  nor.z = df(pos+swi3(eps,y,y,x), g_rot) - df(pos-swi3(eps,y,y,x), g_rot);
  return normalize(nor);
}

__DEVICE__ float3 render0(float3 ro, float3 rd, float3 lightPos0, float3 lightPos1, float3 bottomBoxCol, float3 topBoxCol, float3 lightCol0, float3 lightCol1, float3 sunCol, float3 sunDir) {
  float3 col = to_float3_s(0.0f);

  float3 ld0 = normalize(lightPos0-ro);
  float3 ld1 = normalize(lightPos1-ro);

  float tp0  = rayPlane(ro, rd, to_float4_aw(to_float3(0.0f, -1.0f, 0.0f), -5.0f));
  float tp1  = rayPlane(ro, rd, to_float4_aw(to_float3(0.0f, -1.0f, 0.0f), 6.0f));

  if (tp0 > 0.0f) {
    col += bottomBoxCol*_expf(-0.5f*(length(swi2((ro + tp0*rd),x,z))));
  }

  if (tp1 > 0.0f) {
    float3 pos  = ro + tp1*rd;
    float2 pp = swi2(pos,x,z);
    float db = box(pp, to_float2(5.0f, 9.0f))-3.0f;

    col += topBoxCol*rd.y*rd.y*smoothstep(0.25f, 0.0f, db);
    col += 0.2f*topBoxCol*_expf(-0.5f*_fmaxf(db, 0.0f));
    col += 0.05f*sqrt_f3(topBoxCol)*_fmaxf(-db, 0.0f);
  }

  col += 1E-2f*lightCol0/(1.002f-dot(ld0, rd));
  col += 2E-2f*lightCol1/(1.005f-dot(ld1, rd));
  col += sunCol/(1.001f-dot(sunDir, rd));
  return col;
}

__DEVICE__ float3 render1(float3 ro, float3 rd, float TOLERANCE, int MAX_RAY_MARCHES, float MAX_RAY_LENGTH, mat3 g_rot, float NORM_OFF,
                          float3 lightPos0, float3 lightPos1, float3 bottomBoxCol, float3 topBoxCol, float3 lightCol0, float3 lightCol1, float3 sunCol, float3 sunDir,
                          float2 iResolution, __TEXTURE2D__ iChannel0) {

  int ii;
  float t = rayMarch(ro, rd, 0.0f, &ii, TOLERANCE, MAX_RAY_MARCHES, MAX_RAY_LENGTH, g_rot);

  float3 col = render0(ro, rd, lightPos0, lightPos1, bottomBoxCol, topBoxCol, lightCol0, lightCol1, sunCol, sunDir);

  if (t < MAX_RAY_LENGTH) {
    float3 p = ro+rd*t;
    float3 n = normal(p, g_rot, NORM_OFF);
    float3 r = reflect(rd, n);
    float3 rcol = render0(p, r, lightPos0, lightPos1, bottomBoxCol, topBoxCol, lightCol0, lightCol1, sunCol, sunDir);
    float fre = 1.0f+dot(rd,n);
    fre *= fre;
    fre = _mix(0.5f, 1.0f, fre);
    float3 ld0 = normalize(lightPos0-p);
    float3 ld1 = normalize(lightPos1-p);

    float dif0 = _powf(_fmaxf(dot(ld0, n), 0.0f), 4.0f)*0.5f;
    float dif1 = _powf(_fmaxf(dot(ld1, n), 0.0f), 4.0f)*0.5f;

    col = to_float3_s(0.0f);
    col += dif0*lightCol0;
    col += dif1*lightCol1;
    col += rcol*fre;
    float2 p2 = swi2(p,x,y)*n.z+swi2(p,x,z)*n.y+swi2(p,z,y)*n.x;
    p2 *= 1.0f-0.3f;
    p2 = mul_f2_mat2(p2, ROT(-20.0f*length(p2)));
    p2.x *= RESOLUTION.y/RESOLUTION.x;
    float2 tp = 0.5f+0.5f*p2;

    float4 pcol = _tex2DVecN(iChannel0,tp.x,tp.y,15);
    col += smoothstep(to_float3(0.2f, 0.25f, 0.5f), to_float3(1.75f, 1.6f, 1.4f), swi3(pcol,x,y,z));
  }

  return col;
}

__KERNEL__ void SaturdayWeirdnessFuse__Buffer_A(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  float4 SunCol = to_float4(params->SunCol[0], params->SunCol[1], params->SunCol[2], params->SunCol[3]);
  float4 SunDir = to_float4(params->SunDir[0], params->SunDir[1], params->SunDir[2], params->SunDir[3]);
  float4 LightCol0 = to_float4(params->LightCol0[0], params->LightCol0[1], params->LightCol0[2], params->LightCol0[3]);
  float4 LightPos0 = to_float4(params->LightPos0[0], params->LightPos0[1], params->LightPos0[2], params->LightPos0[3]);
  float4 LightCol1 = to_float4(params->LightCol1[0], params->LightCol1[1], params->LightCol1[2], params->LightCol1[3]);
  float4 LightPos1 = to_float4(params->LightPos1[0], params->LightPos1[1], params->LightPos1[2], params->LightPos1[3]);
  float4 BottomBoxCol = to_float4(params->BottomBoxCol[0], params->BottomBoxCol[1], params->BottomBoxCol[2], params->BottomBoxCol[3]);
  float4 TopBoxCol = to_float4(params->TopBoxCol[0], params->TopBoxCol[1], params->TopBoxCol[2], params->TopBoxCol[3]);
  float  TOLERANCE = params->TOLERANCE;
  float  MAX_RAY_LENGTH = params->MAX_RAY_LENGTH;
  int    MAX_RAY_MARCHES = params->MAX_RAY_MARCHES;
  float  NORM_OFF = params->NORM_OFF;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float2 View2XY = to_float2(params->View2XY[0], params->View2XY[1]);
  float  View2Z = params->View2Z;
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;

  // --------

  fragCoord+=0.5f;

//#define TOLERANCE           0.0001
//#define MAX_RAY_LENGTH      10.0
//#define MAX_RAY_MARCHES     80
//#define NORM_OFF            0.005

const float4 hsv2rgb_K = to_float4(1.0f+Level0, 2.0f / 3.0f+Level1, 1.0f / 3.0f+Level2, 3.0f+Level3);

const float3 sunCol    = HSV2RGB(  swi3(SunCol,x,y,z));//to_float3(0.6f, 0.95f, 0.01));
const float3 sunDir    = normalize(swi3(SunDir,x,y,z));//to_float3(0.0f, 0.0f,  1.0f));

const float3 lightCol0 = HSV2RGB(swi3(LightCol0,x,y,z));//to_float3(0.7f, 0.85f, 1.0f));
const float3 lightPos0 = 4.0f*   swi3(LightPos0,x,y,z);//to_float3(1.0f, 1.0f, -2.0f);

const float3 lightCol1 = HSV2RGB(swi3(LightCol1,x,y,z));//to_float3(0.8f,  0.75f,  1.0f));
const float3 lightPos1 = 2.0f*   swi3(LightPos1,x,y,z);//to_float3(-1.0f, -1.0f, -2.0f);


const float3 bottomBoxCol = HSV2RGB(swi3(BottomBoxCol,x,y,z));//to_float3(0.7f,  0.80f, 0.5f));
const float3 topBoxCol    = HSV2RGB(swi3(TopBoxCol   ,x,y,z));//to_float3(0.57f, 0.90f, 1.0f));


  float2 mo = swi2(iMouse,x,y)/iResolution*10.0f;

  float2 q = fragCoord/RESOLUTION;
  float2 p = -1.0f + 2.0f * q;
  p.x *= RESOLUTION.x/RESOLUTION.y;

  float a = TIME*0.25f ;
  float3 r0 = to_float3(1.0f+mo.y, _sinf(_sqrtf(0.5f)*a)+ mo.x, _sinf(1.0f*a)+ mo.x);
  float3 r1 = to_float3_aw(cos_f2(to_float2(_sqrtf(0.5f+Level2), 1.0f)*a)+ mo.x, 1.0f+mo.y);
  mat3 g_rot = rot(normalize(r0), normalize(r1));

  const float3 up = to_float3(0.0f, 1.0f, 0.0f) + to_float3_aw(View2XY, View2Z);
  float3 ro   = to_float3(0.0f, 0.5f, -3.0f) + to_float3_aw(ViewXY, ViewZ);;
  float3 la   = to_float3_s(0.0f);

  float3 ww = normalize(la-ro);
  float3 uu = normalize(cross(up, ww));
  float3 vv = cross(ww, uu);
  float3 rd = normalize(p.x*uu + p.y*vv + 2.0f*ww);

  float3 col = to_float3_s(0.0f);
  col = render1(ro, rd, TOLERANCE, MAX_RAY_MARCHES, MAX_RAY_LENGTH, g_rot, NORM_OFF, lightPos0, lightPos1, bottomBoxCol, topBoxCol, lightCol0, lightCol1, sunCol, sunDir, iResolution, iChannel0);
  col -= 4E-2f*swi3(to_float3(1.0f,2.0f,3.0f),z,y,x)*(length(p)+0.25f);
  col = aces_approx(col);
  col = sqrt_f3(col);

  fragColor = to_float4_aw(col, 1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0


// CC0: Saturday weirdness
//  I saw a tweet from Kali where I thought I understood how he did something cool.
//  Turns out I didn't understand . Instead ended up with weird stuff.

#define FXAA

// License: Unknowon, author: XorDev, found: https://github.com/XorDev/GM_FXAA
__DEVICE__ float4 fxaa(__TEXTURE2D__ tex, float2 uv, float2 texelSz) {
  // See this blog
  // https://mini.gmshaders.com/p/gm-shaders-mini-fxaa

  // Maximum texel span
  const float span_max    = 8.0f;
  // These are more technnical and probably don't need changing:
  // Minimum "dir" reciprocal
  const float reduce_min  = (1.0f/128.0f);
  // Luma multiplier for "dir" reciprocal
  const float reduce_mul  = (1.0f/32.0f);

  const float3  luma        = to_float3(0.299f, 0.587f, 0.114f);

  // Sample center and 4 corners
  float3 rgbCC = swi3(_tex2DVecN(tex,uv.x,uv.y,15),x,y,z);
  float3 rgb00 = swi3(texture(tex, uv+to_float2(-0.5f,-0.5f)*texelSz),x,y,z);
  float3 rgb10 = swi3(texture(tex, uv+to_float2(+0.5f,-0.5f)*texelSz),x,y,z);
  float3 rgb01 = swi3(texture(tex, uv+to_float2(-0.5f,+0.5f)*texelSz),x,y,z);
  float3 rgb11 = swi3(texture(tex, uv+to_float2(+0.5f,+0.5f)*texelSz),x,y,z);

  //Get luma from the 5 samples
  float lumaCC = dot(rgbCC, luma);
  float luma00 = dot(rgb00, luma);
  float luma10 = dot(rgb10, luma);
  float luma01 = dot(rgb01, luma);
  float luma11 = dot(rgb11, luma);

  // Compute gradient from luma values
  float2 dir = to_float2((luma01 + luma11) - (luma00 + luma10), (luma00 + luma01) - (luma10 + luma11));

  // Diminish dir length based on total luma
  float dirReduce = _fmaxf((luma00 + luma10 + luma01 + luma11) * reduce_mul, reduce_min);

  // Divide dir by the distance to nearest edge plus dirReduce
  float rcpDir = 1.0f / (_fminf(_fabs(dir.x), _fabs(dir.y)) + dirReduce);

  // Multiply by reciprocal and limit to pixel span
  dir = clamp(dir * rcpDir, -span_max, span_max) * swi2(texelSz,x,y);

  // Average middle texels along dir line
  float4 A = 0.5f * (
      texture(tex, uv - dir * (1.0f/6.0f))
    + texture(tex, uv + dir * (1.0f/6.0f))
    );

  // Average with outer texels along dir line
  float4 B = A * 0.5f + 0.25f * (
      texture(tex, uv - dir * (0.5f))
    + texture(tex, uv + dir * (0.5f))
    );


  // Get lowest and highest luma values
  float lumaMin = _fminf(lumaCC, _fminf(min(luma00, luma10), _fminf(luma01, luma11)));
  float lumaMax = _fmaxf(lumaCC, _fmaxf(max(luma00, luma10), _fmaxf(luma01, luma11)));

  // Get average luma
  float lumaB = dot(swi3(B,x,y,z), luma);

  //If the average is outside the luma range, using the middle average
  return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? A : B;
}

__KERNEL__ void SaturdayWeirdnessFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  float4 SunCol = to_float4(params->SunCol[0], params->SunCol[1], params->SunCol[2], params->SunCol[3]);
  float4 SunDir = to_float4(params->SunDir[0], params->SunDir[1], params->SunDir[2], params->SunDir[3]);
  float4 LightCol0 = to_float4(params->LightCol0[0], params->LightCol0[1], params->LightCol0[2], params->LightCol0[3]);
  float4 LightPos0 = to_float4(params->LightPos0[0], params->LightPos0[1], params->LightPos0[2], params->LightPos0[3]);
  float4 LightCol1 = to_float4(params->LightCol1[0], params->LightCol1[1], params->LightCol1[2], params->LightCol1[3]);
  float4 LightPos1 = to_float4(params->LightPos1[0], params->LightPos1[1], params->LightPos1[2], params->LightPos1[3]);
  float4 BottomBoxCol = to_float4(params->BottomBoxCol[0], params->BottomBoxCol[1], params->BottomBoxCol[2], params->BottomBoxCol[3]);
  float4 TopBoxCol = to_float4(params->TopBoxCol[0], params->TopBoxCol[1], params->TopBoxCol[2], params->TopBoxCol[3]);
  float  TOLERANCE = params->TOLERANCE;
  float  MAX_RAY_LENGTH = params->MAX_RAY_LENGTH;
  int    MAX_RAY_MARCHES = params->MAX_RAY_MARCHES;
  float  NORM_OFF = params->NORM_OFF;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float2 View2XY = to_float2(params->View2XY[0], params->View2XY[1]);
  float  View2Z = params->View2Z;
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;

  // --------
  mat2 dummy1;
  mat3 dummy2;

  float2 isz = 1.0f/RESOLUTION;
  float2 q = fragCoord*isz;
#ifdef FXAA
  fragColor = fxaa(iChannel0, q, _sqrtf(2.0f)*isz);
#else
  fragColor = _tex2DVecN(iChannel0,q.x,q.y,15);
#endif


  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InResetCheckbox = self:AddInput("Reset", "Reset", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("SunCol", "SunCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "SunCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InSunColColorR = self:AddInput("Red",   "SunColRed",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InSunColColorG = self:AddInput("Green", "SunColGreen", { INP_Default  = 0.95, IC_ControlID = 1, attrs})
    InSunColColorB = self:AddInput("Blue",  "SunColBlue",  { INP_Default  = 0.01, IC_ControlID = 2, attrs})
    InSunColColorA = self:AddInput("Alpha", "SunColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("SunDir", "SunDir", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "SunDir",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InSunDirColorR = self:AddInput("Red",   "SunDirRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InSunDirColorG = self:AddInput("Green", "SunDirGreen", { INP_Default  = 0.0, IC_ControlID = 1, attrs})
    InSunDirColorB = self:AddInput("Blue",  "SunDirBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InSunDirColorA = self:AddInput("Alpha", "SunDirAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("LightCol0", "LightCol0", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "LightCol0",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InLightCol0ColorR = self:AddInput("Red",   "LightCol0Red",   { INP_Default  = 0.7, IC_ControlID = 0, attrs})
    InLightCol0ColorG = self:AddInput("Green", "LightCol0Green", { INP_Default  = 0.85, IC_ControlID = 1, attrs})
    InLightCol0ColorB = self:AddInput("Blue",  "LightCol0Blue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InLightCol0ColorA = self:AddInput("Alpha", "LightCol0Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("LightPos0", "LightPos0", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "LightPos0",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InLightPos0ColorR = self:AddInput("Red",   "LightPos0Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InLightPos0ColorG = self:AddInput("Green", "LightPos0Green", { INP_Default  = 1.0, IC_ControlID = 1, attrs})
    InLightPos0ColorB = self:AddInput("Blue",  "LightPos0Blue",  { INP_Default  = -2.0, IC_ControlID = 2, attrs})
    InLightPos0ColorA = self:AddInput("Alpha", "LightPos0Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("LightCol1", "LightCol1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "LightCol1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InLightCol1ColorR = self:AddInput("Red",   "LightCol1Red",   { INP_Default  = 0.8, IC_ControlID = 0, attrs})
    InLightCol1ColorG = self:AddInput("Green", "LightCol1Green", { INP_Default  = 0.75, IC_ControlID = 1, attrs})
    InLightCol1ColorB = self:AddInput("Blue",  "LightCol1Blue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InLightCol1ColorA = self:AddInput("Alpha", "LightCol1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("LightPos1", "LightPos1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "LightPos1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InLightPos1ColorR = self:AddInput("Red",   "LightPos1Red",   { INP_Default  = -1.0, IC_ControlID = 0, attrs})
    InLightPos1ColorG = self:AddInput("Green", "LightPos1Green", { INP_Default  = -1.0, IC_ControlID = 1, attrs})
    InLightPos1ColorB = self:AddInput("Blue",  "LightPos1Blue",  { INP_Default  = -2.0, IC_ControlID = 2, attrs})
    InLightPos1ColorA = self:AddInput("Alpha", "LightPos1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("BottomBoxCol", "BottomBoxCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "BottomBoxCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InBottomBoxColColorR = self:AddInput("Red",   "BottomBoxColRed",   { INP_Default  = 0.7, IC_ControlID = 0, attrs})
    InBottomBoxColColorG = self:AddInput("Green", "BottomBoxColGreen", { INP_Default  = 0.80, IC_ControlID = 1, attrs})
    InBottomBoxColColorB = self:AddInput("Blue",  "BottomBoxColBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InBottomBoxColColorA = self:AddInput("Alpha", "BottomBoxColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("TopBoxCol", "TopBoxCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "TopBoxCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InTopBoxColColorR = self:AddInput("Red",   "TopBoxColRed",   { INP_Default  = 0.57, IC_ControlID = 0, attrs})
    InTopBoxColColorG = self:AddInput("Green", "TopBoxColGreen", { INP_Default  = 0.90, IC_ControlID = 1, attrs})
    InTopBoxColColorB = self:AddInput("Blue",  "TopBoxColBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InTopBoxColColorA = self:AddInput("Alpha", "TopBoxColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
self:EndControlNest()


  InTOLERANCESlider = self:AddInput("TOLERANCE", "TOLERANCE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.0001,
      })

  InMAX_RAY_LENGTHSlider = self:AddInput("MAX_RAY_LENGTH", "MAX_RAY_LENGTH", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 30.0,
          INP_Default        = 10.0,
      })

  InMAX_RAY_MARCHESSlider = self:AddInput("MAX_RAY_MARCHES", "MAX_RAY_MARCHES", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 1,
      INP_MaxScale       = 200,
      INP_Default        = 80,
      INP_Integer        = true,
  })

  InNORM_OFFSlider = self:AddInput("NORM_OFF", "NORM_OFF", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.005,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InView2XYPoint = self:AddInput("View2XY", "View2XY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InView2ZSlider = self:AddInput("View2Z", "View2Z", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InLevel0Slider = self:AddInput("Level0", "Level0", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InLevel1Slider = self:AddInput("Level1", "Level1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InLevel2Slider = self:AddInput("Level2", "Level2", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InLevel3Slider = self:AddInput("Level3", "Level3", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, LINK_Visible = false,  INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "SaturdayWeirdnessFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "SaturdayWeirdnessFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.Reset = InResetCheckbox:GetValue(req).Value
  params.SunCol = {
    InSunColColorR:GetValue(req).Value,
    InSunColColorG:GetValue(req).Value,
    InSunColColorB:GetValue(req).Value,InSunColColorA:GetValue(req).Value
  }
  params.SunDir = {
    InSunDirColorR:GetValue(req).Value,
    InSunDirColorG:GetValue(req).Value,
    InSunDirColorB:GetValue(req).Value,InSunDirColorA:GetValue(req).Value
  }
  params.LightCol0 = {
    InLightCol0ColorR:GetValue(req).Value,
    InLightCol0ColorG:GetValue(req).Value,
    InLightCol0ColorB:GetValue(req).Value,InLightCol0ColorA:GetValue(req).Value
  }
  params.LightPos0 = {
    InLightPos0ColorR:GetValue(req).Value,
    InLightPos0ColorG:GetValue(req).Value,
    InLightPos0ColorB:GetValue(req).Value,InLightPos0ColorA:GetValue(req).Value
  }
  params.LightCol1 = {
    InLightCol1ColorR:GetValue(req).Value,
    InLightCol1ColorG:GetValue(req).Value,
    InLightCol1ColorB:GetValue(req).Value,InLightCol1ColorA:GetValue(req).Value
  }
  params.LightPos1 = {
    InLightPos1ColorR:GetValue(req).Value,
    InLightPos1ColorG:GetValue(req).Value,
    InLightPos1ColorB:GetValue(req).Value,InLightPos1ColorA:GetValue(req).Value
  }
  params.BottomBoxCol = {
    InBottomBoxColColorR:GetValue(req).Value,
    InBottomBoxColColorG:GetValue(req).Value,
    InBottomBoxColColorB:GetValue(req).Value,InBottomBoxColColorA:GetValue(req).Value
  }
  params.TopBoxCol = {
    InTopBoxColColorR:GetValue(req).Value,
    InTopBoxColColorG:GetValue(req).Value,
    InTopBoxColColorB:GetValue(req).Value,InTopBoxColColorA:GetValue(req).Value
  }
  params.TOLERANCE = InTOLERANCESlider:GetValue(req).Value
  params.MAX_RAY_LENGTH = InMAX_RAY_LENGTHSlider:GetValue(req).Value
  params.MAX_RAY_MARCHES = InMAX_RAY_MARCHESSlider:GetValue(req).Value
  params.NORM_OFF = InNORM_OFFSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.View2XY = {InView2XYPoint:GetValue(req).X,InView2XYPoint:GetValue(req).Y}
  params.View2Z = InView2ZSlider:GetValue(req).Value
  params.Level0 = InLevel0Slider:GetValue(req).Value
  params.Level1 = InLevel1Slider:GetValue(req).Value
  params.Level2 = InLevel2Slider:GetValue(req).Value
  params.Level3 = InLevel3Slider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution

  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddInput("iChannel0",Image_Buff_GlobalA)  -- Anpassen !!
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

      -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "SaturdayWeirdnessFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end

-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end

-- */
