--[[--/*

  WhackAMolePistons.fuse

  Based on https://www.shadertoy.com/view/WtXcWB a WebGL shader created by blackle.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  iTimeDelta;
  int    iFrame;
  float  Color1[4];
  float  Fog;
  float  Sharpness;
  int    AA_SAMPLES;
  bool   MOTION_BLUR;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d
    #define swi3S(a,b,c,d,e) a.b##c##d = e

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}
    #define swi3S(a,b,c,d,e) {float3 tmp = e; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z;}
    #define swi4S(a,b,c,d,e,f) {float4 tmp = f; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z; (a).e = tmp.w;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)

 #define mod_f3(value,divisor) fmod(value,divisor)

 #define sin_f2(i) sin(i)
 #define sin_f3(i) sin(i)
 #define cos_f2(i) cos(i)
 #define abs_f3(a) _fabs(a)
 #define sqrt_f3(a) _sqrtf(a)
 #define sign_f(a) sign(a)
 #define sign_f3(a) sign(a)
 #define distance_f3(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f3(value,divisor) _fmod(value,divisor)
 #define sin_f2(i) sin(i)
 #define sin_f3(i) sin(i)
 #define cos_f2(i) cos(i)
 #define abs_f3(a) fabs(a)
 #define sqrt_f3(a) _sqrtf(a)
 #define sign_f(a) sign(a)
 #define sign_f3(a) sign(a)
 #define distance_f3( p1, p2) distance(p1, p2)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define mod_f3(value,divisor) to_float3(_fmod((value).x, (divisor)),_fmod((value).y, (divisor)),_fmod((value).z, (divisor)))
 #define sin_f2(i) to_float2( _sinf((i).x), _sinf((i).y))
 #define sin_f3(i) to_float3( _sinf((i).x), _sinf((i).y), _sinf((i).z))
 #define cos_f2(i) to_float2( _cosf((i).x), _cosf((i).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define sqrt_f3(a) to_float3(_sqrtf((a).x),_sqrtf((a).y),_sqrtf((a).z))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define sign_f3(a) to_float3((a).x==0.0f?0.0f:(a).x>0.0f?1.0f:-1.0f, (a).y==0.0f?0.0f:(a).y>0.0f?1.0f:-1.0f,(a).z==0.0f?0.0f:(a).z>0.0f?1.0f:-1.0f)
 #define distance_f3(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

  #endif

#endif

__DEVICE__ float4 decube_f3(__TEXTURE2D__ t, float3 xyz)
{
  float ax=_fabs(xyz.x);
  float ay=_fabs(xyz.y);
  float az=_fabs(xyz.z);

  if (xyz.x>0.0f && ax>=ay && ax>=az) // +X, Face 0, right
    return _tex2DVecN(t,(-xyz.z/ax+1.0f)/8.0f + 0.5f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y>0.0f && ay>=ax && ay>=az) // +Y, Face 2, top
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(-xyz.z/ay+1.0f)/6.0f + (2.0f/3.0f),15);

  if (xyz.z>0.0f && az>=ax && az>=ay) // +Z, Face 4, front
    return _tex2DVecN(t,(xyz.x/az+1.0f)/8.0f + 0.25f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.x<0.0f && ax>=ay && ax>=az) // -X, Face 1, left
    return _tex2DVecN(t,(xyz.z/ax+1.0f)/8.0f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y<0.0f && ay>=ax && ay>=az) // -Y, Face 3, bottom
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(xyz.z/ay+1.0f)/6.0f,15);

  if (xyz.z<0.0f && az>=ax && az>=ay) // -Z, Face 5, back
    return _tex2DVecN(t,(-xyz.x/az+1.0f)/8.0f + 0.75f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  return to_float4(1.0f,0.0f,0.0f,1.0f); // error
}


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Texture: Bayer' to iChannel1
// Connect Image 'Texture: Noise' to iChannel0
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

//CC0 1.0f Universal https://creativecommons.org/publicdomain/zero/1.0f/
//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.

//uncomment for slow but pretty version
//#define PRETTY
#ifdef PRETTY
//#define AA_SAMPLES 8
//#define MOTION_BLUR
#else
//#define AA_SAMPLES 1
#endif

//the following functions assume that p is inside the cube of radius 1 centered at the origin
//closest vertex of the cube to p
__DEVICE__ float3 vertex(float3 p) {
    return step(to_float3_s(0.0f),p)*2.0f-1.0f;
}
//closest face of the cube to p
__DEVICE__ float3 face(float3 p) {

    float3 ap = abs_f3(p);
    if (ap.x>=_fmaxf(ap.z,ap.y)) return to_float3(sign_f(p.x),0.0f,0.0f);
    if (ap.y>=_fmaxf(ap.z,ap.x)) return to_float3(0.0f,sign_f(p.y),0.0f);
    if (ap.z>=_fmaxf(ap.x,ap.y)) return to_float3(0.0f,0.0f,sign_f(p.z));
    return to_float3_s(0);
}
//closest edge of the cube to p
__DEVICE__ float3 edge(float3 p) {
    float3 mask = to_float3_s(1)-abs_f3(face(p));
    float3 v = vertex(p);
    float3 a = v*swi3(mask,z,x,y), b = v*swi3(mask,y,z,x);
    return distance_f3(p,a)<distance_f3(p,b)?a:b;
}

__DEVICE__ float super(float2 p) {
    return _sqrtf(length(p*p));
}

__DEVICE__ float corner(float2 p, float h) {
    float2 q = p - to_float2(0,h);
    return super(_fmaxf(q,to_float2_s(0.0f))) + _fminf(0.0f,_fmaxf(q.x,q.y));
}

//returns rhombic dodecahedron tessalation data for p
//x: distance to circle of radius 0.6f in current cell
//y: distance to circle of radius 0.6f in closest adjacent cell
//zw: ID of cell
__DEVICE__ float4 grid(float3 p) {
    float3 id = _floor(p)+0.5f;
    float3 m = sign_f3(mod_f3(id,2.0f)-1.0f);
    if (m.x*m.y*m.z<0.0f) id += face(p-id);
    p -= id;
    float d1 = length(p)-0.6f;
    p -= edge(p);
    float d2 = length(p)-0.6f;
    return to_float4(d1,d2,id.x,id.y); // !!
}

union Zahl
 {
   float  _Float; //32bit float
   int    _Int;   //32bit sigend integer
 };


#define FBI floatBitsToInt
__DEVICE__ float hash(float a, float b) {
    union Zahl z1, z2;

    z1._Float = _cosf(a), z2._Float = a;
    //int x = FBI(_cosf(a))^FBI(a);
    int x = z1._Int ^ z2._Int;

    z1._Float = _cosf(b), z2._Float = b;
    //int y = FBI(_cosf(b))^FBI(b);
    int y = z1._Int ^ z2._Int;

    return (float)((x*x+y)*(y*y-x)+x)/2.14e9;
}

//springy impulse
__DEVICE__ float spring(float x) {
    return smoothstep(-0.4f,0.4f,x) + smoothstep(-0.3f,0.3f,x) - smoothstep(-0.7f,0.7f,x);
}

__DEVICE__ float smin(float a, float b, float k) {
    float h = _fmaxf(0.0f,k-_fabs(b-a))/k;
    return _fminf(a,b) - h*h*h*k/6.0f;
}

__DEVICE__ float3 sminf3(float3 a, float3 b, float k) {
    float3 h = _fmaxf(to_float3_s(0),k-abs_f3(b-a))/k;
    return _fminf(a,b) - h*h*h*k/6.0f;
}

__DEVICE__ float3 erot(float3 p, float3 ax, float ro) {
    return _mix(dot(p,ax)*ax,p,_cosf(ro))+_sinf(ro)*cross(ax,p);
}

__DEVICE__ float scene(float3 p, out float2 *gid, out float *gt, out float3 *glocal, out float *gnd, float mtime) {
    //ds1 chooses z coordinate in 2d slicing of the rhombic dodecahedron tessalation
    //by varying it over space, we get different sized circles
    float ds1 = dot(cos_f2(swi2(p,x,y)/5.0f), sin_f2(swi2(p,x,y)/4.0f))*0.06f;
    float3 p3 = to_float3_aw(swi2(p,x,y), ds1);
    float4 g = grid(p3);
    *gid = swi2(g,z,w);

    float s1 = hash((*gid).x,(*gid).y);
    float s2 = hash(s1,s1);
    *gt = _sinf(s1*100.0f+mtime*_mix(1.0f,2.0f,s2*0.5f+0.5f))-0.4f;
    float h = spring(*gt)*2.0f-0.5f;

    float2 crd = to_float2(g.x,p.z);
    float2 crd2 = to_float2(g.y,p.z);
    float maxheight = 1.7f;

    *gnd = corner(crd*to_float2(-1,1)+to_float2(0.08f,0.0f),0.0f)-0.04f; //ground holes

    //transform things into local coordinates for piston
    crd.y -= h;
    *glocal = p - to_float3_aw(*gid,h);
    *glocal = erot(*glocal,to_float3(0,0,1),s1*100.0f+ *gt*2.0f);
    float curr = corner(crd, 0.0f); //distance to current piston

    //little holes on side of piston
    float3 lp = *glocal;
    lp.z = asin(_sinf(lp.z*5.0f+0.5f))/5.0f;
    curr = -smin(-curr, length(swi2(lp,y,z))-0.05f,0.03f);

    float adjacent = corner(crd2, maxheight); //distance to adjacent piston (assumes maximally extended)
    return _fminf(*gnd,_fminf(curr, adjacent)-0.02f);
}

__DEVICE__ inline mat3 mat3_sub_mat3( mat3 A, mat3 B) {
  mat3 C;

  C.r0 = to_float3(A.r0.x - B.r0.x, A.r0.y - B.r0.y,A.r0.z - B.r0.z);
  C.r1 = to_float3(A.r1.x - B.r1.x, A.r1.y - B.r1.y,A.r1.z - B.r1.z);
  C.r2 = to_float3(A.r2.x - B.r2.x, A.r2.y - B.r2.y,A.r2.z - B.r2.z);

  return C;
}

__DEVICE__ inline mat3 to_mat3_n( float A)
{
  mat3 D;
  D.r0 = to_float3(A,0.0f,0.0f);
  D.r1 = to_float3(0.0f,A,0.0f);
  D.r2 = to_float3(0.0f,0.0f,A);
  return D;
}

__DEVICE__ float3 norm(float3 p, out float2 *gid, out float *gt, out float3 *glocal, out float *gnd, float mtime) {
    mat3 k = mat3_sub_mat3(to_mat3_f3(p,p,p),to_mat3_n(0.01f));

    return normalize(scene(p,gid,gt,glocal,gnd,mtime) - to_float3(scene(k.r0,gid,gt,glocal,gnd,mtime),scene(k.r1,gid,gt,glocal,gnd,mtime),scene(k.r2,gid,gt,glocal,gnd,mtime)));
}

__DEVICE__ float3 skylight(float3 p) {
    float d = dot(p,normalize(to_float3_s(1)));
    return to_float3_s(1)*d*0.2f+0.2f + _powf(_fmaxf(0.0f,d),10.0f)*1.5f;
}

__DEVICE__ float smpl(float3 p, float3 dir, float dist, out float2 *gid, out float *gt, out float3 *glocal, out float *gnd, float mtime) {
    return smoothstep(-dist,dist,scene(p+dir*dist,gid,gt,glocal,gnd,mtime));
}

__DEVICE__ float3 pixel_color(float2 uv, float time, out float *mtime, out float2 *gid, out float *gt, out float3 *glocal, out float *gnd, float2 iResolution, float4 iMouse, __TEXTURE2D__ iChannel0, float3 Color1, float Fog, float Sharpness)
{
    float2 mouse = (swi2(iMouse,x,y)-0.5f*iResolution)/iResolution.y;
    *mtime = time;
    float3 cam = normalize(to_float3(1.5f,uv.x, uv.y));
    float3 init = to_float3(-7,0,0);

    float yrot = 0.7f+_sinf(time*0.3f)*0.2f;
    float zrot = time*0.2f;
    if (iMouse.z > 0.0f) {
        yrot = clamp(1.0f-4.0f*mouse.y,-0.0f,3.14f/2.0f);
        zrot = 4.0f*mouse.x;
    }

    cam = erot(cam,to_float3(0,1,0),yrot);
    init = erot(init,to_float3(0,1,0),yrot);
    cam = erot(cam,to_float3(0,0,1),zrot);
    init = erot(init,to_float3(0,0,1),zrot);

    swi2S(init,x,y, swi2(init,x,y) + time*to_float2(0.5f,_sqrtf(2.0f)));
    init.z += 2.0f;
    float3 p =init;
    bool hit = false;
    float dist; int i;
    for (i = 0; i < 200 && !hit; i++) {
        dist = scene(p,gid,gt,glocal,gnd,*mtime);
        hit = dist*dist < 1e-6;
        p += dist*cam;
        if(distance_f3(p,init)>50.0f)break;
    }
    //save globals locally
    bool g = *gnd == dist;
    float2 id = *gid;
    float s1 = hash((*gid).y,(*gid).x);
    float s2 = hash(s1,(*gid).x);
    float3 _local = g ? p : *glocal+to_float3_aw(id,0);

    float fog = _fminf(1.0f,smoothstep(5.0f,50.0f,distance_f3(p,init))+smoothstep(100.0f,200.0f,(float)(i))) * Fog;
    float3 n = norm(p,gid,gt,glocal,gnd,*mtime);
    float3 r = reflect(cam,n);
    float ao = smpl(p,n,0.1f,gid,gt,glocal,gnd,*mtime);

    //brushed metal tops. not sure if this is the right way, but it works!
    if (!g && n.z>0.9f) {
        float ang = _atan2f(p.x-id.x,p.y-id.y);
        float ang2 = _atan2f(_local.x-id.x,_local.y-id.y);
        _local = to_float3(ang2/2.0f,length(swi2(p,x,y)-id)*40.0f,_local.z+id.x*0.9f+id.y*0.4f);
        n = normalize(to_float3(_cosf(ang*2.0f),_sinf(ang*2.0f),1));
    }

    //rough texture
    float sharpness = decube_f3(iChannel0,_local/2.0f).x;
    sharpness  = _sqrtf(decube_f3(iChannel0,_local*to_float3(1,4,0.5f)+sharpness*0.1f).x);
    sharpness *= _powf(decube_f3(iChannel0,_local/10.0f+sharpness*0.1f).x, 2.0f);
    sharpness = sharpness*0.5f*Sharpness+0.9f;

    //fake reflection occlusion
    float ro = _sqrtf(smpl(p,r,0.9f,gid,gt,glocal,gnd,*mtime)*smpl(p,r,0.5f,gid,gt,glocal,gnd,*mtime)*smpl(p,r,0.2f,gid,gt,glocal,gnd,*mtime));

    float spec = length(sin_f3(r*3.0f*sharpness)*0.4f+0.6f)/_sqrtf(3.0f) * smoothstep(-1.0f,-0.0f,p.z);
    float fres = 1.0f-_fabs(dot(cam,n))*0.5f;
    //float3 mcol = abs_f3(erot(to_float3(0.4f,0.6f,0.9f), normalize(to_float3(0,s2,2)), s1*0.6f));
    float3 mcol = abs_f3(erot(Color1, normalize(to_float3(0,s2,2)), s1*0.6f));
    if (g) mcol = to_float3_s(0.1f);

    float3 col = (mcol*spec + _powf(spec,10.0f*sharpness))*ro*ao*fres*1.5f;
    float3 bgcol = skylight(cam);
    float3 fragColor = hit ? _mix(col,bgcol,fog) : bgcol;
    return fragColor;
}

__DEVICE__ float2 weyl_2d(int n) {
    return fract_f2(to_float2(n*12664745, n*9560333)/_exp2f(24.0f));
}

__DEVICE__ float bayer(int2 uv, float2 iResolution, __TEXTURE2D__ iChannel1) {
    return texture(iChannel1, (make_float2(uv.x % 8,uv.y % 8)+0.5f)/iResolution).x;
}

__KERNEL__ void WhackAMolePistonsFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float  iTimeDelta  = params->iTimeDelta;
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float  Fog = params->Fog;
  float  Sharpness = params->Sharpness;
  int    AA_SAMPLES = params->AA_SAMPLES;
  bool   MOTION_BLUR = params->MOTION_BLUR;

  // --------

    mat3 dummy;

    //mtime set by "pixel_color" to influence the time used by the scene
    float mtime;
    //lots of globals set by "scene"
    float2 gid;
    float3 glocal;
    float gnd;
    float gt;

    float2 uv = (fragCoord-0.5f*iResolution)/iResolution.y;
    fragColor = to_float4_s(0);
    float b = bayer(to_int2_cfloat(fragCoord), iResolution, iChannel1);
    for (int i = 0; i < AA_SAMPLES+(int)(min(0,iFrame)); i++) {
        float2 uv2 = uv + weyl_2d(i)/iResolution.y*1.25f;

        float blur = 0.0f;
        if (MOTION_BLUR)
        //using yx's bayer motion blur idea https://www.shadertoy.com/view/wsfcWX
            blur = (((float)(i)+b)/(float)(AA_SAMPLES)-0.5f) * iTimeDelta;

        fragColor += to_float4_aw(pixel_color(uv2, iTime+blur, &mtime, &gid, &gt, &glocal, &gnd, iResolution, iMouse, iChannel0, swi3(Color1,x,y,z), Fog, Sharpness), 1.0f);
    }
    swi3S(fragColor,x,y,z, sqrt_f3(swi3(fragColor,x,y,z)/fragColor.w));

    swi3S(fragColor,x,y,z, sminf3(swi3(fragColor,x,y,z),to_float3_s(1),0.1f));

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.4, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.9, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InFogSlider = self:AddInput("Fog", "Fog", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 1.0,
      })

  InSharpnessSlider = self:AddInput("Sharpness", "Sharpness", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InAA_SAMPLESSlider = self:AddInput("AA_SAMPLES", "AA_SAMPLES", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 1,
      INP_MaxScale       = 8,
      INP_Default        = 1,
      INP_Integer        = true,
  })

  InMOTION_BLURCheckbox = self:AddInput("MOTION_BLUR", "MOTION_BLUR", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })



  Sep3 = self:AddInput(string.rep("_", 52), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
	IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    { CCS_AddString = "BufferB", },
    { CCS_AddString = "BufferC", },
    { CCS_AddString = "BufferD", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
      { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
      { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
      CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	{ CCS_AddString  = "int8", },
	{ CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Main = 2, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)


  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end



  node = DVIPComputeNode(req,
    "WhackAMolePistonsFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}
  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iTimeDelta = 1/framerate
  params.iFrame = req.Time

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Fog = InFogSlider:GetValue(req).Value
  params.Sharpness = InSharpnessSlider:GetValue(req).Value
  params.AA_SAMPLES = InAA_SAMPLESSlider:GetValue(req).Value
  params.MOTION_BLUR = InMOTION_BLURCheckbox:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution

  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  node:SetParamBlock(params)
  --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  DefineEdges(edges, node)
    
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end


-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
