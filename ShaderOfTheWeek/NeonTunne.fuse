--[[--/*

  NeonTunne.fuse

  Based on https://www.shadertoy.com/view/mtl3RB a WebGL shader created by Infames.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  int    iFrame;
  bool   Noise;
  float  CubeColor[4];
  float  ViewOXY[2];
  float  ViewOZ;
  float  ViewXY[2];
  float  ViewZ;
  float  ringOffset;
  float  FUZZ;
  float  PHASELENGTH;
  float  CUBENUM;
  float  DISTANCEPERPHASE;
  float  seed;
  float  Fov;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

#endif // end of mat3 implementation

// ----------------------------------------------------------------------------------------------------------
// mat4 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float4x4 mat4;

  __DEVICE__ inline mat4 to_mat4( float a, float b, float c, float d, float e, float f, float g, float h, float i, float j, float k, float l, float m, float n, float o, float p)
  {
    return mat4(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
  }

  __DEVICE__ inline mat4 mul_mat4_mat4( mat4 A, mat4 B) { return (A*B); }

#else

  typedef struct { float4 r0; float4 r1; float4 r2; float4 r3; } mat4;

  __DEVICE__ inline mat4 to_mat4( float  a, float  b, float c,   float d, float e, float f,   float g, float h, float i, float j, float k, float l, float m, float n, float o, float p)
  {
    mat4 t;
    t.r0.x = a; t.r0.y = b; t.r0.z = c; t.r0.w = d;
    t.r1.x = e; t.r1.y = f; t.r1.z = g; t.r1.w = h;
    t.r2.x = i; t.r2.y = j; t.r2.z = k; t.r2.w = l;
    t.r3.x = m; t.r3.y = n; t.r3.z = o; t.r3.w = p;
    return t;
  }

__DEVICE__ inline mat4 mul_mat4_mat4( mat4 B, mat4 A)
{

  float r[4][4];
  float a[4][4] = {{A.r0.x, A.r0.y, A.r0.z, A.r0.w},
                   {A.r1.x, A.r1.y, A.r1.z, A.r1.w},
                   {A.r2.x, A.r2.y, A.r2.z, A.r2.w},
                   {A.r3.x, A.r3.y, A.r3.z, A.r3.w}};
  float b[4][4] = {{B.r0.x, B.r0.y, B.r0.z, B.r0.w},
                   {B.r1.x, B.r1.y, B.r1.z, B.r1.w},
                   {B.r2.x, B.r2.y, B.r2.z, B.r2.w},
                   {B.r3.x, B.r3.y, B.r3.z, B.r3.w}};

  for( int i = 0; i < 4; ++i)
  {
   for( int j = 0; j < 4; ++j)
   {
     r[i][j] = 0.0f;
     for( int k = 0; k < 4; ++k)
     {
     r[i][j] = r[i][j] + a[i][k] * b[k][j];
     }
   }
  }
  mat4 R = to_mat4(r[0][0], r[0][1], r[0][2], r[0][3],
                   r[1][0], r[1][1], r[1][2], r[1][3],
                   r[2][0], r[2][1], r[2][2], r[2][3],
                   r[3][0], r[3][1], r[3][2], r[3][3]);
  return R;
}
#endif // end of mat4 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define abs_f3(a) fabs(a)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Texture: RGBA Noise Medium' to iChannel0


#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

//quick and dirty code for prototyping

#define MAXSTEPS 256
#define MAXDIST 30.0
#define PI 3.1415926535898
#define TWOPI 6.28318530718

#define EPSILON 0.005

__DEVICE__ float rand(float n){return fract(_sinf(n) * 43758.5453123f);}
__DEVICE__ float3 noise3( float n ) {
  return to_float3( rand( n ), rand(n*0.520f + 1.546f), rand(n*3.10f - 0.56f) );
}


__DEVICE__ mat4 rotationX( in float angle ) {
  return to_mat4(  1.0f,    0,      0,      0,
                     0,   _cosf(angle),  -_sinf(angle),    0,
                     0,   _sinf(angle),   _cosf(angle),    0,
                     0,       0,        0,     1);
}

__DEVICE__ mat4 rotationY( in float angle ) {
  return to_mat4(  _cosf(angle),    0,    _sinf(angle),  0,
                     0,    1.0f,       0,  0,
                  -_sinf(angle),  0,    _cosf(angle),  0,
                     0,     0,        0,  1);
}

__DEVICE__ mat4 rotationZ( in float angle ) {
  return to_mat4(  _cosf(angle),    -_sinf(angle),  0,  0,
                   _sinf(angle),    _cosf(angle),    0,  0,
                      0,        0,    1,  0,
                      0,        0,    0,  1);
}

__DEVICE__ float3 displacement(float p, float DISTANCEPERPHASE, float PHASE) {
    p *= 8.0f*TWOPI/DISTANCEPERPHASE;
    return to_float3(_sinf(p),_cosf(p*0.5f+PI+PHASE*TWOPI*3.0f)*0.37f,0)*1.7f;
}


//sdf functions taken from iq
__DEVICE__ float opSmoothUnion( float d1, float d2, float k ) {
    float h = clamp( 0.5f + 0.5f*(d2-d1)/k, 0.0f, 1.0f );
    return _mix( d2, d1, h ) - k*h*(1.0f-h); }


__DEVICE__ float sdBox( float3 p, float3 b, float DISTANCEPERPHASE, float PHASE, float CUBENUM, float ringOffset, inout float3 *cubeColor, inout float3 *lastglow, inout float3 *glow, bool Noise, float seed, float3 CubeColor, __TEXTURE2D__ iChannel0 )
{


    float interval = DISTANCEPERPHASE/CUBENUM;
    float3 offset = displacement(round(p.z / interval +0.5f)*interval - ringOffset, DISTANCEPERPHASE, PHASE);
    p -= offset;

    float num = mod_f(_floor(p.z/interval)+1.0f,DISTANCEPERPHASE/interval)*4.0f;
    *cubeColor = normalize(swi3(texture(iChannel0, to_float2((num+0.5f)/256.0f,0.2f/256.0f)),x,y,z));

    if(Noise)
      *cubeColor = normalize(noise3(seed));

    *cubeColor += (CubeColor-0.5f)*2.0f;

    p.z = mod_f(p.z,interval) - interval*0.5f;

    mat4 temp = mul_mat4_mat4(rotationX(PHASE*TWOPI*5.0f) , rotationZ(PHASE*TWOPI*18.0f));

    p = mul_mat3_f3(to_mat3_f3(swi3(temp.r0,x,y,z),swi3(temp.r1,x,y,z),swi3(temp.r2,x,y,z)) , p);

    float3 d = abs_f3(p) - b;
    float res = length(_fmaxf(d,to_float3_s(0.0f))) + _fminf(_fmaxf(d.x,_fmaxf(d.y,d.z)),0.0f);

    *lastglow = _powf(_fmaxf(0.0f,(1.0f-(res/2.0f))),4.0f) * *cubeColor * 0.1f;
    *glow += *lastglow;

    return res;
}
__DEVICE__ float sdTube(float3 p, float r, float DISTANCEPERPHASE, float PHASE)
{
    p.y += 0.8f;
    p -= displacement(p.z, DISTANCEPERPHASE, PHASE);
    return length(swi2(p,x,y))-r;
}

__DEVICE__ float sdTube2(float3 p, float r, float DISTANCEPERPHASE, float PHASE, float ringOffset)
{
    p -= displacement(p.z+1.5f - ringOffset, DISTANCEPERPHASE, PHASE);
    return _fminf(length(swi2(p,x,y) - to_float2(0,0.9f)),_fminf(length(swi2(p,x,y) + to_float2(0.9f,0)),length(swi2(p,x,y)- to_float2(0.9f,0))))-r;
}

__DEVICE__ float sdTorus( float3 p, float r1, float r2, float DISTANCEPERPHASE, float PHASE, float CUBENUM, float ringOffset )
{
    float interval = DISTANCEPERPHASE/CUBENUM;
    float3 offset = displacement(round(p.z / interval+0.5f)*interval - ringOffset, DISTANCEPERPHASE, PHASE);
    p -= offset;
    p.z = mod_f(p.z,interval) - interval*0.5f;
    return length( to_float2(length(swi2(p,x,y))-r1,p.z) )-r2;
}

__DEVICE__ float map(float3 pos, float DISTANCEPERPHASE, float PHASE, float CUBENUM, float ringOffset, inout float3 *cubeColor, inout float3 *lastglow, inout float3 *glow, bool Noise, float seed, float3 CubeColor, __TEXTURE2D__ iChannel0)
{
    float3 p=pos;
    float d0 = sdTube(pos, 0.501f, DISTANCEPERPHASE, PHASE);
    float d1 = sdTorus(pos, 0.9f, 0.05f, DISTANCEPERPHASE, PHASE, CUBENUM, ringOffset);
    float d2 = sdTube2(pos,0.05f, DISTANCEPERPHASE, PHASE, ringOffset);
    d0 = opSmoothUnion(d0,d1,0.5f);
    d0 = opSmoothUnion(d0,d2,0.1f);
    d1 = sdBox(pos, to_float3_s(0.05f), DISTANCEPERPHASE, PHASE, CUBENUM, ringOffset, cubeColor, lastglow, glow, Noise, seed, CubeColor, iChannel0);
    return _fminf(d0,d1);
}

__DEVICE__ void intersect(float3 ro, float3 rd, float DISTANCEPERPHASE, float PHASE, float CUBENUM, float ringOffset, inout float3 *cubeColor, inout float3 *lastglow, inout float3 *glow, float FUZZ, bool Noise, float seed, float3 CubeColor, __TEXTURE2D__ iChannel0)
{
    float res;
    float d = 0.01f;
    for(int i = 0; i < MAXSTEPS; i++)
    {
        float3 p = ro + rd * d;
        res = map(p, DISTANCEPERPHASE, PHASE, CUBENUM, ringOffset, cubeColor, lastglow, glow, Noise, seed, CubeColor, iChannel0);
        if(res < EPSILON * d || res > MAXDIST) {
            break;
        }
        d += res*FUZZ;
    }
    *glow += *lastglow*6.0f;
}


__KERNEL__ void NeonTunneFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);

  bool   Noise = params->Noise;
  float4 CubeColor = to_float4(params->CubeColor[0], params->CubeColor[1], params->CubeColor[2], params->CubeColor[3]);
  float2 ViewOXY = to_float2(params->ViewOXY[0], params->ViewOXY[1]);
  float  ViewOZ = params->ViewOZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  ringOffset = params->ringOffset;
  float  FUZZ = params->FUZZ;
  float  PHASELENGTH = params->PHASELENGTH;
  float  CUBENUM = params->CUBENUM;
  float  DISTANCEPERPHASE = params->DISTANCEPERPHASE;
  float  seed = params->seed;
  float  Fov = params->Fov;

  // --------

    float PHASE = mod_f(iTime/PHASELENGTH,1.0f);

    float3 glow      = to_float3_s(0);
    float3 lastglow  = to_float3_s(0);
    float3 cubeColor = to_float3_s(0);

    seed *= (float)iFrame;

    mat3 dummy1;
    mat4 dummy2;

    float2 uv = (fragCoord - iResolution * 0.5f)/ iResolution;
    uv.x *= iResolution.x / iResolution.y;

    float fov = 0.25f * PI + Fov;
    float3 origin = to_float3(0,0, PHASE*DISTANCEPERPHASE)+to_float3_aw(ViewOXY, ViewOZ);
    float3 target = origin -to_float3(0.0f, 0.001f, -0.05f)+to_float3_aw(ViewXY, ViewZ);

    target += displacement(target.z*1.0f, DISTANCEPERPHASE, PHASE);
    origin += displacement(origin.z*1.0f, DISTANCEPERPHASE, PHASE);

    float3 forward = normalize(target - origin);
    float3 right = normalize(cross(forward, to_float3(0.0f, 1.0f, 0.0f)));
    float3 up = cross(right, forward);
    float3 dir = normalize(uv.x * right + uv.y * up + fov * forward);

    intersect(origin, dir, DISTANCEPERPHASE, PHASE, CUBENUM, ringOffset, &cubeColor, &lastglow, &glow, FUZZ, Noise, seed, swi3(CubeColor,x,y,z), iChannel0);
    fragColor = to_float4_aw(glow, 1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  InNoiseCheckbox = self:AddInput("Noise", "Noise", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  self:BeginControlNest("CubeColor", "CubeColor", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "CubeColor",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InCubeColorColorR = self:AddInput("Red",   "CubeColorRed",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InCubeColorColorG = self:AddInput("Green", "CubeColorGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InCubeColorColorB = self:AddInput("Blue",  "CubeColorBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InCubeColorColorA = self:AddInput("Alpha", "CubeColorAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InViewOXYPoint = self:AddInput("ViewOXY", "ViewOXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewOZSlider = self:AddInput("ViewOZ", "ViewOZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InringOffsetSlider = self:AddInput("ringOffset", "ringOffset", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.6,
      })

  InFUZZSlider = self:AddInput("FUZZ", "FUZZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.7,
      })

  InPHASELENGTHSlider = self:AddInput("PHASELENGTH", "PHASELENGTH", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 100.0,
          INP_Default        = 30.0,
      })

  InCUBENUMSlider = self:AddInput("CUBENUM", "CUBENUM", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 200.0,
          INP_Default        = 50.0,
      })

  InDISTANCEPERPHASESlider = self:AddInput("DISTANCEPERPHASE", "DISTANCEPERPHASE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 300.0,
          INP_Default        = 150.0,
      })

  InseedSlider = self:AddInput("seed", "seed", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -100.0,
          INP_MaxScale       = 300.0,
          INP_Default        = 1.0,
      })

  InFovSlider = self:AddInput("Fov", "Fov", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


  node = DVIPComputeNode(req,
    "NeonTunneFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}
  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  params.iFrame = req.Time

  params.Noise = InNoiseCheckbox:GetValue(req).Value
  params.CubeColor = {
    InCubeColorColorR:GetValue(req).Value,
    InCubeColorColorG:GetValue(req).Value,
    InCubeColorColorB:GetValue(req).Value,InCubeColorColorA:GetValue(req).Value
  }
  params.ViewOXY = {InViewOXYPoint:GetValue(req).X,InViewOXYPoint:GetValue(req).Y}
  params.ViewOZ = InViewOZSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.ringOffset = InringOffsetSlider:GetValue(req).Value
  params.FUZZ = InFUZZSlider:GetValue(req).Value
  params.PHASELENGTH = InPHASELENGTHSlider:GetValue(req).Value
  params.CUBENUM = InCUBENUMSlider:GetValue(req).Value
  params.DISTANCEPERPHASE = InDISTANCEPERPHASESlider:GetValue(req).Value
  params.seed = InseedSlider:GetValue(req).Value
  params.Fov = InFovSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution
  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)
  
  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end

-- */
