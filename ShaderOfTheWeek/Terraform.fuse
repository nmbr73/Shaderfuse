--[[--/*

  TerraformJipi570.fuse

  Based on https://www.shadertoy.com/view/NsdXDs a WebGL shader created by N.N..
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)

 #define sin_f2(i) sin(i)
 #define abs_f3(a) _fabs(a)
 #define exp_f3(a) _expf((a).x)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define sin_f2(i) sin(i)
 #define abs_f3(a) fabs(a)
 #define exp_f3(a) _expf((a).x)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define sin_f2(i) to_float2( _sinf((i).x), _sinf((i).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define exp_f3(a) to_float3(_expf((a).x), _expf((a).y),_expf((a).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


#define AA 1
#define EPS 0.001f
#define MAX 50.0f

__DEVICE__ float2 hash2(float2 p)
{
    return fract_f2(sin_f2(mul_f2_mat2(p,to_mat2(98,-64,-73,69)))*397.0f)*0.8f;
}
__DEVICE__ float height(float2 p, float iTime)
{
    return p.x+_sinf(p.y*0.3f)*3.0f-iTime;
}
__DEVICE__ float cell(float3 p, float iTime)
{
    float2 f = _floor(swi2(p,x,z));
    float d = 4.0f;

    for(int X = -1; X<=1; X++)
    for(int Y = -1; Y<=1; Y++)
    {
        float2 h = f+to_float2(X,Y);
        h += hash2(h)-swi2(p,x,z);

        float3 c = to_float3_aw(h,p.y+1.0f);
        float2 R = normalize(sin_f2(swi2(c,x,y)+swi2(p,x,z)));
        mat2 r = to_mat2(R.x,R.y,-R.y,R.x);

        float off = height(swi2(p,x,z)+swi2(c,x,y),iTime);
        c.z -= _sqrtf(_fabs(off))-1.0f;
        c.z = _fmaxf(c.z,0.0f);

        float s = 0.13f*smoothstep(-0.2f,0.2f,off);
        swi2S(c,x,y, mul_f2_mat2(swi2(c,x,y) , r));

        float w = 0.15f;
        d = _fminf(d, length(_fmaxf(abs_f3(c)-s, to_float3_s(0.0f)))+s-w);
    }

    return d;
}
__DEVICE__ float dist(float3 p, float iTime)
{
    return _fminf(p.y+1.0f,cell(p,iTime));
}
__DEVICE__ float3 normal(float3 p, float iTime)
{
    float2 e = to_float2(-2,2)*EPS;
    return normalize(dist(p+swi3(e,x,x,y),iTime)*swi3(e,x,x,y)+dist(p+swi3(e,x,y,x),iTime)*swi3(e,x,y,x)+
                     dist(p+swi3(e,y,x,x),iTime)*swi3(e,y,x,x)+dist(p+e.y,iTime)*e.y);
}
__DEVICE__ float3 color(float3 p,float3 r, float iTime)
{
    float off = height(swi2(p,x,z),iTime);
    float s = smoothstep(-0.2f,0.2f,off);

    float l = cell(to_float3(p.x,-2,p.z),iTime);
    float e = smoothstep(0.02f,0.0f,l);


    float3 n = normal(p,iTime);
    float ao = clamp(dist(p+n*0.2f,iTime)/0.2f,0.1f,1.0f);
    float3 sd = normalize(to_float3(3,2,-1));
    float dl = _fmaxf(0.3f+0.7f*dot(n,sd),0.0f);
    float sl = _fmaxf(dot(reflect(r,n),sd)*1.2f-1.0f,0.0f);

    for(float i = 0.02f;i<0.5f; i*=1.3f)
    {
        dl *= clamp(1.5f-i/(i+dist(p+sd*i*2.0f,iTime)),0.0f,1.0f);
    }
    float3 sh = _mix(to_float3(0.1f,0.15f,0.2f),to_float3_s(1),dl);

    float3 col = _mix(to_float3(0.7f,1,0.2f),to_float3(1,0.4f,0.1f),s);
    return _mix(to_float3(0.5f,0.7f,0.8f),col*_fminf((p.y+1.1f)/0.4f,1.0f),e)*sh*_sqrtf(ao)+sl;
}
__DEVICE__ float4 march(float3 p,float3 r, float iTime)
{
    float4 m = to_float4_aw(p+r,1);
    for(int i = 0;i<200;i++)
    {
        float s = dist(swi3(m,x,y,z),iTime);
        m += to_float4_aw(r,1)*s;

        if (s<EPS || m.w>MAX) return m;
    }
    return m;
}
__KERNEL__ void TerraformJipi570Fuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);



  // --------



    float3 p = to_float3(iTime-2.0f,0.5f+0.5f*_cosf(iTime*0.2f),1);
    float3 col = to_float3_s(0);
    for(int X = 0;X<AA;X++)
    for(int Y = 0;Y<AA;Y++)
    {
        float2 c = fragCoord+to_float2(X,Y)/(float)(AA)-0.5f;
        float3 r = normalize(to_float3_aw(c-to_float2(0.5f,0.6f)*iResolution,iResolution.y));

        float4 m = march(p,r,iTime);
        float fog = smoothstep(MAX*0.4f,MAX,m.w);

        col += _mix(color(swi3(m,x,y,z),r,iTime),exp_f3(-1.0f*to_float3(13,7,4)*r.y*r.y-0.2f),fog);
    }
    col /= (float)(AA*AA);
    fragColor = to_float4_aw(pow_f3(col,to_float3_s(0.45f)),1);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "TerraformJipi570Fuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


