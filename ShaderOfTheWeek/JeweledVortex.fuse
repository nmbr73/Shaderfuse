--[[--/*

  JeweledVortex.fuse

  Based on https://www.shadertoy.com/view/fdjfDc a WebGL shader created by ChunderFPV.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   ShowValue;
  float  Color[4];
  float  Colpar1;
  float  Colpar2;
  float  Spirals;
  float  VD;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define sign_f(a) sign(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define sign_f(a) sign(a)

 #else // Generic

 #if defined(DEVICE_IS_CUDA)
   #define radians(a) a * M_PI/180.0f
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


#define SCALE 2.0f
#define PI radians(180.0f)
#define TAU (PI*2.0f)

__DEVICE__ float digitIsOn( int digit, float2 id ) {
  const int CHARACTERS[14] = {31599,9362,31183,31207,23524,29671,29679,30994,31727,31719,1488,448,2,3640};

  if ( id.x < 0.0f || id.y < 0.0f || id.x > 2.0f || id.y > 4.0f ) return 0.0f;
  return _floor( mod_f( (float)( CHARACTERS[ (int)( digit ) ] ) / _powf( 2.0f, id.x + id.y * 3.0f ), 2.0f ) ); }

__DEVICE__ float digitSign( float v, float2 id ) {
  return digitIsOn( 10 - (int)( ( sign_f( v ) - 1.0f ) * 0.5f ), id ); }

__DEVICE__ int digitCount( float v ) {
  return (int)( _floor( _logf( _fmaxf( v, 1.0f ) ) / _logf( 10.0f ) ) ); }

__DEVICE__ float digitFirstdP( float2 uv, float scale, float v, int decimalPlaces ) {
  float2 id = _floor( uv * scale );
  if ( 0.0f < digitSign( v, id ) ) return 1.0f;
  v = _fabs( v );
  int digits = digitCount( v );
  float power = _powf( 10.0f, (float)( digits ) );
  float offset = _floor( 0.1f * scale );
  id.x -= offset;
  float n;
  for ( int i = 0 ; i < 33 ; i++, id.x -= offset, v -= power * n, power /= 10.0f ) {
    n = _floor( v / power );
    if ( 0.0f < digitIsOn( (int)( n ), id ) ) return 1.0f;
    if ( i == digits ) {
      id.x -= offset;
      if ( 0.0f < digitIsOn( (int)( 12 ), id ) ) return 1.0f;
    }
    if ( i >= digits + decimalPlaces ) return 0.0f;
  }
  return 0.0f;
  }
__DEVICE__ float digitFirst( float2 uv, float scale, float v ) {
  return digitFirstdP( uv, scale, v, 3 );
  }
__DEVICE__ float3 digitIn( float3 color, float3 fontColor, float2 uv, float scale, float v ) {
  float f = digitFirst( uv, scale, v );
  return _mix( color, fontColor, f );
  }

//__DEVICE__ float3 digitIn( float3 color, float2 uv, float scale, float v ) {
//  return digitIn( color, to_float3_s(1.0f), uv, scale, v );
//  }

__KERNEL__ void JeweledVortexFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   ShowValue = params->ShowValue;
  float4 Color = to_float4(params->Color[0], params->Color[1], params->Color[2], params->Color[3]);
  float  Colpar1 = params->Colpar1;
  float  Colpar2 = params->Colpar2;
  float  Spirals = params->Spirals;
  float  VD = params->VD;

  // --------

    float2 m = ((swi2(iMouse,x,y)-0.5f*iResolution)*2.0f/iResolution.y);
    float st = radians(-31.0f); // start time
    float t = (iMouse.z > 0.0f) ? _atan2f(m.x, -m.y): st+(iTime*TAU)/3600.0f;
    float n = (_cosf(t) > 0.0f) ? _sinf(t): 1.0f/_sinf(t);
    float z = clamp(_powf(500.0f, n), 1e-17f, 1e+17f);
    float2 uv = (fragCoord-0.5f*iResolution)/iResolution.y*SCALE*z;
    float ls = (iTime*TAU)/5.0f; // light animation speed
    float a = _atan2f(uv.x, -uv.y); // screen arc
    float i = a/TAU; // spiral increment 0.5f per 180ï¿½
    float r = _powf(length(uv), 0.5f/n)-i; // archimedean at 0.5
    float cr = _ceil(r); // round up radius
    float wr = cr+i; // winding ratio
    float vd = (cr*TAU+a) / (n*2.0f); // visual denominator
    float vd2 = vd*VD;//2.0f;
    float3 col = to_float3_s(_sinf(wr*vd+ls)); // blend it
    col *= _powf(sin(fract(r)*PI), _floor(_fabs(n*2.0f))+5.0f); // smooth edges
    col *= _sinf(vd2*wr+PI/2.0f+ls*2.0f); // this looks nice
    //col *= 0.2f+_fabs(_cosf(vd2)); // dark spirals
    col *= Spirals+_fabs(_cosf(vd2)); // dark spirals
    float3 g = _mix(to_float3_s(0), to_float3_s(1), _powf(length(uv)/z, -1.0f/n)); // dark gradient
    col = _fminf(col, g); // blend gradient with spiral
    float3 rgb = to_float3( _cosf(vd2)+1.0f, _fabs(_sinf(t)), _cosf(PI+vd2)+1.0f );
    //col += (col*2.0f)-(rgb*0.5f); // add color
    col += (col*Colpar1)-(rgb*Colpar2); // add color
    if (iMouse.z > 0.0f) // on mouse click
    {
      uv = (fragCoord-0.5f*iResolution)/iResolution.y;
      if (ShowValue)
        col = digitIn(col, to_float3_s(1), (uv*2.0f)-m, 44.0f, n); // show value
    }
    fragColor = to_float4_aw(col+(swi3(Color,x,y,z)-0.5f), Color.w);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls


  -- Speed Slider

  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })

  -- iMouse Controls

  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
  })

  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })

  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InShowValueCheckbox = self:AddInput("ShowValue", "ShowValue", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  self:BeginControlNest("Color", "Color", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorColorR = self:AddInput("Red",   "ColorRed",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColorColorG = self:AddInput("Green", "ColorGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColorColorB = self:AddInput("Blue",  "ColorBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColorColorA = self:AddInput("Alpha", "ColorAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InColpar1Slider = self:AddInput("Colpar1", "Colpar1", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 5.0,
      INP_Default        = 2.0,
  })

  InColpar2Slider = self:AddInput("Colpar2", "Colpar2", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 1.0,
      INP_Default        = 0.5,
  })

  InSpiralsSlider = self:AddInput("Spirals", "Spirals", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 1.0,
      INP_Default        = 0.2,
  })

  InVDSlider = self:AddInput("VD", "VD", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 5.0,
      INP_Default        = 2.0,
  })



  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "JeweledVortexFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  -- iMouse

  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)

  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y

  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end

  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end

  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.ShowValue = InShowValueCheckbox:GetValue(req).Value
  params.Color = {
    InColorColorR:GetValue(req).Value,
    InColorColorG:GetValue(req).Value,
    InColorColorB:GetValue(req).Value,InColorColorA:GetValue(req).Value
  }
  params.Colpar1 = InColpar1Slider:GetValue(req).Value
  params.Colpar2 = InColpar2Slider:GetValue(req).Value
  params.Spirals = InSpiralsSlider:GetValue(req).Value
  params.VD = InVDSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


