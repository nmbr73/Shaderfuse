--[[--/*

  BallsAreTouching.fuse

  Based on https://www.shadertoy.com/view/MdlGWn a WebGL shader created by w23.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  int    numBalls;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#if defined(DEVICE_IS_METAL)
  #define POINTERPARAMETER thread
#else
  #define POINTERPARAMETER
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

#if defined(USE_NATIVE_METAL_IMPL)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

  #endif

#endif

__DEVICE__ float4 decube_f3(__TEXTURE2D__ t, float3 xyz)
{
  float ax=_fabs(xyz.x);
  float ay=_fabs(xyz.y);
  float az=_fabs(xyz.z);

  if (xyz.x>0.0f && ax>=ay && ax>=az) // +X, Face 0, right
    return _tex2DVecN(t,(-xyz.z/ax+1.0f)/8.0f + 0.5f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y>0.0f && ay>=ax && ay>=az) // +Y, Face 2, top
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(-xyz.z/ay+1.0f)/6.0f + (2.0f/3.0f),15);

  if (xyz.z>0.0f && az>=ax && az>=ay) // +Z, Face 4, front
    return _tex2DVecN(t,(xyz.x/az+1.0f)/8.0f + 0.25f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.x<0.0f && ax>=ay && ax>=az) // -X, Face 1, left
    return _tex2DVecN(t,(xyz.z/ax+1.0f)/8.0f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y<0.0f && ay>=ax && ay>=az) // -Y, Face 3, bottom
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(xyz.z/ay+1.0f)/6.0f,15);

  if (xyz.z<0.0f && az>=ax && az>=ay) // -Z, Face 5, back
    return _tex2DVecN(t,(-xyz.x/az+1.0f)/8.0f + 0.75f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  return to_float4(1.0f,0.0f,0.0f,1.0f); // error
}


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[


// history:
//  - v.01, mac browser crash fixed
//  - v.00, f1rs7 p05t

#define TRACE_STEPS 128
#define TRACE_EPSILON 0.001f
#define REFLECT_EPSILON 0.1f
#define TRACE_DISTANCE 30.0f
#define NORMAL_EPSILON 0.01f
#define REFLECT_DEPTH 4
#define CUBEMAP_SIZE 128






__DEVICE__ float world(float3 at, int NUM_BALLS, POINTERPARAMETER const float3* balls) {
  //return touching_balls(at);
  float sum = 0.0f;
  for (int i = 0; i < NUM_BALLS; ++i) {
    float r = length(balls[i] - at);
    sum += 1.0f / (r * r);
  }
  return 1.0f - sum;
}


__DEVICE__ float3 lookAtDir(in float3 dir, in float3 pos, in float3 at) {
  float3 f = normalize(at - pos);
  float3 r = cross(f, to_float3(0.0f,1.0f,0.0f));
  float3 u = cross(r, f);
  return normalize(dir.x * r + dir.y * u + dir.z * f);
}


__KERNEL__ void BallsAreTouchingFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  int    numBalls = params->numBalls;

  // --------




  float t = iTime * 0.11f;

  #define MAX_BALLS 20

  float3 balls[MAX_BALLS];

  // update_balls(t);
  {

    for (int i = 0; i < numBalls; ++i) {
    balls[i] = 3.0f * to_float3(
                              _sinf(0.3f+(float)(i+1)*t),
                              _cosf(1.7f+(float)(i-5)*t),
                              1.1f*sin(2.3f+(float)(i+7)*t));
    }
  }



  float aspect = iResolution.x / iResolution.y;
  float2 uv = (fragCoord / iResolution * 2.0f - 1.0f) * to_float2(aspect, 1.0f);

  float3 pos = to_float3(cos(2.0f+4.0f*cos(t))*10.0f, 2.0f+8.0f*cos(t*0.8f), 10.0f*sin(2.0f+3.0f*cos(t)));
  float3 dir = lookAtDir(normalize(to_float3_aw(uv, 2.0f)), swi3(pos,x,y,z), balls[0]);

  fragColor = to_float4_s(0.0f);
  float k = 1.0f;
  for (int reflections = 0; reflections < REFLECT_DEPTH; ++reflections) {

    float4 tpos; // = raymarch(pos, dir, TRACE_DISTANCE);
    {
      float l = 0.0f;
      for (int i = 0; i < TRACE_STEPS; ++i) {
        float d = world(pos + dir * l,numBalls,balls);
        if (d < TRACE_EPSILON*l) break; // if we return here, browser will crash on mac os x, lols
        l += d;
        if (l > TRACE_DISTANCE) break;
      }
      tpos= to_float4_aw(pos + dir * l, l);
    }

    if (tpos.w >= TRACE_DISTANCE) {


      // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
      // __DEVICE__ float3 cube(in float3 dir)
      {
        float M = max(max(_fabs(dir.x), _fabs(dir.y)), _fabs(dir.z));
        float scale = ((float)(CUBEMAP_SIZE) - 1.0f) / (float)(CUBEMAP_SIZE);
        if (_fabs(dir.x) != M) dir.x *= scale;
        if (_fabs(dir.y) != M) dir.y *= scale;
        if (_fabs(dir.z) != M) dir.z *= scale;
      }


      fragColor += decube_f3(iChannel0, dir);
      break;
    }
    fragColor += to_float4_s(0.1f) * k;
    k *= .6;

    // normal
    float3 at=swi3(tpos,x,y,z);
    {

      float2 e = to_float2(0.0f, NORMAL_EPSILON);
      at = normalize(to_float3(
              world(at+swi3(e,y,x,x),numBalls,balls)-world(at,numBalls,balls),
              world(at+swi3(e,x,y,x),numBalls,balls)-world(at,numBalls,balls),
              world(at+swi3(e,x,x,y),numBalls,balls)-world(at,numBalls,balls)
              ));
    }

    dir = normalize(reflect(dir, at));
    pos = swi3(tpos,x,y,z) + dir * REFLECT_EPSILON;
  }

  fragColor.w=1.0f;
  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);

}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  InnumBallsSlider = self:AddInput("numBalls", "numBalls", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = 1,
      INP_MaxScale       = 20,
      INP_Default        = 7,
      INP_Integer        = true,
  })



  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  local node = DVIPComputeNode(req,
    "BallsAreTouchingFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  params.numBalls = InnumBallsSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  -- Set parameters and add I/O

  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- function NotifyChanged(inp, param, time)
-- 	if (param ~= nil) then
-- 		if (param.Value == 1) then
-- 			if (inp == ...) then
--         ...
-- 			end
-- 		end
-- 	end
-- end


-- */


