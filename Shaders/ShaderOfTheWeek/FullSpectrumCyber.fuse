--[[--/*

  FullSpectrumCyber.fuse

  Based on https://www.shadertoy.com/view/XcXXzS a WebGL shader created by Kali.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  fparam;
  float  View1XY[2];
  float  View1Z;
  float  View2XY[2];
  float  View2Z;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))
 #define mod_f2(value,divisor) fmod(value,divisor)

 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define sign_f(a) sign(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define mod_f(a,b) _fmod(a,b)
 #define mod_f2(value,divisor) _fmod(value,divisor)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define sign_f(a) sign(a)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define mod_f2(value,divisor) to_float2(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------




__DEVICE__ mat2 rot(float a) {
    float s=_sinf(a),c=_cosf(a);
    return to_mat2(c,s,-s,c);
}

__DEVICE__ float3 path(float t) {
    return to_float3(_sinf(t*0.3f+_cosf(t*0.2f)*0.5f)*4.0f,_cosf(t*0.2f)*3.0f,t);
}

__DEVICE__ float hexagon( in float2 p, in float r )
{
    const float3 k = to_float3(-0.866025404f,0.5f,0.577350269f);
    p = abs_f2(p);
    p -= 2.0f*_fminf(dot(swi2(k,x,y),p),0.0f)*swi2(k,x,y);
    p -= to_float2(clamp(p.x, -k.z*r, k.z*r), r);
    return length(p)*sign_f(p.y);
}

__DEVICE__ float hex(float2 p) {
  p.x *= 0.57735f*2.0f;
  p.y+=mod_f(_floor(p.x),2.0f)*0.5f;
  p=abs_f2((mod_f2(p,1.0f)-0.5f));
  return _fabs(_fmaxf(p.x*1.5f + p.y, p.y*2.0f) - 1.0f);
}

__DEVICE__ mat3 lookat(float3 dir) {
    float3 up=to_float3(0.0f,1.0f,0.0f);
    float3 rt=normalize(cross(dir,up));
    return to_mat3_f3(rt, cross(rt,dir), dir);
}

__DEVICE__ float hash12(float2 p)
{
    p*=1000.0f;
    float3 p3  = fract_f3((swi3(p,x,y,x)) * 0.1031f);
    p3 += dot(p3, swi3(p3,y,z,x) + 33.33f);
    return fract((p3.x + p3.y) * p3.z);
}

__DEVICE__ float de(float3 p, inout float3 *pt, inout float *hexpos, float fparam, inout float *tcol, float3 hpos, float3 point, inout float *bcol, inout float *hitbol, float iTime) {

    *pt=to_float3_aw(swi2(p,x,y)-swi2(path(p.z),x,y),p.z);
    float h=_fabs(hexagon(swi2(*pt,x,y),3.0f+fparam));
    *hexpos=hex(swi2(*pt,y,z));
    *tcol=smoothstep(0.0f,0.15f,*hexpos);
    h-=*tcol*0.1f;
    float3 pp=p-hpos;
    pp=mul_mat3_f3(lookat(point),pp);
    pp.y-=_fabs(_sinf(iTime))*3.0f+(fparam-(2.0f-fparam));
    swi2S(pp,y,z, mul_f2_mat2(swi2(pp,y,z),rot(-iTime)));
    float bola=length(pp)-1.0f;
    *bcol=smoothstep(0.0f,0.5f,hex(swi2(pp,x,y)*3.0f));
    bola-= *bcol*0.1f;
    float3 pr=p;
    pr.z=mod_f(p.z,6.0f)-3.0f;
    float d=_fminf(h,bola);
    if (d==bola) {
        *tcol=1.0f;
        *hitbol=1.0f;
    }
    else {
        *hitbol=0.0f;
        *bcol=1.0f;
    }
    return d*0.5f;
}

__DEVICE__ float3 normal(float3 p, inout float3 *pt, inout float *hexpos, float fparam, inout float *tcol, float3 hpos, float3 point, inout float *bcol, inout float *hitbol, float iTime) {
    float2 e=to_float2(0.0f,0.005f);
    return normalize(to_float3(de(p+swi3(e,y,x,x), pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime),
                               de(p+swi3(e,x,y,x), pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime),
                               de(p+swi3(e,x,x,y), pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime))-de(p, pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime));
}

__DEVICE__ float3 march(float3 from, float3 dir, inout float3 *pt, inout float *hexpos, float fparam, inout float *tcol, float3 hpos, float3 point, inout float *bcol, inout float *hitbol, float iTime, float3 colors[2]) {

    int hexid = 0;
    float3 odir=dir;
    float3 p=from, col=to_float3_s(0.0f);
    float d,td=0.0f;
    float3 g=to_float3_s(0.0f);
    for (int i=0; i<200; i++) {
        d=de(p, pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime);
        if (d<0.001f||td>200.0f) break;
        p+=dir*d;
        td+=d;
        g+=0.1f/(0.1f+d)* *hitbol*abs_f3(normalize(point));
    }
    float hp= *hexpos*(1.0f- *hitbol);
    p-=dir*0.01f;
    float3 n=normal(p, pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime);
    if (d<0.001f) {
        col=_powf(_fmaxf(0.0f,dot(-dir,n)),2.0f)*colors[0]* *tcol* *bcol;
    }
    col+=(float)(hexid);
    float3 pr= *pt;
    dir=reflect(dir,n);
    td=0.0f;
    for (int i=0; i<200; i++) {
        d=de(p, pt, hexpos, fparam, tcol, hpos, point, bcol, hitbol, iTime);
        if (d<0.001f||td>200.0f) break;
        p+=dir*d;
        td+=d;
        g+=0.1f/(0.1f+d)*abs_f3(normalize(point));
    }
    float zz=p.z;
    if (d<0.001f) {
        float3 refcol=_powf(_fmaxf(0.0f,dot(-odir,n)),2.0f)*colors[1]* *tcol* *bcol;
        p=pr;
        p=abs_f3(0.5f-fract_f3(p*0.1f));
        float m=100.0f;
        for (int i=0; i<10; i++) {
            p=abs_f3(p)/dot(p,p)-0.8f;
            m=_fminf(m,length(p));
        }
        col=_mix(col,refcol,m)-m*0.3f;
        col+=step(0.3f,hp)*step(0.9f,fract(pr.z*0.05f+iTime*0.5f+hp*0.1f))*0.7f;
        col+=step(0.3f, *hexpos)*step(0.9f,fract(zz*0.05f+iTime+ *hexpos*0.1f))*0.3f;
    }
    col+=g*0.03f;
    swi2S(col,x,z, mul_f2_mat2(swi2(col,x,z),rot(odir.y*0.5f)));
  return col;
}


__KERNEL__ void FullSpectrumCyberFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float  fparam = params->fparam;
  float2 View1XY = to_float2(params->View1XY[0], params->View1XY[1]);
  float  View1Z = params->View1Z;
  float2 View2XY = to_float2(params->View2XY[0], params->View2XY[1]);
  float  View2Z = params->View2Z;

  // --------

    float3 colors[2] = {swi3(Color1,x,y,z),swi3(Color2,x,y,z)};

    float3 hpos, point, pt;
    float tcol, bcol, hitbol, hexpos;//, fparam=0.0f;

    float2 uv = fragCoord/iResolution-0.5f;
    uv.x*=iResolution.x/iResolution.y;
    float t=iTime*2.0f;
    float3 from=path(t) ;
    if (mod_f(iTime-10.0f,20.0f)>10.0f) {
        from=path(_floor(t/20.0f)*20.0f+10.0f);
        from.x+=2.0f;
    }
    hpos=path(t+3.0f) + to_float3_aw(View1XY,View1Z);
    float3 adv=path(t+2.0f) + to_float3_aw(View2XY,View2Z);
    float3 dir=normalize(to_float3_aw(uv,0.7f));
    float3 dd=normalize(adv-from);
    point=normalize(adv-hpos);
    swi2S(point,x,z, mul_f2_mat2(swi2(point,x,z),rot(_sinf(iTime)*0.2f)));
    dir=mul_mat3_f3(lookat(dd),dir);
    float3 col = march(from, dir, &pt, &hexpos, fparam, &tcol, hpos, point, &bcol, &hitbol, iTime, colors);
    col *= swi3(Color3,x,y,z);//to_float3(1.0f,0.9f,0.8f);
    fragColor = to_float4_aw(col,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.9, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InColor3ColorA = self:AddInput("Alpha", "Color3Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  self:EndControlNest()

  InfparamSlider = self:AddInput("fparam", "fparam", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InView1XYPoint = self:AddInput("View1XY", "View1XY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InView1ZSlider = self:AddInput("View1Z", "View1Z", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InView2XYPoint = self:AddInput("View2XY", "View2XY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InView2ZSlider = self:AddInput("View2Z", "View2Z", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
      { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
      { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
      CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------




function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)


  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end



  node = DVIPComputeNode(req,
    "FullSpectrumCyberFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}


  params = node:GetParamBlock(ShaderParameters)


  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value,InColor3ColorA:GetValue(req).Value
  }
  params.fparam = InfparamSlider:GetValue(req).Value
  params.View1XY = {InView1XYPoint:GetValue(req).X,InView1XYPoint:GetValue(req).Y}
  params.View1Z = InView1ZSlider:GetValue(req).Value
  params.View2XY = {InView2XYPoint:GetValue(req).X,InView2XYPoint:GetValue(req).Y}
  params.View2Z = InView2ZSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


    --local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O

    node:SetParamBlock(params)
    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    node:AddOutput("dst", dst)
 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
    
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
