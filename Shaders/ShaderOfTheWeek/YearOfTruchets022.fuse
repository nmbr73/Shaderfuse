--[[--/*

  YearOfTruchets022.fuse

  Based on https://www.shadertoy.com/view/dtGGWw a WebGL shader created by byt3_m3chanic.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   Reset;
  float  ColorA[4];
  float  ColorB[4];
  float  ColorC[4];
  float  Fog1[4];
  float  Fog2[4];
  float  SizeXY[2];
  float  SizeZ;
  float  Grid;
  float  Lrid;
  float  thick;
  float  ColorOut[4];
  float  ScanLineOpacity[2];
  float  Curvature[2];
  float  GridA;
  float  GridB;
  float  Vignette;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define cos_f3(i) cos(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define cos_f3(i) cos(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define cos_f3(i) to_float3( _cosf((i).x), _cosf((i).y), _cosf((i).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------


/**

    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License

    Year of Truchets #022
    05/20/2023  @byt3_m3chanic

    All year long I'm going to just focus on truchet tiles and the likes!
    Truchet Core \M/->.<-\M/ 2023

*/


#define R           iResolution
#define M           iMouse
#define T           iTime

#define PI          3.14159265358f
#define PI2         6.28318530718f

#define MIN_DIST    0.0001f
#define MAX_DIST    75.0f



//__DEVICE__ float3 hue(float t){ return 0.5f + 0.4f*cos_f3(PI2*t*(to_float3(0.95f,0.97f,0.98f)*to_float3(0.957f,0.439f,0.043f))); }
__DEVICE__ mat2 rot(float a){return to_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a)); }
__DEVICE__ float hash21(float2 p){return fract(_sinf(dot(p,to_float2(23.43f,84.21f)))*4832.3234f); }

__DEVICE__ float box(float3 p,float3 b){
    float3 q = abs_f3(p)-b;
    return length(_fmaxf(q,to_float3_s(0.0f)))+_fminf(_fmaxf(q.x,_fmaxf(q.y,q.z)),0.0f);
}

__DEVICE__ float cap(float3 p,float r,float h){
    float2 d = abs_f2(to_float2(length(swi2(p,x,y)),p.z))-to_float2(h,r);
    return _fminf(_fmaxf(d.x,d.y),0.0f)+length(_fmaxf(d,to_float2_s(0.0f)));
}

__DEVICE__ float trs( float3 p,float2 t){
    float2 q = to_float2(length(swi2(p,z,x))-t.x,p.y);
    return length(q)-t.y;
}

__DEVICE__ float2 map(float3 p, float sg, float iTime, mat2 flip, mat2 turn, float3 size, float3 grid, float3 lrid, mat2 r90, float thick, float3 bs, inout float *glow ){

    float3 hlf = (size/2.0f);

    float2 res = to_float2(1e5f,0);

    //@mla inversion
    float k = (9.0f+2.0f*_sinf(T*0.1f))/dot(p,p);
    p *= k;

    swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z),flip));
    swi2S(p,x,z, mul_f2_mat2(swi2(p,x,z),turn));

    float3 q = p;
    float3 r = p+hlf;

    float3 id = _floor((q + hlf)/size)-grid;
    float3 ir = _floor((r + hlf)/size)-lrid;

    float chk2 = mod_f(id.y+mod_f(id.z+id.x,2.0f),2.0f)*2.0f-1.0f;

    q = q-size*clamp(round(q/size),-grid,grid);
    r = r-size*clamp(round(r/size),-lrid,lrid);

    float hs = hash21(swi2(id,x,z)+id.y);
    float hf = hash21(swi2(ir,x,z)+ir.y+_floor(T*0.75f));

    if(hs>0.5f)   swi2S(q,x,z, mul_f2_mat2(swi2(q,x,z),r90));
    if(chk2>0.5f) swi2S(q,z,y, mul_f2_mat2(swi2(q,z,y),r90));

    float xhs = fract(2.31f*hs+id.y);
    float trh = 1e5f, trx = 1e5f, srh = 1e5f, dre = 1e5f, jre=1e5f;

    float2 qv = (swi2(q,x,y)-swi2(hlf,x,y));
    trh = trs(swi3((q+to_float3(0,hlf.x,-hlf.y)),y,x,z),to_float2(hlf.x,thick));
    trx = trs(q+to_float3(hlf.x,0,hlf.z),to_float2(hlf.x,thick));
    jre = trs(swi3((q-to_float3_aw(swi2(hlf,x,y),0)),y,z,x),to_float2(hlf.x,thick));

    srh = _fminf(trh,jre);
    srh = _fminf(srh,trx);
    srh = _fmaxf(srh,box(q,bs));

    if(srh<res.x ) {
        float mt = mod_f(_floor(xhs*20.0f),4.0f)+2.0f;
        res = to_float2(srh,mt);
    }

    float crt  = cap(to_float3_aw(swi2(q,x,y),_fabs(q.z))-to_float3(0,0,hlf.x),thick*0.85f,thick*1.5f);
    crt = _fminf(cap(to_float3_aw(swi2(q,z,y),_fabs(q.x))-to_float3(0,0,hlf.x),thick*0.85f,thick*1.5f),crt);
    crt = _fminf(cap(to_float3_aw(swi2(q,x,z),_fabs(q.y))-to_float3(0,0,hlf.x),thick*0.85f,thick*1.5f),crt);

    if(crt<res.x) {
       res = to_float2(crt,12.0f);
    }

    float gb = length(r)-(hlf.x*0.25f);
    if(sg==1.0f  && hf>0.85f ) { *glow += 0.0001f/(0.0001f+gb*gb);}
    if(gb<res.x && hf>0.85f) {
       res = to_float2(gb,11.0f);
    }

    // compensate for the scaling that's been applied
    float mul = 1.0f/k;
    res.x = res.x* mul / 1.25f;
    return res;
}

// Tetrahedron technique @iq
// https://iquilezles.org/articles/normalsSDF
__DEVICE__ float3 normal(float3 p, float t, float iTime, mat2 flip, mat2 turn, float3 size, float3 grid, float3 lrid, mat2 r90, float thick, float3 bs, inout float *glow) {
    float e = 1e-4*t;
    float2 h =to_float2(1,-1)*0.5773f;
    float3 n = swi3(h,x,y,y) * map(p+swi3(h,x,y,y)*e,0.0f, iTime, flip, turn, size, grid, lrid, r90, thick, bs, glow).x+
               swi3(h,y,y,x) * map(p+swi3(h,y,y,x)*e,0.0f, iTime, flip, turn, size, grid, lrid, r90, thick, bs, glow).x+
               swi3(h,y,x,y) * map(p+swi3(h,y,x,y)*e,0.0f, iTime, flip, turn, size, grid, lrid, r90, thick, bs, glow).x+
               swi3(h,x,x,x) * map(p+swi3(h,x,x,x)*e,0.0f, iTime, flip, turn, size, grid, lrid, r90, thick, bs, glow).x;
    return normalize(n);
}



__KERNEL__ void YearOfTruchets022Fuse__Buffer_A(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 O   = to_float4_s(0.0f);
  float2 F   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  float4 ColorA = to_float4(params->ColorA[0], params->ColorA[1], params->ColorA[2], params->ColorA[3]);
  float4 ColorB = to_float4(params->ColorB[0], params->ColorB[1], params->ColorB[2], params->ColorB[3]);
  float4 ColorC = to_float4(params->ColorC[0], params->ColorC[1], params->ColorC[2], params->ColorC[3]);
  float4 Fog1 = to_float4(params->Fog1[0], params->Fog1[1], params->Fog1[2], params->Fog1[3]);
  float4 Fog2 = to_float4(params->Fog2[0], params->Fog2[1], params->Fog2[2], params->Fog2[3]);
  float2 SizeXY = to_float2(params->SizeXY[0], params->SizeXY[1]);
  float  SizeZ = params->SizeZ;
  float  Grid = params->Grid;
  float  Lrid = params->Lrid;
  float  thick = params->thick;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float2 ScanLineOpacity = to_float2(params->ScanLineOpacity[0], params->ScanLineOpacity[1]);
  float2 Curvature = to_float2(params->Curvature[0], params->Curvature[1]);
  float  GridA = params->GridA;
  float  GridB = params->GridB;
  float  Vignette = params->Vignette;

  // --------

    F+=0.5f;

    // globals & const
    //float3 hit,hp;
    mat2 flip,turn,r90;

    const float3 size = to_float3_s(1.25f) + to_float3_aw(SizeXY, SizeZ);
    //#define hlf  (size/2.0f)
    const float3 bs = (size/2.0f);//hlf;
    const float3 grid = to_float3_s(Grid);
    const float3 lrid = to_float3_s(Lrid);
    //const float thick = 0.055f;
    float glow = 0.0f;

    float2 uv = (2.0f* F-R)/_fmaxf(R.x,R.y);

    float3 ro = to_float3(0,0,12);
    float3 rd = normalize(to_float3_aw(uv,-1));

    // mouse //
    float x = M.x == 0.0f && M.y == 0.0f ? 0.35f : (M.y/R.y * 2.0f-1.0f)*PI;
    float y = M.x == 0.0f && M.y == 0.0f ? 0.06f : (M.x/R.x * 2.0f-1.0f)*PI;

    float fl = y+(T*0.135f)+180.0f/PI;
    float fx = x+0.28f*_cosf(fl*2.0f);
    flip = rot(fx);
    turn = rot(fl);
    r90  = rot(1.5707f);

    float3 C = to_float3_s(0.0f), p = ro;
    float m = 0.0f, d = 0.0f;

    for(int i=0;i<128;i++) {
        p = ro + rd * d;
        float2 ray = map(p,1.0f, iTime, flip, turn, size, grid, lrid, r90, thick, bs, &glow);
        if(ray.x<d*1e-4||d>MAX_DIST)break;
        d += i<42 ? ray.x*0.3f: ray.x * 0.8f;
        m  = ray.y;
    }

    if(d<MAX_DIST)
    {
        float3 n = normal(p,d, iTime, flip, turn, size, grid, lrid, r90, thick, bs, &glow);
        float3 lpos =  to_float3(-10,10,10);
        float3 l = normalize(lpos-p);

        float diff = clamp(dot(n,l),0.0f , 1.0f);
        float spec = _powf(_fmaxf(dot(reflect(l, n), rd ), 0.1f), 32.0f)*0.75f;
    }

    //float3 Fog = _mix(to_float3_s(0.05f),to_float3_s(0.75f),(uv.y+0.45f)*0.25f);
    float3 Fog = _mix(swi3(Fog1,x,y,z),swi3(Fog2,x,y,z),(uv.y+0.45f)*0.25f);

    C = _mix(C,Fog,1.0f-_expf(-0.0001f*d*d*d));
    C = _mix(C,to_float3(0.49f,0.98f,0.52f),clamp(glow*0.75f,0.0f,1.0f));

    float vw = 0.6f+0.5f*_sinf(d*0.5f+T*0.85f);
    float fade = clamp((d*0.01f)+vw,0.0f,1.0f);
    //float3 clr = m==4.0f ? to_float3(0.62f,0.36f,0.95f): m==2.0f ? to_float3(0.95f,0.36f,0.87f) : to_float3(0.36f,0.66f,0.95f);
    float3 clr = m==4.0f ? swi3(ColorA,x,y,z) : m==2.0f ? swi3(ColorB,x,y,z) : swi3(ColorC,x,y,z);
    if(m!=11.0f&&m!=12.0f) C = _mix(C,clr,smoothstep(0.35f,0.1f,fade));

    C = pow_f3(C, to_float3_s(0.4545f));
    O = to_float4_aw(C,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, O);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0


/**

    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License

    Year of Truchets #022
    05/20/2023  @byt3_m3chanic

    All year long I'm going to just focus on truchet tiles and the likes!
    Truchet Core \M/->.<-\M/ 2023

*/

#define PI  3.14159265359f


__DEVICE__ float2 remapUV(float2 uv, float2 curvature) {
    uv = uv * 2.0f -1.0f;
    float2 offset = abs_f2(swi2(uv,y,x)) / curvature;
    uv = uv + uv * offset * offset;
    uv = uv * 0.5f + 0.5f;
    return uv;
}

__DEVICE__ float4 scanLine(float uv, float resolution, float opacity) {
     float intensity = _sinf(uv * resolution * PI * 2.0f);
     intensity = ((0.5f * intensity) + 0.5f) * 0.9f + 0.1f;
     return to_float4_aw(to_float3_s(_powf(intensity, opacity)), 1.0f);
}

__DEVICE__ float4 vignette(float2 uv, float2 resolution, float opacity) {
    float intensity = uv.x * uv.y * (1.0f - uv.x) * (1.0f - uv.y);
    return to_float4_aw(to_float3_s(clamp(_powf((resolution.x / 4.0f) * intensity, opacity), 0.0f, 1.0f)), 1.0f);
}



__KERNEL__ void YearOfTruchets022Fuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  float4 ColorA = to_float4(params->ColorA[0], params->ColorA[1], params->ColorA[2], params->ColorA[3]);
  float4 ColorB = to_float4(params->ColorB[0], params->ColorB[1], params->ColorB[2], params->ColorB[3]);
  float4 ColorC = to_float4(params->ColorC[0], params->ColorC[1], params->ColorC[2], params->ColorC[3]);
  float4 Fog1 = to_float4(params->Fog1[0], params->Fog1[1], params->Fog1[2], params->Fog1[3]);
  float4 Fog2 = to_float4(params->Fog2[0], params->Fog2[1], params->Fog2[2], params->Fog2[3]);
  float2 SizeXY = to_float2(params->SizeXY[0], params->SizeXY[1]);
  float  SizeZ = params->SizeZ;
  float  Grid = params->Grid;
  float  Lrid = params->Lrid;
  float  thick = params->thick;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float2 ScanLineOpacity = to_float2(params->ScanLineOpacity[0], params->ScanLineOpacity[1]);
  float2 Curvature = to_float2(params->Curvature[0], params->Curvature[1]);
  float  GridA = params->GridA;
  float  GridB = params->GridB;
  float  Vignette = params->Vignette;

  // --------

    int RowSampler = 15; // Total irre !!! Tausend Shader, die liefen ohne diese Zeile mit OpenCL. Dieser Shader braucht aber genau dies nur für OpenCL -> Total irre !!!

    float2 scanLineOpacity = to_float2_s(0.325f) + ScanLineOpacity;
    float2 curvature = to_float2(8.0f,12.0f) + Curvature;


    float2 uv = fragCoord/iResolution;
    uv = (uv*1.05f)-to_float2(0.025f,0.025f);
    float2 vuv = remapUV(uv, curvature);

    float4 baseColor = _tex2DVecN(iChannel0,vuv.x,vuv.y,15);

    baseColor *= vignette(vuv, iResolution, Vignette);//0.75f);
    baseColor *= scanLine(vuv.x, iResolution.y*GridA, scanLineOpacity.x);
    baseColor *= scanLine(vuv.y, iResolution.x*GridB, scanLineOpacity.y);

    if (vuv.x < 0.0f || vuv.y < 0.0f || vuv.x > 1.0f || vuv.y > 1.0f){
        baseColor = to_float4_aw(to_float3_s(0.0f),0);
    }

    fragColor = baseColor;

    fragColor = to_float4_aw(swi3(fragColor,x,y,z) * (swi3(ColorOut,x,y,z) + 0.5f), ColorOut.w == 0.0 ? fragColor.w : ColorOut.w);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InResetCheckbox = self:AddInput("Reset", "Reset", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  self:BeginControlNest("Colors", "Colors", false, {})
    self:BeginControlNest("ColorA", "ColorA", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorA",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorAColorR = self:AddInput("Red",   "ColorARed",   { INP_Default  = 0.62, IC_ControlID = 0, attrs})
    InColorAColorG = self:AddInput("Green", "ColorAGreen", { INP_Default  = 0.36, IC_ControlID = 1, attrs})
    InColorAColorB = self:AddInput("Blue",  "ColorABlue",  { INP_Default  = 0.95, IC_ControlID = 2, attrs})
    InColorAColorA = self:AddInput("Alpha", "ColorAAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorB", "ColorB", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorB",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBColorR = self:AddInput("Red",   "ColorBRed",   { INP_Default  = 0.95, IC_ControlID = 0, attrs})
    InColorBColorG = self:AddInput("Green", "ColorBGreen", { INP_Default  = 0.36, IC_ControlID = 1, attrs})
    InColorBColorB = self:AddInput("Blue",  "ColorBBlue",  { INP_Default  = 0.87, IC_ControlID = 2, attrs})
    InColorBColorA = self:AddInput("Alpha", "ColorBAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorC", "ColorC", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorC",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorCColorR = self:AddInput("Red",   "ColorCRed",   { INP_Default  = 0.36, IC_ControlID = 0, attrs})
    InColorCColorG = self:AddInput("Green", "ColorCGreen", { INP_Default  = 0.66, IC_ControlID = 1, attrs})
    InColorCColorB = self:AddInput("Blue",  "ColorCBlue",  { INP_Default  = 0.95, IC_ControlID = 2, attrs})
    InColorCColorA = self:AddInput("Alpha", "ColorCAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Fog1", "Fog1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Fog1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InFog1ColorR = self:AddInput("Red",   "Fog1Red",   { INP_Default  = 0.05, IC_ControlID = 0, attrs})
    InFog1ColorG = self:AddInput("Green", "Fog1Green", { INP_Default  = 0.05, IC_ControlID = 1, attrs})
    InFog1ColorB = self:AddInput("Blue",  "Fog1Blue",  { INP_Default  = 0.05, IC_ControlID = 2, attrs})
    InFog1ColorA = self:AddInput("Alpha", "Fog1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Fog2", "Fog2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Fog2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InFog2ColorR = self:AddInput("Red",   "Fog2Red",   { INP_Default  = 0.75, IC_ControlID = 0, attrs})
    InFog2ColorG = self:AddInput("Green", "Fog2Green", { INP_Default  = 0.75, IC_ControlID = 1, attrs})
    InFog2ColorB = self:AddInput("Blue",  "Fog2Blue",  { INP_Default  = 0.75, IC_ControlID = 2, attrs})
    InFog2ColorA = self:AddInput("Alpha", "Fog2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  
  self:BeginControlNest("ColorOut", "ColorOut", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorOut",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorOutColorR = self:AddInput("Red",   "ColorOutRed",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColorOutColorG = self:AddInput("Green", "ColorOutGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColorOutColorB = self:AddInput("Blue",  "ColorOutBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColorOutColorA = self:AddInput("Alpha", "ColorOutAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
   
  self:EndControlNest()

  InSizeXYPoint = self:AddInput("SizeXY", "SizeXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InSizeZSlider = self:AddInput("SizeZ", "SizeZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InGridSlider = self:AddInput("Grid", "Grid", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 3.0,
      })

  InLridSlider = self:AddInput("Lrid", "Lrid", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 4.0,
      })

  InthickSlider = self:AddInput("thick", "thick", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.055,
      })

  

  InScanLineOpacityPoint = self:AddInput("ScanLineOpacity", "ScanLineOpacity", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InCurvaturePoint = self:AddInput("Curvature", "Curvature", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InGridASlider = self:AddInput("GridA", "GridA", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.9,
      })

  InGridBSlider = self:AddInput("GridB", "GridB", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.9,
      })

  InVignetteSlider = self:AddInput("Vignette", "Vignette", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.75,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, LINK_Visible = false, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)

end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "YearOfTruchets022Fuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "YearOfTruchets022Fuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.Reset = InResetCheckbox:GetValue(req).Value
  params.ColorA = {
    InColorAColorR:GetValue(req).Value,
    InColorAColorG:GetValue(req).Value,
    InColorAColorB:GetValue(req).Value,InColorAColorA:GetValue(req).Value
  }
  params.ColorB = {
    InColorBColorR:GetValue(req).Value,
    InColorBColorG:GetValue(req).Value,
    InColorBColorB:GetValue(req).Value,InColorBColorA:GetValue(req).Value
  }
  params.ColorC = {
    InColorCColorR:GetValue(req).Value,
    InColorCColorG:GetValue(req).Value,
    InColorCColorB:GetValue(req).Value,InColorCColorA:GetValue(req).Value
  }
  params.Fog1 = {
    InFog1ColorR:GetValue(req).Value,
    InFog1ColorG:GetValue(req).Value,
    InFog1ColorB:GetValue(req).Value,InFog1ColorA:GetValue(req).Value
  }
  params.Fog2 = {
    InFog2ColorR:GetValue(req).Value,
    InFog2ColorG:GetValue(req).Value,
    InFog2ColorB:GetValue(req).Value,InFog2ColorA:GetValue(req).Value
  }
  params.SizeXY = {InSizeXYPoint:GetValue(req).X,InSizeXYPoint:GetValue(req).Y}
  params.SizeZ = InSizeZSlider:GetValue(req).Value
  params.Grid = InGridSlider:GetValue(req).Value
  params.Lrid = InLridSlider:GetValue(req).Value
  params.thick = InthickSlider:GetValue(req).Value
  params.ColorOut = {
    InColorOutColorR:GetValue(req).Value,
    InColorOutColorG:GetValue(req).Value,
    InColorOutColorB:GetValue(req).Value,InColorOutColorA:GetValue(req).Value
  }
  params.ScanLineOpacity = {InScanLineOpacityPoint:GetValue(req).X,InScanLineOpacityPoint:GetValue(req).Y}
  params.Curvature = {InCurvaturePoint:GetValue(req).X,InCurvaturePoint:GetValue(req).Y}
  params.GridA = InGridASlider:GetValue(req).Value
  params.GridB = InGridBSlider:GetValue(req).Value
  params.Vignette = InVignetteSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "YearOfTruchets022Fuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end

-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
