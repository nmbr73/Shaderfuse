--[[--/*

  AbstractTruchetInversion.fuse

  Based on https://www.shadertoy.com/view/7ljXWt a WebGL shader created by byt3_m3chanic.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  int    iFrame;
  bool   Reset;
  bool   BugCorrect;
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  FC[4];
  float  gcolor[4];
  float  Color4[4];
  float  ViewDXY[2];
  float  ViewDZ;
  float  ViewXY[2];
  float  ViewZ;
  float  shorten;
  float  Angle;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))
  #define mul_mat2_f2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

  __DEVICE__ inline float2 mul_mat2_f2( mat2 m, float2 v )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r1.x; t.y = v.x*m.r0.y + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))
 #define mod_f3(value,divisor) fmod(value,divisor)

 #define sign_f(a) sign(a)
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define mod_f3(value,divisor) _fmod(value,divisor)
 #define sign_f(a) sign(a)
 #define distance_f2( p1, p2) distance(p1, p2)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define mod_f3(value,divisor) to_float3(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)),mod_f((value).z, (divisor)))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[
// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)
// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer A 'Previsualization: Buffer A' to iChannel0


/**
    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License

    Playing with some abstract forms and shapes
    Standard truchet patten in 3d (grid) and
    then warped nothing too exciting

    8/14/21 @byt3_m3chanic
*/

#define R           iResolution
#define T           iTime
#define M           iMouse

#define PI          3.14159265359f
#define PI2         6.28318530718f

#define MAX_DIST    20.00f
#define MIN_DIST    0.001f
//#define SCALE       0.6500f

//utils
__DEVICE__ float hash21(float2 p){ return fract(_sinf(dot(p,to_float2(26.34f,45.32f)))*4324.23f); }
__DEVICE__ mat2 rot(float a){ return to_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a)); }



//@iq torus sdf
__DEVICE__ float torus( float3 p, float2 t ) {
  float2 q = to_float2(length(swi2(p,x,y))-t.x,p.z);
  return length(q)-t.y;
}

//make tile piece
__DEVICE__ float truchet(float3 p,float3 x, float2 r) {
    return _fminf(torus(p-x,r),torus(p+x,r));
}



//domain rep
__DEVICE__ float3 drep(inout float3 *p, float hlf, float size) {
    float3 id=_floor((*p+hlf)/size);
    *p = mod_f3(*p+hlf,size)-hlf;
    return id;
}

__DEVICE__ float2 map(float3 q3, float gw, float hlf, float size, float speed, mat2 t90, float iTime, inout float3 *hit, inout float3 *sid, inout float *glow, float shorten){
    float2 res = to_float2(100.0f,0.0f);

    float k = 5.0f/dot(q3,q3);
    q3 *= k;

    q3.z += speed*0.4f;

    float3 qm = q3;
    float3 qd = q3+hlf;
    swi2S(qd,z,y, mul_f2_mat2(swi2(qd,z,y),t90));
    float3 qid=drep(&qm, hlf, size);
    float3 did=drep(&qd, hlf, size);

    float ht = hash21(swi2(qid,x,y)+qid.z);
    float hy = hash21(swi2(did,x,z)+did.y);

    // truchet build parts
    float thx = (0.0750f+0.0475f*_sinf(T+(q3.x+qid.z)*5.25f) ) *size;
    float thz = (0.0115f+0.0325f*_sinf(T*3.0f+(q3.x+did.z)*6.5f) ) *size;
    float thd = (0.0515f+0.0325f*_sinf(T*3.0f+(q3.x+did.z)*6.5f) ) *size;
    if(ht>0.5f) qm.x *= -1.0f;
    if(hy>0.5f) qd.x *= -1.0f;

    // ring movement
    float dir = mod_f(did.x+did.y,2.0f)<0.5f? -1.0f : 1.0f;
    if(mod_f(did.z,2.0f)<1.0f) dir*=-1.0f;
    float2 d2 = to_float2(length(qd-hlf), length(qd+hlf));

    float2 pp = d2.x<d2.y ? (swi2(qd,x,y) - hlf) : (swi2(qd,x,y) + hlf);
    pp = mul_f2_mat2(pp, rot(speed*dir));

    float a = _atan2f(pp.y, pp.x);
    float amt = 6.0f;
    a = (_floor(a/PI2*amt) + 0.5f)/amt;

    float2 qr = mul_mat2_f2(rot(-a*PI2),pp);
    qr.x -= hlf;
    float3 npos = to_float3(qr.x,qr.y,qd.z);

    //truchets1
    float t = truchet(qm,to_float3(hlf,hlf,0.0f),to_float2(hlf,thx));
    if(t<res.x) {
        *sid = qid;
        *hit = qm;
        res = to_float2(t,2.0f);
    }
    //truchets2
    float d = truchet(qd,to_float3(hlf,hlf,0.0f),to_float2(hlf,thz));
    if(d<res.x) {
        *sid = did;
        *hit = qd;
        res = to_float2(d,1.0f);
    }
    //rings
    float f = truchet(swi3(npos,x,z,y),to_float3(0.0f,0,0),to_float2(thd,0.025f));
    f=_fmaxf(f,-(d-0.01f));
    if(f<res.x) {
        *sid = did;
        *hit = qd;
        res = to_float2(f,3.0f);
    }
    //glows
    if (gw==1.0f) *glow += smoothstep(0.1f,0.25f,0.002f/(0.0165f+f*f));

    float mul = 1.0f/k;
    res.x = res.x * mul / shorten;

    return res;
}

// Tetrahedron technique @iq
// https://iquilezles.org/articles/normalsSDF
__DEVICE__ float3 normal(float3 p, float t, float hlf, float size, float speed, mat2 t90, float iTime, inout float3 *hit, inout float3 *sid, inout float *glow, float shorten)
{
    float e = MIN_DIST*t;
    float2 h =to_float2(1,-1)*0.5773f;
    float3 n = swi3(h,x,y,y) * map(p+swi3(h,x,y,y)*e,0.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten).x+
               swi3(h,y,y,x) * map(p+swi3(h,y,y,x)*e,0.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten).x+
               swi3(h,y,x,y) * map(p+swi3(h,y,x,y)*e,0.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten).x+
               swi3(h,x,x,x) * map(p+swi3(h,x,x,x)*e,0.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten).x;
    return normalize(n);
}



__DEVICE__ float3 render(inout float3 ro, inout float3 rd, inout float3 ref, inout float *d, float hlf, float size, float speed, mat2 t90, float iTime, inout float3 *hit, inout float3 *sid, inout float *glow, float shorten,
                         inout float3 *hitP1, inout float3 *id, float3 lpos, float3 gcolor, float3 FC, float SCALE, float3 Colors[3] ) {
    float3 C = to_float3_s(0.0f);
    float3 p = ro;
    float m = 0.0f;

    float3 h = Colors[0];//to_float3(0.5f,0.5f,0.5f); // Debug

    float3 test = Colors[0];
    float3 test2 = Colors[1];

    for(int i=0;i<120;i++) {
        p = ro + rd * *d;
        float2 ray = map(p,1.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten);
        if(_fabs(ray.x) < MIN_DIST * (*d) || (*d) > MAX_DIST) break;
        *d += i<32 ? ray.x*0.35f: ray.x*0.95f;
        m  = ray.y;
    }

    *hitP1 = *hit;
    *id = *sid;

    float alpha = 0.0f;
    if((*d) < MAX_DIST ) {

        float3 p = ro + rd * (*d);
        float3 n = normal(p, *d, hlf, size, speed, t90, iTime, hit, sid, glow, shorten);
        float3 l = normalize(lpos-p);

        float diff = clamp(dot(n,l),0.0f,1.0f);
        float fresnel = _powf(clamp(1.0f+dot(rd, n), 0.0f, 1.0f), 12.0f);
        fresnel = _mix(0.01f, 1.0f, fresnel);

        float shdw = 1.0f;

        for( float t=0.01f; t < 12.0f; ){
            float _h = map(p + l*t,0.0f, hlf, size, speed, t90, iTime, hit, sid, glow, shorten).x;
            if( _h<MIN_DIST ) { shdw = 0.0f; break; }
            shdw = _fminf(shdw, 24.0f*_h/t);
            t += _h;
            if( shdw<MIN_DIST || t>32.0f ) break;
        }


        diff = _mix(diff,diff*shdw,0.65f);

        float3 view = normalize(p - ro);
        float3 ret = reflect(normalize(lpos), n);
        float spec =  0.5f * _powf(_fmaxf(dot(view, ret), 0.0f), 24.0f);

        if(m==1.0f) {
            float3 hp = *hitP1/(1.0f/SCALE);
            float dir = mod_f((*id).x + (*id).y,2.0f) * 2.0f - 1.0f;
            float2 uv = swi2(hp,x,y)-sign_f(hp.x+hp.y+0.001f)*0.5f;
            float angle = _atan2f(uv.x, uv.y);
            float a = _sinf(dir*angle*4.0f+T*1.25f);
            a = _fabs(_fabs(_fabs(a)-0.5f)-0.24f)-0.124f;
            h = _mix(gcolor, gcolor*0.2f, smoothstep(0.01f, 0.02f, a));
            ref = h-fresnel;
        }

        if(m==2.0f) {
            float3 hp = *hitP1/(1.0f/SCALE);
            float dir = mod_f((*id).x + (*id).y,2.0f) * 2.0f - 1.0f;
            if(mod_f((*id).z,2.0f)<1.0f) dir*=-1.0f;
            float2 uv = swi2(hp,x,y)-sign_f(hp.x+hp.y+0.001f)*0.5f;
            float angle = _atan2f(uv.x, uv.y);
            float a = _sinf(dir*angle*8.0f+T*0.5f);
            a = _fabs(_fabs(_fabs(_fabs(a)-0.75f)-0.5f)-0.25f)-0.06f;

            h = _mix( to_float3_s(0.01f), Colors[0] , smoothstep(0.02f, 0.01f, a));

            ref = h-fresnel;
        }

        if(m==3.0f) {
            h = Colors[2];//to_float3(0.906f,0.757f,0.894f);
            ref = to_float3_s(0.0f);
        }

        //C = h;//diff*h+spec;

        C = diff*h+spec;

        C.x = C.y = C.z;
        //C = h;//+spec;

        C = _mix(swi3(FC,x,y,z), C, _expf(-0.375f* *d * *d * *d));
        C.x = C.y = C.z;

        ro = p+n*0.002f;
        rd = reflect(rd,n);
    } else {
        C = swi3(FC,x,y,z);
    }

    return C;
}

__DEVICE__ float _fwidth(float inp, float2 iR){
    //simulate fwidth
    float uvx = inp + 1.0f/iR.x;
    float ddx = uvx * uvx - inp * inp;

    float uvy = inp + 1.0f/iR.y;
    float ddy = uvy * uvy - inp * inp;

    return _fabs(ddx) + _fabs(ddy);
}


__DEVICE__ void topLayer(inout float3 *C, float2 uv, float alpha, float iTime, float3 gcolor, float2 iResolution)
{
    float px = _fwidth(uv.x, iResolution);
    float md = mod_f(T*0.1f,2.0f);
    float zw = md<1.0f? 2.0f: 1.25f*_sinf(fract(T*0.1f));
    float d = length(uv)-zw;
    d=_fabs(d)-0.002f;
    d=smoothstep(px,-px,d);
    *C =_mix(*C,gcolor,d);
}

__KERNEL__ void AbstractTruchetInversionFuse__Buffer_A(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 O   = to_float4_s(0.0f);
  float2 F   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   BugCorrect = params->BugCorrect;
  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float4 FC = to_float4(params->FC[0], params->FC[1], params->FC[2], params->FC[3]);
  float4 gcolor = to_float4(params->gcolor[0], params->gcolor[1], params->gcolor[2], params->gcolor[3]);
  float4 Color4 = to_float4(params->Color4[0], params->Color4[1], params->Color4[2], params->Color4[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float  ViewDZ = params->ViewDZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  shorten = params->shorten;
  float  Angle = params->Angle;

  // --------

    F+=0.5f;

    float3 Colors[3] = {swi3(Color1,x,y,z),swi3(Color2,x,y,z),swi3(Color3,x,y,z)};

    float SCALE = 0.6500f;

    //globals
    float3 hit = to_float3_s(0.0f), hitP1 = to_float3_s(0.0f), sid = to_float3_s(0.0f), id = to_float3_s(0.0f);
    float glow = 0.0f, speed = 0.0f;
    mat2 t90;

    //const
    float size = 1.0f/SCALE;
    float hlf = size/2.0f;
    float dbl = 1.0f/size;
//    float shorten = 1.26f;

//    float3 FC= to_float3(0.001f,0.001f,0.001f);
//    float3 gcolor = to_float3(0.145f,0.659f,0.914f);
    float3 lpos = to_float3(0.0f,0.001f,3.85f);

    // precal
    t90 = rot(90.0f*PI/180.0f+Angle);
    speed = T*0.35f;
    //FC = (swi3(texture(iChannel0,F/R),x,y,z))*0.9f;
    //gcolor = to_float3(0.145f,0.659f,0.914f);
    //

    float2 uv = (2.0f*F-R)/_fmaxf(R.x,R.y);
    float3 ro = to_float3(0,0,3.25f) + to_float3_aw(ViewXY, ViewZ);
    float3 rd = normalize(to_float3_aw(uv,-1) + to_float3_aw(ViewDXY, ViewDZ));

    float x = M.x == 0.0f && M.y == 0.0f ? -0.005f : -(M.y/R.y * 0.25f - 0.125f) * PI;
    float y = M.x == 0.0f && M.y == 0.0f ?  0.015f : -(M.x/R.x * 0.25f - 0.125f) * PI;

    mat2 rx = rot(x);
    mat2 ry = rot(y);

    swi2S(ro,y,z, mul_f2_mat2(swi2(ro,y,z) , rx));
    swi2S(rd,y,z, mul_f2_mat2(swi2(rd,y,z) , rx));
    swi2S(ro,x,z, mul_f2_mat2(swi2(ro,x,z) , ry));
    swi2S(rd,x,z, mul_f2_mat2(swi2(rd,x,z) , ry));

    float3 C = to_float3_s(0);
    float3 ref=to_float3_s(0);

    float glowMask = 0.0f;
    float d = 0.0f;


    C = swi3(render(ro, rd, ref, &d, hlf, size, speed, t90, iTime, &hit, &sid, &glow, shorten, &hitP1, &id, lpos, swi3(gcolor,x,y,z), swi3(FC,x,y,z), SCALE, Colors),x,y,z);


    if (BugCorrect && C.x != C.y && C.y == C.z) C.y = C.x, C.z = C.x; // DCTL or WebGL Bug ? How knows!

    float3 _gcolor = swi3(Color4,x,y,z);//to_float3(0.145f,0.659f,0.914f);

    glowMask = clamp(glow,0.0f,1.0f);
    C = _mix(C,_gcolor*glow,glowMask);

    float vw = 0.5f+0.5f*_sinf(uv.x*0.075f+T*0.3f);
    float fade = clamp((d*0.045f)+vw,0.0f,1.0f);
    fade=_fabs(_fabs(fade)-0.005f)-0.001f;
    C = _mix(C,_gcolor,smoothstep(0.11f,0.1f,fade));

    topLayer(&C,uv,d, iTime, swi3(gcolor,x,y,z), iResolution);
    C = clamp(C,to_float3_s(0),to_float3_s(1));
    O = to_float4_aw(C,1.0f);

    if(iFrame < 1 ||Reset) O = to_float4_s(0.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, O);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0


/**
    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License

    Abstract Truchet Inversion
    8/14/21 @byt3_m3chanic

    (mouseable)

    suggest music to play (since soundcloud isnt working in shader)
    https://soundcloud.com/relapserecords/07-survive-low-fog
*/


__KERNEL__ void AbstractTruchetInversionFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   BugCorrect = params->BugCorrect;
  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float4 FC = to_float4(params->FC[0], params->FC[1], params->FC[2], params->FC[3]);
  float4 gcolor = to_float4(params->gcolor[0], params->gcolor[1], params->gcolor[2], params->gcolor[3]);
  float4 Color4 = to_float4(params->Color4[0], params->Color4[1], params->Color4[2], params->Color4[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float  ViewDZ = params->ViewDZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  shorten = params->shorten;
  float  Angle = params->Angle;

  // --------

    float offset[3] = { 0.01f, 1.75f, 4.95f };
    float weight[3] = { 0.2f, 0.35f, 0.075f };

    float2 uv = fragCoord/iResolution;

    float3 C = swi3(_tex2DVecN(iChannel0,uv.x,uv.y,15),x,y,z);
    float3 _R = swi3(_tex2DVecN(iChannel0,uv.x,uv.y,15),x,y,z) * weight[0];
    for (int i=1; i<3; i++) {
      _R += swi3(texture(iChannel0, uv + to_float2_s(offset[i])/iResolution),x,y,z) * weight[i];
      _R += swi3(texture(iChannel0, uv - to_float2_s(offset[i])/iResolution),x,y,z) * weight[i];
    }

    // mask for effect and mixdown
    float dt = distance_f2(swi2(uv,x,y),to_float2_s(0.5f))*0.32f;
    dt = smoothstep(0.82f,0.965f,1.0f-dt);
    float3 Color = _mix(_R,C,dt);

    // output
    Color = pow_f3(Color, to_float3_s(0.4545f));
    fragColor = to_float4_aw(Color,1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InResetCheckbox = self:AddInput("Reset", "Reset", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InBugCorrectCheckbox = self:AddInput("BugCorrect", "BugCorrect", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.400, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.761, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.941, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 0.906, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.757, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.894, IC_ControlID = 2, attrs})
    InColor3ColorA = self:AddInput("Alpha", "Color3Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("FC", "FC", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "FC",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InFCColorR = self:AddInput("Red",   "FCRed",   { INP_Default  = 0.001, IC_ControlID = 0, attrs})
    InFCColorG = self:AddInput("Green", "FCGreen", { INP_Default  = 0.001, IC_ControlID = 1, attrs})
    InFCColorB = self:AddInput("Blue",  "FCBlue",  { INP_Default  = 0.001, IC_ControlID = 2, attrs})
    InFCColorA = self:AddInput("Alpha", "FCAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  
  self:BeginControlNest("gcolor", "gcolor", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "gcolor",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    IngcolorColorR = self:AddInput("Red",   "gcolorRed",   { INP_Default  = 0.145, IC_ControlID = 0, attrs})
    IngcolorColorG = self:AddInput("Green", "gcolorGreen", { INP_Default  = 0.659, IC_ControlID = 1, attrs})
    IngcolorColorB = self:AddInput("Blue",  "gcolorBlue",  { INP_Default  = 0.914, IC_ControlID = 2, attrs})
    IngcolorColorA = self:AddInput("Alpha", "gcolorAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color4", "Color4", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color4",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor4ColorR = self:AddInput("Red",   "Color4Red",   { INP_Default  = 0.145, IC_ControlID = 0, attrs})
    InColor4ColorG = self:AddInput("Green", "Color4Green", { INP_Default  = 0.659, IC_ControlID = 1, attrs})
    InColor4ColorB = self:AddInput("Blue",  "Color4Blue",  { INP_Default  = 0.914, IC_ControlID = 2, attrs})
    InColor4ColorA = self:AddInput("Alpha", "Color4Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  self:EndControlNest()

  InViewDXYPoint = self:AddInput("ViewDXY", "ViewDXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewDZSlider = self:AddInput("ViewDZ", "ViewDZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InshortenSlider = self:AddInput("shorten", "shorten", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 1.26,
      })

  InAngleSlider = self:AddInput("Angle", "Angle", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -50.0,
          INP_MaxScale       = 50.0,
          INP_Default        = 0.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, LINK_Visible = false, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
  
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "AbstractTruchetInversionFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "AbstractTruchetInversionFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iFrame = req.Time

  params.Reset = InResetCheckbox:GetValue(req).Value
  params.BugCorrect = InBugCorrectCheckbox:GetValue(req).Value
  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value,InColor3ColorA:GetValue(req).Value
  }
  params.FC = {
    InFCColorR:GetValue(req).Value,
    InFCColorG:GetValue(req).Value,
    InFCColorB:GetValue(req).Value,InFCColorA:GetValue(req).Value
  }
  params.gcolor = {
    IngcolorColorR:GetValue(req).Value,
    IngcolorColorG:GetValue(req).Value,
    IngcolorColorB:GetValue(req).Value,IngcolorColorA:GetValue(req).Value
  }
  params.Color4 = {
    InColor4ColorR:GetValue(req).Value,
    InColor4ColorG:GetValue(req).Value,
    InColor4ColorB:GetValue(req).Value,InColor4ColorA:GetValue(req).Value
  }
  params.ViewDXY = {InViewDXYPoint:GetValue(req).X,InViewDXYPoint:GetValue(req).Y}
  params.ViewDZ = InViewDZSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.shorten = InshortenSlider:GetValue(req).Value
  params.Angle = InAngleSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution
  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddInput("iChannel0",Image_Buff_GlobalA)  -- Anpassen !!
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "AbstractTruchetInversionFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
    
  --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
