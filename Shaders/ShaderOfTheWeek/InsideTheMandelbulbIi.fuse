--[[--/*

  InsideTheMandelbulbIi.fuse

  Based on https://www.shadertoy.com/view/mtScRc a WebGL shader created by mrange.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  refmul;
  float  refoff;
  float  View1[2];
  float  View1Z;
  float  ViewRot[2];
  float  hoff;
  float  initt;
  float  FOV;
  float  SkyCol[4];
  float  GlowCol[4];
  float  DiffCol[4];

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3( float a, float b, float c, float d, float e, float f, float g, float h, float i)
  {
    return mat3(a,b,c,d,e,f,g,h,i);
  }

  __DEVICE__ inline mat3 to_mat3_f( float a ) { return mat3(a,a,a,a,a,a,a,a,a); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }
  __DEVICE__ inline float3 mul_f3_mat3( float3 A, mat3 B) { return (A*B); }
  __DEVICE__ inline mat3 mul_mat3_mat3( mat3 A, mat3 B) { return (A*B); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3( float  a, float  b, float c,   float d, float e, float f,   float g, float h, float i)
  {
    mat3 t;
    t.r0.x = a; t.r0.y = b; t.r0.z = c;
    t.r1.x = d; t.r1.y = e; t.r1.z = f;
    t.r2.x = g; t.r2.y = h; t.r2.z = i;
    return t;
  }

  __DEVICE__ inline mat3 to_mat3_f( float  a )
  {
    mat3 t;
    t.r0.x = t.r0.y = t.r0.z = t.r1.x = t.r1.y = t.r1.z = t.r2.x = t.r2.y = t.r2.z = a;
    return t;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

__DEVICE__ inline float3 mul_f3_mat3( float3 A, mat3 B) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z;
    C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z;
    C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
    return C;
  }

__DEVICE__ mat3 mul_mat3_mat3( mat3 B, mat3 A)
{
   float r[3][3];
   float a[3][3] = {{A.r0.x, A.r0.y, A.r0.z},
                    {A.r1.x, A.r1.y, A.r1.z},
                    {A.r2.x, A.r2.y, A.r2.z}};
   float b[3][3] = {{B.r0.x, B.r0.y, B.r0.z},
                    {B.r1.x, B.r1.y, B.r1.z},
                    {B.r2.x, B.r2.y, B.r2.z}};

  for( int i = 0; i < 3; ++i)
  {
   for( int j = 0; j < 3; ++j)
   {
     r[i][j] = 0.0f;
     for( int k = 0; k < 3; ++k)
     {
       r[i][j] = r[i][j] + a[i][k] * b[k][j];
     }
   }
  }
  mat3 R = to_mat3(r[0][0], r[0][1], r[0][2],
                   r[1][0], r[1][1], r[1][2],
                  r[2][0], r[2][1], r[2][2]);
  return R;
}
#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)

 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define exp_f3(a) _expf((a))
 #define mix_f3(v,i,m) mix(v,i,m)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define exp_f3(a) _expf((a))
 #define mix_f3(v,i,m) mix(v,i,m)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define exp_f3(a) to_float3(_expf((a).x), _expf((a).y),_expf((a).z))
 #define mix_f3(v,i,m) to_float3(_mix((v).x,(i).x,(m).x),_mix((v).y,(i).y,(m).y),_mix((v).z,(i).z,(m).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

// --
#define LOOPS   2    // 4+ and higher to show off you expensive GPU
#define POWER   8.0f
#define ANIMATE
// --

#define PI              3.141592654f
#define TAU             (2.0f*PI)
#define PHI             (_sqrtf(5.0f)*0.5f + 0.5f)

#define TIME            iTime
#define RESOLUTION      iResolution

#define TOLERANCE       0.0001f
#define MAX_RAY_LENGTH  20.0f
#define MAX_RAY_MARCHES 60
#define NORM_OFF        0.005f
#define MAX_BOUNCES     5


__DEVICE__ float3 _refract_f3(float3 I, float3 N, float eta, float refmul, float refoff) {
   float dotNI = dot(N, I);
   float k = 1.0f - eta * eta * (1.0f - dotNI * dotNI);
   if (k < 0.0f) {
     return to_float3_s(0.0);
   }
   return eta * I - (eta * dotNI * _sqrtf(k)) * N * refmul + refoff; //+0.5f;   * -01.50f;(MarchingCubes)  - 0.15f; (GlassDuck)
}


// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488
const float4 hsv2rgb_K = {1.0f, 2.0f / 3.0f, 1.0f / 3.0f, 3.0f};

__DEVICE__ float3 hsv2rgb(float3 c) {
  float3 p = abs_f3(fract_f3(swi3(c,x,x,x) + swi3(hsv2rgb_K,x,y,z)) * 6.0f - swi3(hsv2rgb_K,w,w,w));
  return c.z * _mix(swi3(hsv2rgb_K,x,x,x), clamp(p - swi3(hsv2rgb_K,x,x,x), 0.0f, 1.0f), c.y);
}
// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488
//  Macro version of above to enable compile-time constants
#define HSV2RGB(c)  (c.z * _mix(swi3(hsv2rgb_K,x,x,x), clamp(abs_f3(fract_f3(swi3(c,x,x,x) + swi3(hsv2rgb_K,x,y,z)) * 6.0f - swi3(hsv2rgb_K,w,w,w)) - swi3(hsv2rgb_K,x,x,x), 0.0f, 1.0f), c.y))

// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM
__DEVICE__ float3 sRGB(float3 t) {
  return mix_f3(1.055f*pow_f3(t, to_float3_s(1.0f/2.4f)) - 0.055f, 12.92f*t, step(t, to_float3_s(0.0031308f)));
}

// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
__DEVICE__ float3 aces_approx(float3 v) {
  v = _fmaxf(v, to_float3_s(0.0f));
  v *= 0.6f;
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
__DEVICE__ float box(float2 p, float2 b) {
  float2 d = abs_f2(p)-b;
  return length(_fmaxf(d,to_float2_s(0.0f))) + _fminf(_fmaxf(d.x,d.y),0.0f);
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/intersectors/intersectors.htm
__DEVICE__ float rayPlane(float3 ro, float3 rd, float4 p) {
  return -(dot(ro,swi3(p,x,y,z))+p.w)/dot(rd,swi3(p,x,y,z));
}

// License: Unknown, author: EvilRyu, found: https://www.shadertoy.com/view/MdXSWn
__DEVICE__ float mandelBulb(float3 p, float iTime) {

  const float power = POWER;
  float3 z  = p;
  float3 dz = to_float3_s(0.0f);
  float r, theta, phi;
  float dr = 1.0f;

  for(int i = 0; i < LOOPS; ++i) {
    r = length(z);
    if(r > 2.0f) continue;
    theta = _atan2f(z.y, z.x);
#ifdef ANIMATE
    phi = asin(z.z / r) + TIME*0.2f;
#else
    phi = asin(z.z / r);
#endif

    dr = _powf(r, power - 1.0f) * dr * power + 1.0f;

    r = _powf(r, power);
    theta = theta * power;
    phi = phi * power;

    z = r * to_float3(_cosf(theta)*_cosf(phi), _sinf(theta)*_cosf(phi), _sinf(phi)) + p;
  }
  return 0.5f * _logf(r) * r / dr;
}

__DEVICE__ mat3 rot_z(float a) {
  float c = _cosf(a);
  float s = _sinf(a);
  return to_mat3(
      c,s,0
    ,-s,c,0
    , 0,0,1
    );
}

__DEVICE__ mat3 rot_y(float a) {
  float c = _cosf(a);
  float s = _sinf(a);
  return to_mat3(
      c,0,s
    , 0,1,0
    ,-s,0,c
    );
}

__DEVICE__ mat3 rot_x(float a) {
  float c = _cosf(a);
  float s = _sinf(a);
  return to_mat3(
      1, 0,0
    , 0, c,s
    , 0,-s,c
    );
}

__DEVICE__ float3 skyColor(float3 ro, float3 rd, float3 skyCol) {
  float3 col = clamp(to_float3_s(0.0025f/_fabs(rd.y))*skyCol, 0.0f, 1.0f);

  float tp0  = rayPlane(ro, rd, to_float4_aw(to_float3(0.0f, 1.0f, 0.0f), 4.0f));
  float tp1  = rayPlane(ro, rd, to_float4_aw(to_float3(0.0f, -1.0f, 0.0f), 6.0f));
  float tp = tp1;
  tp = _fmaxf(tp0,tp1);

  if (tp1 > 0.0f) {
    float3 pos  = ro + tp1*rd;
    float2 pp = swi2(pos,x,z);
    float db = box(pp, to_float2(6.0f, 9.0f))-1.0f;

    col += to_float3_s(4.0f)*skyCol*rd.y*rd.y*smoothstep(0.25f, 0.0f, db);
    col += to_float3_s(0.8f)*skyCol*_expf(-0.5f*_fmaxf(db, 0.0f));
  }

  if (tp0 > 0.0f) {
    float3 pos  = ro + tp0*rd;
    float2 pp = swi2(pos,x,z);
    float ds = length(pp) - 0.5f;

    col += to_float3_s(0.25f)*skyCol*_expf(-0.5f*_fmaxf(ds, 0.0f));
  }

  return clamp(col, 0.0f, 10.0f);
}

__DEVICE__ float df(float3 p, float iTime, mat3 g_rot, out float3 *g_mat, out float3 *g_beer) {
  p = mul_f3_mat3(p,g_rot);
  float3 p1 = p;
  const float z1 = 2.0f;
  float d1 = mandelBulb(p1/z1, iTime)*z1;

  float3 mat = to_float3(0.8f, 0.5f, (1.0f+0.05f));
  const float3 gcol = HSV2RGB(to_float3(0.05f, 0.95f, 2.0f));
  float3 beer = -1.0f*gcol;

  float d = d1;

  *g_mat = mat;
  *g_beer = beer;
  return d;
}


__DEVICE__ float3 normal(float3 pos, float iTime, mat3 g_rot, out float3 *g_mat, out float3 *g_beer) {
  float2  eps = to_float2(NORM_OFF,0.0f);
  float3 nor;
  nor.x = df(pos+swi3(eps,x,y,y), iTime, g_rot, g_mat, g_beer) - df(pos-swi3(eps,x,y,y), iTime, g_rot, g_mat, g_beer);
  nor.y = df(pos+swi3(eps,y,x,y), iTime, g_rot, g_mat, g_beer) - df(pos-swi3(eps,y,x,y), iTime, g_rot, g_mat, g_beer);
  nor.z = df(pos+swi3(eps,y,y,x), iTime, g_rot, g_mat, g_beer) - df(pos-swi3(eps,y,y,x), iTime, g_rot, g_mat, g_beer);
  return normalize(nor);
}

__DEVICE__ float rayMarch(float3 ro, float3 rd, float dfactor, out int *ii, float iTime, mat3 g_rot, out float3 *g_mat, out float3 *g_beer) {
  float t = 0.0f;
  float tol = dfactor*TOLERANCE;
  *ii = MAX_RAY_MARCHES;
  for (int i = 0; i < MAX_RAY_MARCHES; ++i) {
    if (t > MAX_RAY_LENGTH) {
      t = MAX_RAY_LENGTH;
      break;
    }
    float d = dfactor*df(ro + rd*t, iTime, g_rot, g_mat, g_beer);
    if (d < TOLERANCE) {
      *ii = i;
      break;
    }
    t += d;
  }
  return t;
}

__DEVICE__ float3 render(float3 ro, float3 rd, float iTime, mat3 g_rot, out float3 *g_mat, out float3 *g_beer, float3 skyCol, float3 lightPos, float3 diffuseCol, float initt, float refmul, float refoff) {
  float3 agg = to_float3(0.0f, 0.0f, 0.0f);
  float3 ragg = to_float3_s(1.0f);

  bool isInside = df(ro, iTime, g_rot, g_mat, g_beer) < 0.0f;

  for (int bounce = 0; bounce < MAX_BOUNCES; ++bounce) {
    float dfactor = isInside ? -1.0f : 1.0f;
    float mragg = _fminf(min(ragg.x, ragg.y), ragg.z);
    if (mragg < 0.025f) break;
    int iter;
    float st = rayMarch(ro, rd, dfactor, &iter, iTime, g_rot, g_mat, g_beer);
    const float mrm = 1.0f/(float)(MAX_RAY_MARCHES);
    float ii = (float)(iter)*mrm;
    float3 mat  = *g_mat;
    float3 beer = *g_beer;
    if (st >= MAX_RAY_LENGTH) {
      agg += ragg*skyColor(ro, rd, skyCol);
      break;
    }

    float3 sp = ro+rd*st;

    float3 sn = dfactor*normal(sp, iTime, g_rot, g_mat, g_beer);
    float fre = 1.0f+dot(rd, sn);
//    fre = clamp(_fabs(fre), 0.0f, 1.0f);
    fre *= fre;
    fre = _mix(0.1f, 1.0f, fre);

    float3 ld   = normalize(lightPos - sp);

    float dif   = _fmaxf(dot(ld, sn), 0.0f);
    float3 ref  = reflect(rd, sn);
    float re    = mat.z;
    float ire   = 1.0f/re;
    float3 refr = _refract_f3(rd, sn, !isInside ? re : ire, refmul, refoff );
    float3 rsky = skyColor(sp, ref, skyCol);
    float3 col  = to_float3_s(0.0f);
    col += diffuseCol*dif*dif*(1.0f-mat.x);
    float edge = smoothstep(1.0f, 0.9f, fre);
    col += rsky*mat.y*fre*to_float3_s(1.0f)*edge;
    if (isInside) {
      ragg *= exp_f3(-st*beer);
    }
    agg += ragg*col;

    if (refr.x == 0.0f && refr.y == 0.0f && refr.z == 0.0f) {
      rd = ref;
    } else {
      ragg *= mat.x;
      isInside = !isInside;
      rd = refr;
    }

    // TODO: if beer is active should also computer it based on initt
    ro = sp+initt*rd;
  }

  return agg;
}


#define pi 3.14159265358979323f

__DEVICE__ float3 effect(float2 p, float iTime, float3 skyCol, float3 lightPos, float3 diffuseCol, float initt, float refmul, float refoff, float3 View1, float3 View2, float4 iMouse, float2 iResolution, float FOV) {

  // Ray setup and camera
  float crz = (iMouse.x - iResolution.x / 2.0f) / iResolution.x * pi;
  float crx = (iMouse.y - iResolution.y / 2.0f) / iResolution.y * pi;

  mat3 m = mul_mat3_mat3(to_mat3(_cosf(crz), 0.0f, _sinf(crz), 0.0f, 1.0f, 0.0f, -_sinf(crz), 0.0f, _cosf(crz)) ,
                         to_mat3(1.0f, 0.0f, 0.0f, 0.0f, _cosf(crx), _sinf(crx), 0.0f, -_sinf(crx), _cosf(crx)));


  mat3 g_rot    = to_mat3_f(1.0f);
  float3 g_mat  = to_float3_s(0.0f);
  float3 g_beer = to_float3_s(0.0f);

  g_rot = mul_mat3_mat3(rot_x(0.2f*TIME) , rot_y(0.3f*TIME));
  float3 ro = 0.6f*to_float3(0.0f, 2.0f, 5.0f);
  const float3 la = to_float3(0.0f, 0.0f, 0.0f) + View1;
  const float3 up = to_float3(0.0f, 1.0f, 0.0f) + View2;

  float3 ww = normalize(la - ro);
  float3 uu = normalize(cross(up, ww ));
  float3 vv = normalize(cross(ww,uu));
  const float fov = _tanf(TAU/FOV);
  float3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);

  if(iMouse.z > 0.0f)
    {
        ro = mul_mat3_f3(m , ro);
        rd = mul_mat3_f3(m , rd);
    }


  float3 col = render(ro, rd, iTime, g_rot, &g_mat, &g_beer, skyCol, lightPos, diffuseCol, initt, refmul, refoff);

  return col;
}

__KERNEL__ void InsideTheMandelbulbIiFuse__Buffer_A(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float  refmul = params->refmul;
  float  refoff = params->refoff;
  float2 View1 = to_float2(params->View1[0], params->View1[1]);
  float  View1Z = params->View1Z;
  float2 ViewRot = to_float2(params->ViewRot[0], params->ViewRot[1]);
  float  hoff = params->hoff;
  float  initt = params->initt;
  float  FOV = params->FOV;
  float4 SkyCol = to_float4(params->SkyCol[0], params->SkyCol[1], params->SkyCol[2], params->SkyCol[3]);
  float4 GlowCol = to_float4(params->GlowCol[0], params->GlowCol[1], params->GlowCol[2], params->GlowCol[3]);
  float4 DiffCol = to_float4(params->DiffCol[0], params->DiffCol[1], params->DiffCol[2], params->DiffCol[3]);

  // --------

  fragCoord+=0.5f;

  //const float hoff = 0.0f;

  const float3 skyCol     = HSV2RGB(to_float3(hoff+SkyCol.x, SkyCol.y, SkyCol.z));  //HSV2RGB(to_float3(hoff+0.6f, 0.86f, 1.0f));
  const float3 glowCol    = HSV2RGB(to_float3(hoff+GlowCol.x, GlowCol.y, GlowCol.z)); //HSV2RGB(to_float3(hoff+0.065f, 0.8f, 6.0f));
  const float3 diffuseCol = HSV2RGB(to_float3(hoff+DiffCol.x, DiffCol.y, DiffCol.z));  //HSV2RGB(to_float3(hoff+0.6f, 0.85f, 1.0f));
  const float3 lightPos   = to_float3(0.0f, 10.0f, 0.0f);

  //const float initt       = 0.1f;

  float2 q = fragCoord/RESOLUTION;
  float2 p = -1.0f + 2.0f * q;
  p.x *= RESOLUTION.x/RESOLUTION.y;
  float3 col = to_float3_s(0.0f);
  col = effect(p, iTime, skyCol, lightPos, diffuseCol, initt, refmul, refoff, to_float3_aw(View1,View1Z), to_float3_aw(ViewRot,0.0f), iMouse, iResolution, FOV );
  col = aces_approx(col);
  col = sRGB(col);
  fragColor = to_float4_aw(col, 1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0


// CC0: Inside the mandelbulb II
//  Received some "complaints" about the old mandelbulb suffering from
//  alias effects. So thought I make a quick try to apply the FXAA
//  thing I learnt from XorDev. It did improve it but not perfect still.

// When experimenting with this shader I realized this entire shader is
// basically just a lucky bug (apart from the aliasing)

//#define RESOLUTION      iResolution

// License: Unknowon, author: XorDev, found: https://github.com/XorDev/GM_FXAA
__DEVICE__ float4 fxaa(__TEXTURE2D__ tex, float2 uv, float2 texelSz) {
  
  int RowSampler = 15; // Total irre !!! Tausend Shader, die liefen ohne diese Zeile mit OpenCL. Dieser Shader braucht aber genau dies nur für OpenCL -> Total irre !!!
  
  // See this blog
  // https://mini.gmshaders.com/p/gm-shaders-mini-fxaa

  // Maximum texel span
  const float span_max    = 8.0f;
  // These are more technnical and probably don't need changing:
  // Minimum "dir" reciprocal
  const float reduce_min  = (1.0f/128.0f);
  // Luma multiplier for "dir" reciprocal
  const float reduce_mul  = (1.0f/32.0f);

  const float3  luma        = to_float3(0.299f, 0.587f, 0.114f);

  // Sample center and 4 corners
  float3 rgbCC = swi3(_tex2DVecN(tex,uv.x,uv.y,15),x,y,z);
  float3 rgb00 = swi3(texture(tex, uv+to_float2(-0.5f,-0.5f)*texelSz),x,y,z);
  float3 rgb10 = swi3(texture(tex, uv+to_float2(+0.5f,-0.5f)*texelSz),x,y,z);
  float3 rgb01 = swi3(texture(tex, uv+to_float2(-0.5f,+0.5f)*texelSz),x,y,z);
  float3 rgb11 = swi3(texture(tex, uv+to_float2(+0.5f,+0.5f)*texelSz),x,y,z);

  //Get luma from the 5 samples
  float lumaCC = dot(rgbCC, luma);
  float luma00 = dot(rgb00, luma);
  float luma10 = dot(rgb10, luma);
  float luma01 = dot(rgb01, luma);
  float luma11 = dot(rgb11, luma);

  // Compute gradient from luma values
  float2 dir = to_float2((luma01 + luma11) - (luma00 + luma10), (luma00 + luma01) - (luma10 + luma11));

  // Diminish dir length based on total luma
  float dirReduce = _fmaxf((luma00 + luma10 + luma01 + luma11) * reduce_mul, reduce_min);

  // Divide dir by the distance to nearest edge plus dirReduce
  float rcpDir = 1.0f / (_fminf(_fabs(dir.x), _fabs(dir.y)) + dirReduce);

  // Multiply by reciprocal and limit to pixel span
  dir = clamp(dir * rcpDir, -span_max, span_max) * swi2(texelSz,x,y);

  // Average middle texels along dir line
  float4 A = 0.5f * (
      texture(tex, uv - dir * (1.0f/6.0f))
    + texture(tex, uv + dir * (1.0f/6.0f))
    );

  // Average with outer texels along dir line
  float4 B = A * 0.5f + 0.25f * (
      texture(tex, uv - dir * (0.5f))
    + texture(tex, uv + dir * (0.5f))
    );


  // Get lowest and highest luma values
  float lumaMin = _fminf(lumaCC, _fminf(min(luma00, luma10), _fminf(luma01, luma11)));
  float lumaMax = _fmaxf(lumaCC, _fmaxf(max(luma00, luma10), _fmaxf(luma01, luma11)));

  // Get average luma
  float lumaB = dot(swi3(B,x,y,z), luma);

  //If the average is outside the luma range, using the middle average
  return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? A : B;
}

__KERNEL__ void InsideTheMandelbulbIiFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);

  int RowSampler = 15; // Total irre !!! Tausend Shader, die liefen ohne diese Zeile mit OpenCL. Dieser Shader braucht aber genau dies nur für OpenCL -> Total irre !!!

  float  refmul = params->refmul;
  float  refoff = params->refoff;
  float2 View1 = to_float2(params->View1[0], params->View1[1]);
  float  View1Z = params->View1Z;
  float2 ViewRot = to_float2(params->ViewRot[0], params->ViewRot[1]);
  float  hoff = params->hoff;
  float  initt = params->initt;
  float  FOV = params->FOV;
  float4 SkyCol = to_float4(params->SkyCol[0], params->SkyCol[1], params->SkyCol[2], params->SkyCol[3]);
  float4 GlowCol = to_float4(params->GlowCol[0], params->GlowCol[1], params->GlowCol[2], params->GlowCol[3]);
  float4 DiffCol = to_float4(params->DiffCol[0], params->DiffCol[1], params->DiffCol[2], params->DiffCol[3]);

  // --------

  float2 q = fragCoord/RESOLUTION;

  fragColor = fxaa(iChannel0, q, _sqrtf(2.0f)/RESOLUTION);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()


  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    --INP_Passive = true,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  
  ----- Inspector Panel Controls

  InrefmulSlider = self:AddInput("refmul", "refmul", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 10.0,
      INP_Default        = 1.0,
  })

  InrefoffSlider = self:AddInput("refoff", "refoff", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "SliderControl",
      INP_MinScale       = -1.0,
      INP_MaxScale       = 10.0,
      INP_Default        = 0.0,
  })

  InView1Point = self:AddInput("View1", "View1", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InView1ZSlider = self:AddInput("View1Z", "View1Z", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewRotPoint = self:AddInput("ViewRot", "ViewRot", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InhoffSlider = self:AddInput("hoff", "hoff", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  IninittSlider = self:AddInput("initt", "initt", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.1,
      })

  InFOVSlider = self:AddInput("FOV", "FOV", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 20.0,
          INP_Default        = 6.0,
      })


self:BeginControlNest("Color", "Colors", false, {})
  self:BeginControlNest("SkyCol", "SkyCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "SkyCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InSkyColColorR = self:AddInput("Red",   "SkyColRed",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InSkyColColorG = self:AddInput("Green", "SkyColGreen", { INP_Default  = 0.86, IC_ControlID = 1, attrs})
    InSkyColColorB = self:AddInput("Blue",  "SkyColBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InSkyColColorA = self:AddInput("Alpha", "SkyColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("GlowCol", "GlowCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "GlowCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_Visible   = false,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InGlowColColorR = self:AddInput("Red",   "GlowColRed",   { INP_Default  = 0.065, IC_ControlID = 0, attrs})
    InGlowColColorG = self:AddInput("Green", "GlowColGreen", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InGlowColColorB = self:AddInput("Blue",  "GlowColBlue",  { INP_Default  = 6.0, IC_ControlID = 2, attrs})
    InGlowColColorA = self:AddInput("Alpha", "GlowColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("DiffCol", "DiffCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "DiffCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InDiffColColorR = self:AddInput("Red",   "DiffColRed",   { INP_Default  = 0.06, IC_ControlID = 0, attrs})
    InDiffColColorG = self:AddInput("Green", "DiffColGreen", { INP_Default  = 0.85, IC_ControlID = 1, attrs})
    InDiffColColorB = self:AddInput("Blue",  "DiffColBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InDiffColColorA = self:AddInput("Alpha", "DiffColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
self:EndControlNest()



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    IC_Visible          = false,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, LINK_Visible = false, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "InsideTheMandelbulbIiFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "InsideTheMandelbulbIiFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.refmul = InrefmulSlider:GetValue(req).Value
  params.refoff = InrefoffSlider:GetValue(req).Value
  params.View1 = {InView1Point:GetValue(req).X,InView1Point:GetValue(req).Y}
  params.View1Z = InView1ZSlider:GetValue(req).Value
  params.ViewRot = {InViewRotPoint:GetValue(req).X,InViewRotPoint:GetValue(req).Y}
  params.hoff = InhoffSlider:GetValue(req).Value
  params.initt = IninittSlider:GetValue(req).Value
  params.FOV = InFOVSlider:GetValue(req).Value
  params.SkyCol = {
    InSkyColColorR:GetValue(req).Value,
    InSkyColColorG:GetValue(req).Value,
    InSkyColColorB:GetValue(req).Value,InSkyColColorA:GetValue(req).Value
  }
  params.GlowCol = {
    InGlowColColorR:GetValue(req).Value,
    InGlowColColorG:GetValue(req).Value,
    InGlowColColorB:GetValue(req).Value,InGlowColColorA:GetValue(req).Value
  }
  params.DiffCol = {
    InDiffColColorR:GetValue(req).Value,
    InDiffColColorG:GetValue(req).Value,
    InDiffColColorB:GetValue(req).Value,InDiffColColorA:GetValue(req).Value
  }
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


    local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "InsideTheMandelbulbIiFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
