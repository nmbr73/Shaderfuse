--[[--/*

  GlassyWithOddRotation.fuse

  Based on https://www.shadertoy.com/view/3XdXWX a WebGL shader created by etrujillo.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  LightDir[4];
  float  EnvColor[4];
  float  BaseColor[4];
  float  ViewDXY[2];
  float  ViewLight[2];
  float  ViewLightZ;
  float  FinalCol1;
  float  FinalCol2;
  float  FinalCol3;
  float  Level0;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d
    #define swi3S(a,b,c,d,e) a.b##c##d = e

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}
    #define swi3S(a,b,c,d,e) {float3 tmp = e; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z;}
    #define swi4S(a,b,c,d,e,f) {float4 tmp = f; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z; (a).e = tmp.w;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)

 #define sin_f2(i) sin(i)
 #define sin_f4(i) sin(i)
 #define cos_f4(i) cos(i)
 #define tanh_f3(i) tanh(i)
 #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define sin_f2(i) sin(i)
 #define sin_f4(i) sin(i)
 #define cos_f4(i) cos(i)
 #define tanh_f3(i) tanh(i)
 #define abs_f3(a) fabs(a)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define sin_f2(i) to_float2( _sinf((i).x), _sinf((i).y))
 #define sin_f4(i) to_float4( _sinf((i).x), _sinf((i).y), _sinf((i).z), _sinf((i).w))
 #define cos_f4(i) to_float4( _cosf((i).x), _cosf((i).y), _cosf((i).z), _cosf((i).w))
 #define tanh_f3(i) to_float3(_tanhf((i).x), _tanhf((i).y), _tanhf((i).z))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[
// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)
#define texelFetch(ch, uv, a) texture(ch, (make_float2((uv).x,(uv).y)+0.5f)/iResolution)

__DEVICE__ inline mat2 to_mat2_f4 (float4 a)  { mat2 t; t.r0.x = a.x; t.r0.y = a.y; t.r1.x = a.z; t.r1.y = a.w;   return t; }

__DEVICE__ mat2 rot(float a){ return to_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a)); }

__DEVICE__ float4 nan_inf( float4 Q)
{
    if (isnan(Q.x) )         Q.x = 0.0f;
    if (isnan(Q.y) )         Q.y = 0.0f;
    if (isnan(Q.z) )         Q.z = 0.0f;
    if (isnan(Q.w) )         Q.w = 0.0f;

    if (isinf(Q.x) == -1.0f) Q.x = 0.0f;
    if (isinf(Q.y) == -1.0f) Q.y = 0.0f;
    if (isinf(Q.z) == -1.0f) Q.z = 0.0f;
    if (isinf(Q.w) == -1.0f) Q.w = 0.0f;

    if (isinf(Q.x) == 1.0f) Q.x = 0.0f;
    if (isinf(Q.y) == 1.0f) Q.y = 0.0f;
    if (isinf(Q.z) == 1.0f) Q.z = 0.0f;
    if (isinf(Q.w) == 1.0f) Q.w = 0.0f;

    return Q;
}

#define PI 3.1415926535897f
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


// Mirror-like "Happy Accident" Shader (CC0)
// A shiny reflective variation of a raymarched fractal accident
// ATTRIBUTION: Shader techniques inspired by (alphabetical):
//   @byt3_m3chanic
//   @FabriceNeyrat2
//   @iq
//   @shane
//   @XorDev
//   + many more

__DEVICE__ float map(float3 p) {
    // Domain repetition
    p = abs_f3(fract_f3(p) - 0.5f);
    // Cylinder + planes SDF
    return _fabs(_fminf(length(swi2(p,x,y)) - 0.175f, _fminf(p.x, p.y) + 1e-3f)) + 1e-3f;
}

__DEVICE__ float3 estimateNormal(float3 p) {
    float eps = 0.001f;
    return normalize(to_float3(
        map(p + to_float3(eps, 0.0f, 0.0f)) - map(p - to_float3(eps, 0.0f, 0.0f)),
        map(p + to_float3(0.0f, eps, 0.0f)) - map(p - to_float3(0.0f, eps, 0.0f)),
        map(p + to_float3(0.0f, 0.0f, eps)) - map(p - to_float3(0.0f, 0.0f, eps))
    ));
}

__KERNEL__ void GlassyWithOddRotationFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 O   = to_float4_s(0.0f);
  float2 C   = to_float2(fusion_x,fusion_y);


  float4 LightDir = to_float4(params->LightDir[0], params->LightDir[1], params->LightDir[2], params->LightDir[3]);
  float4 EnvColor = to_float4(params->EnvColor[0], params->EnvColor[1], params->EnvColor[2], params->EnvColor[3]);
  float4 BaseColor = to_float4(params->BaseColor[0], params->BaseColor[1], params->BaseColor[2], params->BaseColor[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float2 ViewLight = to_float2(params->ViewLight[0], params->ViewLight[1]);
  float  ViewLightZ = params->ViewLightZ;
  float  FinalCol1 = params->FinalCol1;
  float  FinalCol2 = params->FinalCol2;
  float  FinalCol3 = params->FinalCol3;
  float  Level0 = params->Level0;

  // --------

    float2 r = iResolution;
    float2 uv = (C - 0.5f * r) / r.y;

    float t = iTime;
    float z = fract(dot(C, sin_f2(C))) - 0.5f;
    float4 col = to_float4_s(0.0f);
    float4 p;

    for (float i = 0.0f; i < 77.0f; i++) {
        // Ray direction
        p = to_float4_aw(z * normalize(to_float3_aw(C - (0.7f+ViewDXY) * r, r.y)), 0.1f * t);
        p.z += t;

        float4 q = p;

        // Apply "bugged" rotation matrices for glitchy fractal distortion
        swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2_f4(cos_f4(2.0f + q.z + to_float4(0,11,33,0)))));
        swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2_f4(cos_f4(q + to_float4(0,11,33,0)))));


        float x = iMouse.x == 0.0f && iMouse.y == 0.0f ? -0.005f : -(iMouse.y/iResolution.y * 0.25f - 0.125f) * PI;
        float y = iMouse.x == 0.0f && iMouse.y == 0.0f ?  0.015f : -(iMouse.x/iResolution.x * 0.25f - 0.125f) * PI;

        mat2 rx = rot(x);
        mat2 ry = rot(y);

        swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z) , rx));
        swi2S(p,x,z, mul_f2_mat2(swi2(p,x,z) , ry));


        // Distance estimation
        float d = map(swi3(p,x,y,z));

        // Estimate lighting
        float3 pos = swi3(p,x,y,z);
        float3 lightDir = normalize(swi3(LightDir,x,y,z));//to_float3(0.3f, 0.5f, 1.0f));
        float3 viewDir = normalize(to_float3_aw(uv+ViewLight, 1.0f + ViewLightZ));
        float3 n = estimateNormal(pos);
        float3 reflectDir = reflect(viewDir, n);

        // Fake environment reflection (sky blue + fade to white)
        float3 envColor = _mix(swi3(EnvColor,x,y,z), to_float3_s(1.0f), 0.5f + 0.5f * reflectDir.y);

        // Specular highlight
        float spec = _powf(_fmaxf(dot(reflectDir, lightDir), 0.0f), 32.0f);

        // Funky palette color using original method
        float4 baseColor = (to_float4_s(1.0f) + sin_f4(0.5f * q.z + length(swi3(p,x,y,z) - swi3(q,x,y,z)) + BaseColor))
                         / (0.5f + 2.0f * dot(swi2(q,x,y), swi2(q,x,y)));

        // Combine base color + environment reflection + specular highlight
        float3 finalColor = swi3(baseColor,x,y,z) * FinalCol1 + envColor * FinalCol2 + to_float3_s(spec) * FinalCol3;

        // Brightness weighted accumulation
        swi3S(col,x,y,z, swi3(col,x,y,z) + finalColor / d);

        z += Level0 * d;
    }

    // Compress brightness range
    O = to_float4_aw(tanh_f3(swi3(col,x,y,z) / 2e4f), 1.0f);

  O = nan_inf(O);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, O);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  self:BeginControlNest("LightDir", "LightDir", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "LightDir",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InLightDirColorR = self:AddInput("Red",   "LightDirRed",   { INP_Default  = 0.3, IC_ControlID = 0, attrs})
    InLightDirColorG = self:AddInput("Green", "LightDirGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InLightDirColorB = self:AddInput("Blue",  "LightDirBlue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InLightDirColorA = self:AddInput("Alpha", "LightDirAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("EnvColor", "EnvColor", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "EnvColor",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InEnvColorColorR = self:AddInput("Red",   "EnvColorRed",   { INP_Default  = 0.8, IC_ControlID = 0, attrs})
    InEnvColorColorG = self:AddInput("Green", "EnvColorGreen", { INP_Default  = 0.4, IC_ControlID = 1, attrs})
    InEnvColorColorB = self:AddInput("Blue",  "EnvColorBlue",  { INP_Default  = 0.8, IC_ControlID = 2, attrs})
    InEnvColorColorA = self:AddInput("Alpha", "EnvColorAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("BaseColor", "BaseColor", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "BaseColor",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InBaseColorColorR = self:AddInput("Red",   "BaseColorRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InBaseColorColorG = self:AddInput("Green", "BaseColorGreen", { INP_Default  = 4.0, IC_ControlID = 1, attrs})
    InBaseColorColorB = self:AddInput("Blue",  "BaseColorBlue",  { INP_Default  = 3.0, IC_ControlID = 2, attrs})
    InBaseColorColorA = self:AddInput("Alpha", "BaseColorAlpha", { INP_Default  = 6.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InViewDXYPoint = self:AddInput("ViewDXY", "ViewDXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewLightPoint = self:AddInput("ViewLight", "ViewLight", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewLightZSlider = self:AddInput("ViewLightZ", "ViewLightZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -3.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 0.0,
      })

  InFinalCol1Slider = self:AddInput("FinalCol1", "FinalCol1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.1,
      })

  InFinalCol2Slider = self:AddInput("FinalCol2", "FinalCol2", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.9,
      })

  InFinalCol3Slider = self:AddInput("FinalCol3", "FinalCol3", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 1.2,
      })

  InLevel0Slider = self:AddInput("Level0", "Level0", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 0.6,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end



  node = DVIPComputeNode(req,
    "GlassyWithOddRotationFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.LightDir = {
    InLightDirColorR:GetValue(req).Value,
    InLightDirColorG:GetValue(req).Value,
    InLightDirColorB:GetValue(req).Value,InLightDirColorA:GetValue(req).Value
  }
  params.EnvColor = {
    InEnvColorColorR:GetValue(req).Value,
    InEnvColorColorG:GetValue(req).Value,
    InEnvColorColorB:GetValue(req).Value,InEnvColorColorA:GetValue(req).Value
  }
  params.BaseColor = {
    InBaseColorColorR:GetValue(req).Value,
    InBaseColorColorG:GetValue(req).Value,
    InBaseColorColorB:GetValue(req).Value,InBaseColorColorA:GetValue(req).Value
  }
  params.ViewDXY = {InViewDXYPoint:GetValue(req).X,InViewDXYPoint:GetValue(req).Y}
  params.ViewLight = {InViewLightPoint:GetValue(req).X,InViewLightPoint:GetValue(req).Y}
  params.ViewLightZ = InViewLightZSlider:GetValue(req).Value
  params.FinalCol1 = InFinalCol1Slider:GetValue(req).Value
  params.FinalCol2 = InFinalCol2Slider:GetValue(req).Value
  params.FinalCol3 = InFinalCol3Slider:GetValue(req).Value
  params.Level0 = InLevel0Slider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
     
  node:AddOutput("dst", dst)
  
  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
