--[[--/*

  StraightFlagstoneTiles.fuse

  Based on https://www.shadertoy.com/view/7tKGRc a WebGL shader created by gelami.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   SCROLLING;
  bool   GLOW;
  bool   ANIMATED;
  bool   Adjust1;
  bool   Adjust2;
  bool   Tex;
  float  SHOW;
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  SCALE;
  float  SMOOTHNESS;
  float  Adjust3;
  float  Tex_ID;
  float  Tex_XY[2];
  float  Tex_Scale;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)
 #define fract_f3(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))

 #define cos_f3(i) cos(i)
 #define abs_f2(a) _fabs(a)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define mod_f(a,b) _fmod(a,b)
 #define cos_f3(i) cos(i)
 #define abs_f2(a) fabs(a)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define cos_f3(i) to_float3( _cosf((i).x), _cosf((i).y), _cosf((i).z))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)


#define PI (_acosf(-1.0f))
#define TAU (2.0f*PI)

#define sat(x) clamp(x, 0.0f, 1.0f)

__DEVICE__ mat2 rot2D(float a)
{
    return to_mat2(_cosf(a), -_sinf(a), _sinf(a), _cosf(a));
}

// Cubic smin function
// https://iquilezles.org/articles/smin
__DEVICE__ float smin( float a, float b, float k )
{
    float h = _fmaxf(k - _fabs(a - b), 0.0f ) / k;
    return _fminf(a, b) - h*h*h*k * (1.0f / 6.0f);
}

__DEVICE__ float smax( float a, float b, float k )
{
    return -smin(-a, -b, k);
}

// Cosine Color Palette
// https://iquilezles.org/articles/palettes
__DEVICE__ float3 palette( float t, float Adjust, float3 Color2, float3 Color3 )
{
    //return 0.52f-Adjust + (0.48f+Adjust)*cos_f3( TAU * (to_float3(0.9f, 0.8f, 0.5f) * t + to_float3(0.1f, 0.05f, 0.1f)) );
    return 0.52f-Adjust + (0.48f+Adjust)*cos_f3( TAU * (Color2 * t + Color3) );
}


// Hash without Sine
// https://www.shadertoy.com/view/4djSRW
// MIT License...
/* Copyright (c) 2014 David Hoskins.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

__DEVICE__ float hash12(float2 p)
{
    p = p * 1.1213f;
    float3 p3  = fract_f3((swi3(p,x,y,x)) * 0.1031f);
    p3 += dot(p3, swi3(p3,y,z,x) + 33.33f);
    return fract((p3.x + p3.y) * p3.z);
}

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Texture: Abstract 2' to iChannel0
// Connect Image 'Texture: Picture' to iChannel1

// Straight Flagstone Tiles (aka Asymmetric Tiles)
// https://www.shadertoy.com/view/7tKGRc

/**
 * Flagstone/Asymmetric tiling with tile IDs, sizes and UVs.
 *
 * Like with my previous shader (https://www.shadertoy.com/view/flVGzm),
 * the tile IDs are computed first, and the UVs are derived from it,
 * by subtracting from the original position, and scaling by the tile size.
 *
 * This has the advantage of not dealing with the mess that is
 * getting the UVs for each corner, and gives you already the tile ID.
 * It's great for rectangular tilings, as long as you know what the size of the tile is.
 *
 * The distances from this does have discontinuities in the edges
 *
 * Next time, I'd like to try doing the organic flagstone tiles with asymmetric sizes
 * Distance-to-edge voronoi is pretty close to it, but the sizes aren't so varied. :(
 * Maybe there's a way to do it in a similar vein like this one.
 *
 * Many thanks to Shane (hello!) and fizzer for their methods
 * from which this shader is derived from:
 *
 *   Variegated Tiling by fizzer
 *   https://www.shadertoy.com/view/3styzn
 *
 *   Asymmetric Blocks by Shane
 *   https://www.shadertoy.com/view/Ws3GRs
 *
**/

__DEVICE__ float randSpan( float2 p, float iTime, bool ANIMATED )
{
    if(ANIMATED)
      return (_sinf(iTime*1.6f + hash12(p)*TAU)*0.5f+0.5f)*0.6f+0.2f;
    else
      return hash12(p)*0.6f+0.2f;
}

__KERNEL__ void StraightFlagstoneTilesFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   SCROLLING = params->SCROLLING;
  bool   GLOW = params->GLOW;
  bool   ANIMATED = params->ANIMATED;
  bool   Adjust1 = params->Adjust1;
  bool   Adjust2 = params->Adjust2;
  bool   Tex = params->Tex;
  float  SHOW = params->SHOW;
  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float  SCALE = params->SCALE;
  float  SMOOTHNESS = params->SMOOTHNESS;
  float  Adjust3 = params->Adjust3;
  float  Tex_ID = params->Tex_ID;
  float2 Tex_XY = to_float2(params->Tex_XY[0], params->Tex_XY[1]);
  float  Tex_Scale = params->Tex_Scale;

  // --------

    bool Adjust_On = true;

    float2 uv = (2.0f*fragCoord - iResolution) / iResolution.y;

    uv *= SCALE;

    if(SCROLLING)
      uv += to_float2(0.7f, 0.5f) * iTime;

    if(iMouse.z>0.0f)
      uv+= (1.0f-swi2(iMouse,x,y)/iResolution)*10.0f;


    float2 fl = _floor(uv);
    float2 fr = fract_f2(uv);

    bool ch = mod_f(fl.x + fl.y, 2.0f) > 0.5f;

    float r1 = randSpan(fl, iTime, ANIMATED);
    float2 ax = ch ? swi2(fr,x,y) : swi2(fr,y,x);

    float a1 = ax.x - r1;
    float si = sign_f(a1);
    float2 o1 = ch ? to_float2(si, 0) : to_float2(0, si);

    float r2 = randSpan(fl + o1, iTime, ANIMATED);
    float a2 = ax.y - r2;

    float2 st = step(to_float2_s(0), to_float2(a1, a2));

    // Tile ID
    float2 of = ch ? swi2(st,x,y) : swi2(st,y,x);
    float2 id = fl + of - 1.0f;

    bool ch2 = mod_f(id.x + id.y, 2.0f) > 0.5f;

    // Get the random spans
    float r00 = randSpan(id + to_float2(0, 0),iTime,ANIMATED);
    float r10 = randSpan(id + to_float2(1, 0),iTime,ANIMATED);
    float r01 = randSpan(id + to_float2(0, 1),iTime,ANIMATED);
    float r11 = randSpan(id + to_float2(1, 1),iTime,ANIMATED);

    // Tile Size
    float2 s0 = ch2 ? to_float2(r00, r10) : to_float2(r01, r00);
    float2 s1 = ch2 ? to_float2(r11, r01) : to_float2(r10, r11);
    float2 s = 1.0f - s0 + s1;

    // UV
    float2 puv = (uv - id - s0) / s;

    // Border Distance
    float2 b = (0.5f - abs_f2(puv - 0.5f)) * s;

    float d = smin(b.x, b.y, SMOOTHNESS);
    float l = smoothstep(0.02f, 0.06f, d);

    // **** Shading ****

    // Highlights
    float2 hp = (1.0f - puv) * s;
    float h = smoothstep(0.08f, 0.0f, _fmaxf(smin(hp.x, hp.y, SMOOTHNESS), 0.0f));

    // Shadows
    float2 sp = puv * s;
    float sh = smoothstep(0.05f, 0.12f, _fmaxf(smin(sp.x, sp.y, SMOOTHNESS), 0.0f));

    // Texture
    float3 tex = pow_f3(swi3(_tex2DVecN(iChannel0,puv.x,puv.y,15),x,y,z), to_float3_s(2.2f));

    // Random Color
    float3 col = palette(hash12(id), Adjust3, swi3(Color2,x,y,z), swi3(Color3,x,y,z));

    col *= tex;
    col *= (to_float3_aw(puv, 0) * 0.6f + 0.4f);
    col *= sh * 0.8f + 0.2f;
    col += h * swi3(Color1,x,y,z);//to_float3(0.9f, 0.7f, 0.5f);
    col *= l * 5.0f;


    if(Tex)
    {
       if(Tex_ID >= hash12(id))
       {  //col = swi3(texture(iChannel1, ((fragCoord/iResolution)+Tex_XY)*Tex_Scale),x,y,z);
          col = swi3(texture(iChannel1, ((puv)+Tex_XY)*Tex_Scale),x,y,z);
          Adjust_On = false;
       }
    }


    // **** Defines ****
    if(GLOW)
    {
      float2 gv = (1.1f - fragCoord / iResolution) * iResolution.x / iResolution.y;
      col += _powf(0.12f / length(gv), 1.5f) * to_float3(1.0f, 0.8f, 0.4f);
    }

    if (SHOW == 4) //#ifdef SHOW_ID
      col = to_float3_aw(id, 0);
    else if (SHOW == 3) //#ifdef SHOW_UV
      col = to_float3_aw(puv, 0);
    else if (SHOW == 2) //#ifdef SHOW_GRID
    {
      float2 g = 0.5f - abs_f2(fr - 0.5f);
      float grid = smoothstep(0.03f, 0.02f, _fminf(g.x, g.y));
      col = _mix(col, to_float3(0.2f, 0.9f, 1), grid);
    }
    else if (SHOW == 1) //#ifdef SHOW_CHECKER
      col = _mix(col, (ch ? to_float3(1, 0.2f, 0.2f) : to_float3(0.2f, 1, 0.2f)), 0.2f);


    // Tonemapping and Gamma Correction
    col = _fmaxf(col, to_float3_s(0));
    if (Adjust1 && Adjust_On) col = col / (1.0f + col);
    if (Adjust2 && Adjust_On) col = pow_f3(col, to_float3_s(1.0f/2.2f));
    fragColor = to_float4_aw(col, 1);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}

]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InSCROLLINGCheckbox = self:AddInput("SCROLLING", "SCROLLING", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InGLOWCheckbox = self:AddInput("GLOW", "GLOW", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InANIMATEDCheckbox = self:AddInput("ANIMATED", "ANIMATED", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InAdjust1Checkbox = self:AddInput("Adjust1", "Adjust1", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InAdjust2Checkbox = self:AddInput("Adjust2", "Adjust2", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InTexCheckbox = self:AddInput("Tex", "Tex", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InSHOWButton = self:AddInput("SHOW", "SHOW", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "MultiButtonControl",
      MBTNC_ForceButtons = true,
      MBTNC_ShowName     = false,
      { MBTNC_AddButton  = " Normal", }, { MBTNC_AddButton  = " CHECKER", },  { MBTNC_AddButton  = " GRID", },  { MBTNC_AddButton  = " ID", },  { MBTNC_AddButton  = " UV", }, 
		  MBTNC_StretchToFit = true,
      IC_NoLabel         = true,
		  INP_Default        = 0,
      IC_Visible         = true,
  })

self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.9, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.7, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.9, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 0.1, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.05, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.1, IC_ControlID = 2, attrs})

  self:EndControlNest()
self:EndControlNest()

  InSCALESlider = self:AddInput("SCALE", "SCALE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 4.0,
      })

  InSMOOTHNESSSlider = self:AddInput("SMOOTHNESS", "SMOOTHNESS", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.15,
      })

  InAdjust3Slider = self:AddInput("Adjust3", "Adjust3", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.0,
      })

  InTex_IDSlider = self:AddInput("Tex_ID", "Tex_ID", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -100.0,
          INP_MaxScale       = 100.0,
          INP_Default        = 0.0,
      })

  InTex_XYPoint = self:AddInput("Tex_XY", "Tex_XY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InTex_ScaleSlider = self:AddInput("Tex_Scale", "Tex_Scale", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })



  Sep3 = self:AddInput(string.rep("_", 52), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Main = 2, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


  node = DVIPComputeNode(req,
    "StraightFlagstoneTilesFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.SCROLLING = InSCROLLINGCheckbox:GetValue(req).Value
  params.GLOW = InGLOWCheckbox:GetValue(req).Value
  params.ANIMATED = InANIMATEDCheckbox:GetValue(req).Value
  params.Adjust1 = InAdjust1Checkbox:GetValue(req).Value
  params.Adjust2 = InAdjust2Checkbox:GetValue(req).Value
  params.Tex = InTexCheckbox:GetValue(req).Value
  params.SHOW = InSHOWButton:GetValue(req).Value
  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value
  }
  params.SCALE = InSCALESlider:GetValue(req).Value
  params.SMOOTHNESS = InSMOOTHNESSSlider:GetValue(req).Value
  params.Adjust3 = InAdjust3Slider:GetValue(req).Value
  params.Tex_ID = InTex_IDSlider:GetValue(req).Value
  params.Tex_XY = {InTex_XYPoint:GetValue(req).X,InTex_XYPoint:GetValue(req).Y}
  params.Tex_Scale = InTex_ScaleSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O

  node:SetParamBlock(params)
  --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  DefineEdges(edges, node)
    
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
  node:AddOutput("dst", dst)
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end

-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end

-- */
