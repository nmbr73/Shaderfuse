--[[--/*

  AlienSpaceJockey.fuse

  Based on https://www.shadertoy.com/view/mdB3Rh a WebGL shader created by dean_the_coder.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  int    iFrame;
  float  Color1[4];
  float  Color2[4];
  float  Color3[4];
  float  Dist;
  float  ViewXY[2];
  float  ViewZ;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)
 #define fract_f4(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))

 #define sin_f4(i) sin(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define mod_f(a,b) _fmod(a,b)
 #define sin_f4(i) sin(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_CUDA)
   #define radians(a) a * M_PI/180.0f
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define sin_f4(i) to_float4( _sinf((i).x), _sinf((i).y), _sinf((i).z), _sinf((i).w))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)


// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------


// 'Space Jockey' dean_the_coder (Twitter: @deanthecoder)
// https://www.shadertoy.com/view/mdB3Rh (YouTube: https://youtu.be/6ZFq3TlvHBA)
//
// Processed by 'GLSL Shader Shrinker'
// (https://github.com/deanthecoder/GLSLShaderShrinker)
//
// Another Alien scene to add to my collection. :)
// I nearly gave up on this one several times as modelling
// all the details was a bit daunting, but I'm glad I
// perservered to the end.
//
// Tricks to try to improve performance:
//   - Precalculate function results and simplify calculations
//     when possible (see GLSL Shader Shrinker).
//   - Noise functions called once in the lighting code,
//     and re-used multiple times.
//   - Bounding shapes are applied to each part of the scene
//     so the SDF calculations can return early if the ray
//     position is deemed too far away to warrant calculating
//     the fine details.
//
// Thanks to Evvvvil, Flopine, Nusan, BigWings, Iq, Shane,
// totetmatt, Blackle, Dave Hoskins, byt3_m3chanic, tater,
// and a bunch of others for sharing their time and knowledge!

// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License

//#define SKY_RGB  to_float3(0.5f, 0.6f, 0.65f)
#define R  iResolution
#define Z0  _fminf(iTime, 0.0f)
#define I0  _fminf(iFrame, 0)
#define sat(x)  clamp(x, 0.0f, 1.0f)
#define S(a, b, c)  smoothstep(a, b, c)
#define S01(a)  S(0.0f, 1.0f, a)


__DEVICE__ float min2(float2 v) { return _fminf(v.x, v.y); }

__DEVICE__ float max2(float2 v) { return _fmaxf(v.x, v.y); }

__DEVICE__ float max3(float3 v) { return _fmaxf(v.x, _fmaxf(v.y, v.z)); }

__DEVICE__ float sum2(float2 v) { return dot(v, to_float2_s(1)); }

__DEVICE__ float h31(float3 p3) {
  p3 = fract_f3(p3 * 0.1031f);
  p3 += dot(p3, swi3(p3,y,z,x) + 333.3456f);
  return fract(sum2(swi2(p3,x,y)) * p3.z);
}

__DEVICE__ float h21(float2 p) { return h31(swi3(p,x,y,x)); }

__DEVICE__ float n31(float3 p) {
  // Thanks Shane - https://www.shadertoy.com/view/lstGRB
  const float3 s = to_float3(7, 157, 113);
  float3 ip = _floor(p);
  p = fract_f3(p);
  p = p * p * (3.0f - 2.0f * p);
  float4 h = to_float4(0, s.y, s.z, sum2(swi2(s,y,z))) + dot(ip, s);
  h = _mix(fract_f4(sin_f4(h) * 43758.545f), fract_f4(sin_f4(h + to_float4_s(s.x)) * 43758.545f), p.x);
  swi2S(h,x,y, _mix(swi2(h,x,z), swi2(h,y,w), p.y));
  return _mix(h.x, h.y, p.z);
}

// Two n31 results from two scales.
__DEVICE__ float2 n331(float3 p) {
  const float2 s = to_float2(20, 38);
  float2 ns;
  //for (int i = 0; i < 2; i++)
    //ns[i] = n31(p * s[i]);
  ns.x = n31(p * s.x);
  ns.y = n31(p * s.y);

  return ns;
}

__DEVICE__ float n21(float2 p) { return n31(to_float3_aw(p, 1)); }

__DEVICE__ float smin(float a, float b, float k) {
  float h = sat(0.5f + 0.5f * (b - a) / k);
  return _mix(b, a, h) - k * h * (1.0f - h);
}

__DEVICE__ mat2 rot(float a) {
  float c = _cosf(a),
        s = _sinf(a);
  return to_mat2(c, s, -s, c);
}

__DEVICE__ float3 ax(float3 p) { return to_float3(_fabs(p.x) - 0.18f, p.y, p.z); }

__DEVICE__ float opRep(float p, float c) {
  float c2 = c * 0.5f;
  return mod_f(p + c2, c) - c2;
}

__DEVICE__ float2 opModPolar(float2 p, float n, float o) {
  float angle = 3.141f / n,
        a = mod_f(_atan2f(p.x, p.y) + angle + o, 2.0f * angle) - angle;
  return length(p) * to_float2(_cosf(a), _sinf(a));
}

__DEVICE__ float3 bend(float3 p, float k) {
  float c = _cosf(k * p.x);
  float s = _sinf(k * p.x);
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2(c, s, -s, c)));
  return p;
}

__DEVICE__ float box(float3 p, float3 b) {
  float3 q = abs_f3(p) - b;
  return length(_fmaxf(q, to_float3_s(0.0f))) + _fminf(max3(q), 0.0f);
}

__DEVICE__ float box2(float2 p, float2 b) {
  float2 q = abs_f2(p) - b;
  return length(_fmaxf(q, to_float2_s(0.0f))) + _fminf(max2(q), 0.0f);
}

__DEVICE__ float cyl(float3 p, float2 hr) {
  float2 d = abs_f2(to_float2(length(swi2(p,z,y)), p.x)) - hr;
  return _fminf(_fmaxf(d.x, d.y), 0.0f) + length(_fmaxf(d, to_float2_s(0.0f)));
}

__DEVICE__ float cap(float3 p, float h, float r) {
  p.x -= clamp(p.x, -h, 0.0f);
  return length(p) - r;
}

__DEVICE__ float capTor(float3 p, float2 sc, float r) {
  p.x = _fabs(p.x);
  return _sqrtf(dot(p, p) + r * r - 2.0f * r * (sc.y * p.x > sc.x * p.y ? dot(swi2(p,x,y), sc) : length(swi2(p,x,y))));
}

__DEVICE__ float tor(float3 p, float2 t) {
  float2 q = to_float2(length(swi2(p,y,z)) - t.x, p.x);
  return length(q) - t.y;
}

__DEVICE__ float3 rayDir(float3 ro, float2 uv) {
  float3 f = normalize(to_float3(0, -1, 0) - ro),
       r = normalize(cross(to_float3(0, 1, 0), f));
  return normalize(f + r * uv.x + cross(f, r) * uv.y);
}

__DEVICE__ float walls(float3 p) {
  p.y -= 6.0f;

  // Walls.
  float d = 10.75f - length(swi2(p,y,z));

  // Ray too far away - Bail early.
  if (d > 5.0f) return d;

  // Wobbles.
  float ox = p.x;
  p.x = opRep(p.x - 5.0f, 6.0f);
  float a = _atan2f(p.y, p.z);
  d -= 0.01f * _sinf(a * 172.0f);
  d -= 0.1f * _cosf(p.x * p.x * 0.7f);

  // Main pipes.
  p.x = _fabs(p.x) - 0.7f;
  float f = S(0.5f, 1.0f, _sinf(a * 250.0f));
  f = tor(p, to_float2(10, f * -0.03f + 0.5f));

  // Side pipe.
  p.x -= 0.5f;
  f = _fminf(f, tor(p, to_float2(9.7f, 0.15f)));

  // Ball bones.
  swi2S(p,z,y, opModPolar(swi2(p,z,y), 30.0f, 0.0f));
  p.z -= 10.8f;
  p.y = _fabs(p.y) - 0.5f;
  p = bend(p, 0.11f * p.x * _sinf(12.0f * (a + _floor(ox / 2.0f))));
  p.x -= 1.4f;
  return smin(_fminf(d, smin(length(p) - 0.25f, cap(p, 1.5f, 0.2f), 0.1f)), f, 1.0f);
}

__DEVICE__ float dais(float3 p) {
  float a = _atan2f(p.z, p.x);
  float l = length(swi2(p,x,z));

  // Inner column.
  float2 q = to_float2(l, p.y);
  float d = box2(q, to_float2(1.2f - _fabs(_sinf(a * 20.0f)) * 0.02f, 0.8f));

  // Ray too far away - Bail early.
  if (d > 4.0f) return d;

  // Middle ring.
  float l40 = _fabs(_sinf(l * 40.0f));
  d = _fminf(d, box2(q - to_float2(2.8f, -0.2f), to_float2(0.16f, 0.7f + l40 * 0.01f)));

  // Radial pipes.
  float3 v = p;
  swi2S(v,x,z, opModPolar(swi2(p,x,z), 8.0f, 0.2f));
  d = smin(d, length(swi2(v,y,z) - to_float2(0.5f, 0)) - 0.15f - l40 * 0.01f, 0.1f);

  // Radial struts.
  swi2S(v,x,z, opModPolar(swi2(p,x,z), 32.0f, 0.0f));
  v.z = _fabs(v.z) - 0.05f;
  d = _fminf(d, box2(swi2(v,y,z) - to_float2(0.2f, 0), to_float2(0.2f, 0)));

  // Clip content to dais radius.
  d = _fmaxf(d, l - 4.12f);

  // Geared outer ring.
  d = _fminf(d, box2(q - to_float2(4, -0.1f), to_float2(0.28f - S01(_sinf(a * 130.0f)) * 0.03f, 0.7f + l40 * 0.02f * step(l, 4.16f))));

  // Round edges off.
  return d - 0.03f;
}

__DEVICE__ float chair(float3 p) {
  p.y--;
  float3 op = p;

  // Mounting struts.
  float d = cyl(ax(p) - to_float3(0, 0, 0.1f), to_float2(1, S01(0.5f - p.y) * 0.2f + 0.06f));
  d += 0.005f * S(0.0f, 0.03f, _fabs(_fabs(p.y - 0.3f) - 0.3f));
  d = smin(d, p.y - 0.7f, -0.05f);

  // Ray too far away - Bail early.
  if (d > 3.0f) return d;

  // Primary base exhaust.
  p.x = _fabs(p.x);
  p.y += 0.3f * S(0.8f, 1.6f, p.x) * _sinf(p.x * 1.9f);
  float f = cyl(p - to_float3(0.8f, 0.12f, 0.7f), to_float2(0.2f, 1));
  f = _fabs(f) - 0.005f;
  f += 0.05f * S(0.04f, -0.16f, _fabs(p.y - 0.2f));
  float q = length(p - to_float3(1.8f, 0.3f, 0.85f));
  f = smin(f, 0.2f - q, -0.1f);
  f += 0.01f * S(0.0f, 0.03f, _fabs(q - 0.35f));

  // Seconardy pipe.
  q = S(0.2f, 0.9f, -op.x);
  f = smin(f, cap(p - to_float3(0.7f, 0.4f - q * 0.25f, 0.6f), 0.8f, 0.15f), 0.1f * q);
  d = _fminf(d, f);

  // Central tube.
  f = cyl(op - to_float3(0.7f, 0.3f, 0), to_float2(0.3f, 1.2f)) - 0.1f;

  // Toral pipe.
  f = _fmaxf(f, 0.44f - length(swi2(op,x,y) - to_float2(1.55f, 1)));
  p = swi3(op,z,y,x) - to_float3(0, 0.25f, 0.94f);
  f = _fminf(f, _fmaxf(tor(p, to_float2(0.83f, 0.08f - 0.005f * _fabs(_sinf(_atan2f(p.y, p.z) * 40.0f)))), -p.z));

  // Organic scope mount.
  p = bend(op, -0.08f * p.y);
  f = smin(f, box(p - to_float3(0.75f, 1.45f, 0), to_float3(0.2f - p.y * 0.1f, 1, 0.1f)) - 0.15f - _fabs(_sinf(p.y * 10.0f) * 0.01f), 0.12f);
  d = _fminf(d, f);

  // Chair back.
  p = op;
  p.y -= 1.74f;
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2(-0.80114f, 0.59847f, -0.59847f, -0.80114f)));
  float a = _atan2f(p.x, p.y);
  float l = length(p);
  f = sat(_sinf(a * 1e2) - 0.6f);
  f *= S(1.6f, 1.1f, l);
  const float2 v = to_float2(0.64422f, 0.76484f);
  d = _fminf(d, capTor(p, v, 1.56f) - 0.5f - 0.02f * S(0.7f, 0.75f, a) - 0.02f * f);
  f = length(swi2(p,x,y) - to_float2(1.35f, 0));
  d = smin(d, 1.0f - f, -0.04f);
  f *= S(0.99f, 0.95f, f) * 0.4f;
  f *= S(0.25f, 0.1f, _fabs(p.x - 1.15f));
  d -= 0.05f * (S(0.2f, 0.1f, p.z) + _sinf(p.x * 50.0f) * f);

  // Chair side pipe.
  f = _sinf(a * 50.0f);
  d = _fminf(d, capTor(p - to_float3(0, 0, 0.5f), v, 1.56f) - 0.05f - 0.01f * f * f);
  d = _fminf(d, capTor(p - to_float3(0, 0, 0.5f), v, 1.5f) - 0.02f);

  // Torso.
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2(0.98007f, 0.19867f, -0.19867f, 0.98007f)));
  f *= S(0.0f, 0.15f, p.z);
  d = _fminf(d, capTor(p, v, 1.25f) - 0.36f - f * 0.015f);

  // Shoulders.
  p -= to_float3(0.74f, 0.9f, 0.28f);
  d = _fminf(d, length(p) - 0.16f);

  // Arms.
  p.z -= 0.075f;
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , rot(_mix(0.06f, -0.24f, S(0.15f, -0.6f, op.x)))));
  f = 0.086f - f * f * 0.002f * S(0.3f, 0.5f, -op.x);
  f += 0.03f * S(0.35f, 0.05f, _fabs(p.x + 0.3f));
  f = cap(p, 1.4f, f);
  a = _atan2f(p.y, p.z);
  f += 0.01f * _sinf(a * 6.5f) * S(1.3f, 0.0f, _fabs(p.x));
  f += 0.007f * _sinf(a * 9.0f) * S(0.035f, 0.3f, op.x);
  d = _fminf(d, f);

  // Head.
  p = op;
  p -= to_float3(-1, 1.5f, 0);
  f = _mix(box(p, to_float3(0.25f, 0.28f, 0.26f)), length(p) - 0.23f, 0.9f);
  swi2S(p,x,y, mul_f2_mat2(swi2(op,x,y) , to_mat2(0.07074f, -0.99749f, 0.99749f, 0.07074f)));
  return smin(d, _fmaxf(smin(f, capTor(p + to_float3(1, 1.46f, 0), v, 1.0f) - 0.04f, 0.16f), 0.05f - length(swi2(p,x,z) - to_float2(-1.6f, 0.15f))), 0.3f * S(-1.5f, -1.0f, p.x)) - 0.02f;
}

__DEVICE__ float mount(float3 p, float x, float a) {
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , rot(-0.15f - a)));
  p = swi3(p,z,y,x) * to_float3(-1, 1, 1);
  float d = cap(p, 0.3f, 0.1f);
  p.x += 0.3f;
  p = swi3(p,y,x,z);
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , rot(a)));
  float3 v = to_float3(p.y + 0.176f, opRep(p.x, 0.08f), p.z - 0.11f);
  float q = 1.1f + x;
  d = smin(d, cap(p, q, 0.1f), 0.04f);
  p.x += q;
  p = swi3(p,z,y,x);
  swi2S(p,x,z, mul_f2_mat2(swi2(p,x,z) , to_mat2(0.87758f, 0.47943f, -0.47943f, 0.87758f)));
  d = smin(d, cap(p, 0.3f, 0.1f), 0.04f);
  p.x += 0.3f;
  swi2S(p,x,z, mul_f2_mat2(swi2(p,x,z) , to_mat2(0.5403f, -0.84147f, 0.84147f, 0.5403f)));
  d = smin(d, cap(p, 0.1f, 0.1f), 0.04f);
  d = smin(d, -p.y - 0.09f, -0.003f);

  // Square cut-outs.
  return _fmaxf(d, -box(v, to_float3(0.1f, 0.02f, 0.1f)));
}

__DEVICE__ float mounts(float3 p) {
  float d = mount(p - to_float3(0.9f, 2.95f, 0), 0.2f, 0.05f);

  // Ray too far away - Bail early.
  if (d > 3.0f) return d;
  return _fminf(_fminf(d, mount(p - to_float3(1.2f, 3.1f, 0), 0.3f, 0.1f)), mount(p - to_float3(1.5f, 3.2f, 0), -0.2f, 0.2f));
}

__DEVICE__ float scope(float3 p) {
  p.y -= 2.9f;
  swi2S(p,x,y, mul_f2_mat2(swi2(p,x,y) , to_mat2(-0.89676f, -0.44252f, 0.44252f, -0.89676f)));
  float3 op = p;

  // Barrel.
  float a = _atan2f(p.y, p.z);
  float f = 0.005f * sat(-_sinf(a * 24.0f + 3.141f));
  f = _fmaxf(f, 0.04f * S(0.2f, 0.0f, p.x + 2.9f - p.y * 0.4f));
  p.y += 0.8f * S01(p.y + 0.3f) * S(1.0f, 0.0f, p.x + 3.8f);
  float d = cap(p, 3.2f, 0.4f + f);

  // Ray too far away - Bail early.
  if (d > 1.0f) return d;

  // Side pipes.
  p.y = _fabs(p.y);
  swi2S(p,z,y, opModPolar(swi2(p,z,y), 9.0f, 0.0f));
  p -= to_float3(-0.4f, 0, 0.35f);
  d = _fminf(d, cap(p, 2.6f, 0.07f + _fabs(_sinf(p.x * 90.0f)) * 0.004f));

  // End Bulge.
  p = swi3(op,z,y,x);
  d = smin(d, cyl(p + to_float3(0, 0.2f, 0), to_float2(0.4f, 0.4f - _fabs(p.y) * 0.6f)), 0.3f);

  // Viewscreen.
  swi2S(p,y,z, swi2(p,y,z) + to_float2(0.1f, -1.23f));
  return _fminf(d, smin(cyl(p, to_float2(0.8f, 0.2f)), -cyl(p - to_float3(0, 0, 1.12f), to_float2(1.8f, 1)), -0.14f));
}

__DEVICE__ float map(float3 p) {
  float d = walls(p);
  p.y += 2.8f;
  d = _fminf(d, dais(p));
  swi2S(p,x,z, mul_f2_mat2(swi2(p,x,z) , to_mat2(0.76484f, -0.64422f, 0.64422f, 0.76484f)));
  p.z = _fabs(p.z);
  return _fminf(_fminf(_fminf(d, chair(p)), scope(p)), mounts(p));
}

__DEVICE__ float3 N(float3 p, float t) {

  float h = t * 0.1f;
  float3 n = to_float3_s(0);
  for (int i = 0; i < 4; i++) {
    float3 e = 0.005773f * (2.0f * to_float3(((i + 3) >> 1) & 1, (i >> 1) & 1, i & 1) - 1.0f);
    n += e * map(p + e * h);
  }

  return normalize(n);
}

__DEVICE__ float shadow(float3 p, float3 ld, float3 n) {
  // Quick abort if light is behind the normal.
  if (dot(ld, n) < -0.1f) return 0.0f;
  float d,
        s = 1.0f,
        t = 0.05f;
  float mxt = length(p - to_float3(-20, 3, 3));
  for (float i = 0; i < 30.0f; i++) {
    d = map(t * ld + p);
    s = _fminf(s, 15.0f * d / t);
    t += _fmaxf(0.03f, d);
    if (mxt - t < 0.5f || s < 0.001f) break;
  }

  return S01(s);
}

// Quick 2-level ambient occlusion.
__DEVICE__ float ao(float3 p, float3 n) {
  const float2 h = to_float2(0.1f, 2);
  float2 ao;
  //for (int i = 0; i < 2; i++)
  //  ao[i] = map(h[i] * n + p);

  ao.x = map(h.x * n + p);
  ao.y = map(h.y * n + p);

  return sat(min2(ao / h));
}

// Sub-surface scattering. (Thanks Evvvvil)
__DEVICE__ float sss(float3 p, float3 ld) { return S01(map(1.0f * ld + p)); }

__DEVICE__ float fog(float3 p) {
  float d = _fabs(p.x);
  d += 20.0f * S(-1.3f, -4.0f, p.y) * (0.7f + 0.3f * n21(swi2(p,x,z) * 2.0f));
  return _expf(d * d * -2e-4);
}

__DEVICE__ float3 lights(float3 p, float3 rd, float3 n, float3 SKY_RGB, float3 Colors[2]) {
  float2 ns = n331(p); // Cache noise.
  float3 ld = normalize(to_float3(-20, 3, 3) - p),
       c = Colors[0];//to_float3(0.5f, 0.8f, 1);
  c *= 0.3f - sum2(ns) * 0.06f;
  c += sss(p, ld) * 0.1f;

  float y = S(1.8f, 0.0f, length(p));
  y *= S(0.0f, -0.2f, p.y + p.x + 0.7f);
  c *= 1.0f + to_float3(21, 19, 13) * (dot(ns, ns) * 0.6f + 0.4f) * y;

  // Adjust specular power and brightness.
  y = sat(y * 6.0f);
  float sh1 = _mix(2e2f, 10.0f, y);
  float sh2 = _mix(5.0f, 0.3f, y);
  sh2 *= 0.8f * ns.x * ns.y + 0.2f;
  float3 l = sat(to_float3(dot(ld, n),  // Key light.
                           dot(-1.0f*swi2(ld,x,z), swi2(n,x,z)),  // Reverse light.
                           n.y // Sky light.
                           ));
  swi2S(l,x,y, 0.1f + 0.9f * swi2(l,x,y)); // Diffuse.
  swi2S(l,y,z, swi2(l,y,z) * 0.1f + 0.9f * ao(p, n)); // Ambient occlusion.
  l *= to_float3(0.05f + 0.95f * S(3.0f, -10.0f, p.x), 0.05f, 0.02f); // Light contributions (key, reverse, sky).
  l.x += _powf(sat(dot(normalize(ld - rd), n)), sh1) * sh2; // Specular (Blinn-Phong)
  l.x *= 0.05f + 0.95f * shadow(p, ld, n); // Shadow.
  //return _mix((sum2(swi2(l,x,y)) * to_float3(0.6f, 0.51f, 0.42f) + l.z * SKY_RGB) * c, SKY_RGB, S(0.6f, 1.0f, 1.0f + dot(rd, n)) * 0.02f);
  return _mix((sum2(swi2(l,x,y)) * Colors[1] + l.z * SKY_RGB) * c, SKY_RGB, S(0.6f, 1.0f, 1.0f + dot(rd, n)) * 0.02f);
}

__DEVICE__ float addFade(float a, float t) { return _fminf(1.0f, _fabs(t - a)); }

__DEVICE__ float3 scene(float3 p, float3 rd, float3 SKY_RGB, float3 Colors[2]) {
  // March the scene.
  float i, h,
        d = 1.0f;
  for (i = 0; i < 120.0f; i++) {
    h = map(p);
    if (_fabs(h) < 2e-4 * d || d > 40.0f) break;
    d += h;
    p += h * rd;
  }

  float3 col = _mix(SKY_RGB, lights(p, rd, N(p, d), SKY_RGB, Colors), fog(p));

  // Gamma.
  return pow_f3(_fmaxf(to_float3_s(0), col), to_float3_s(0.4545f));
}

__KERNEL__ void AlienSpaceJockeyFuse(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fc   = to_float2(fusion_x,fusion_y);


  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float4 Color3 = to_float4(params->Color3[0], params->Color3[1], params->Color3[2], params->Color3[3]);
  float  Dist = params->Dist;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;

  // --------

  float3 SKY_RGB = swi3(Color1,x,y,z);

  float3 Colors[2] = {swi3(Color2,x,y,z), swi3(Color3,x,y,z)};

  float t = mod_f(iTime, 30.0f);
  float2 uv = (fc - 0.5f * swi2(R,x,y)) / R.y;
  float3 ro = _mix(to_float3(-1, -1, -7), to_float3(-1.1f, -1.8f, -3), S(0.0f, 15.0f, t));



  //----------- Kameraposition mit Maus steuerbar ---------------
  float fAngle = (iMouse.x / iResolution.x - 0.0f);// * radians(360.0f);
  float fElevation = (iMouse.y / iResolution.y - 0.5f);// * radians(90.0f);
  float fDist = Dist;//1.0f;
  float3 camPos = to_float3(_sinf(fAngle) * fDist * _cosf(fElevation), _sinf(fElevation) * fDist, _cosf(fAngle) * fDist * _cosf(fElevation));

  ro += to_float3_aw(ViewXY, ViewZ);

  float f = S(15.0f, 30.0f, t);
  if (f > 0.0f) ro = to_float3(1.0f - f * 4.0f, _cosf(f * 6.283f) + 0.5f, -3);
  float3 col = scene(ro, rayDir(ro+camPos, uv), SKY_RGB, Colors);

  // Blue tint.
  col = pow_f3(col * 1.2f, to_float3(1.2f, 1.1f, 1));

  // Vignette.
  col *= 1.0f - 0.3f * dot(uv, uv);

  // Grain.
  col += (h21(fc) - 0.5f) / 20.0f;
  fragColor = to_float4_aw(col * addFade(0.0f, t) * addFade(15.0f, t), 1.0f);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })

  self:BeginControlNest("Colors", "Colors", true, {})
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 0.65, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color3", "Color3", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color3",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor3ColorR = self:AddInput("Red",   "Color3Red",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InColor3ColorG = self:AddInput("Green", "Color3Green", { INP_Default  = 0.51, IC_ControlID = 1, attrs})
    InColor3ColorB = self:AddInput("Blue",  "Color3Blue",  { INP_Default  = 0.42, IC_ControlID = 2, attrs})
    InColor3ColorA = self:AddInput("Alpha", "Color3Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  self:EndControlNest()

  InDistSlider = self:AddInput("Dist", "Dist", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })



  Sep3 = self:AddInput(string.rep("_", 252), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end



  node = DVIPComputeNode(req,
    "AlienSpaceJockeyFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}


  params = node:GetParamBlock(ShaderParameters)


  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iFrame = req.Time

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Color3 = {
    InColor3ColorR:GetValue(req).Value,
    InColor3ColorG:GetValue(req).Value,
    InColor3ColorB:GetValue(req).Value,InColor3ColorA:GetValue(req).Value
  }
  params.Dist = InDistSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution



  node:SetParamBlock(params)
  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
      
  node:AddOutput("dst", dst)
  
  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
