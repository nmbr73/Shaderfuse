--[[--/*

  DullSkull.fuse

  Based on https://www.shadertoy.com/view/3XXXzN a WebGL shader created by JiPi.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  int    iFrame;
  float  SHADE;
  float  ColorGolden[4];
  float  ColorZombie[4];
  float  ViewDXY[2];
  float  ViewDZ;
  float  ViewXY[2];
  float  ViewZ;
  float  Alpha;
  float  Fog;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define abs_f3(a) _fabs(a)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define abs_f3(a) fabs(a)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif

__DEVICE__ float4 decube_f3(__TEXTURE2D__ t, float3 xyz)
{
  float ax=_fabs(xyz.x);
  float ay=_fabs(xyz.y);
  float az=_fabs(xyz.z);

  if (xyz.x>0.0f && ax>=ay && ax>=az) // +X, Face 0, right
    return _tex2DVecN(t,(-xyz.z/ax+1.0f)/8.0f + 0.5f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y>0.0f && ay>=ax && ay>=az) // +Y, Face 2, top
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(-xyz.z/ay+1.0f)/6.0f + (2.0f/3.0f),15);

  if (xyz.z>0.0f && az>=ax && az>=ay) // +Z, Face 4, front
    return _tex2DVecN(t,(xyz.x/az+1.0f)/8.0f + 0.25f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.x<0.0f && ax>=ay && ax>=az) // -X, Face 1, left
    return _tex2DVecN(t,(xyz.z/ax+1.0f)/8.0f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y<0.0f && ay>=ax && ay>=az) // -Y, Face 3, bottom
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(xyz.z/ay+1.0f)/6.0f,15);

  if (xyz.z<0.0f && az>=ax && az>=ay) // -Z, Face 5, back
    return _tex2DVecN(t,(-xyz.x/az+1.0f)/8.0f + 0.75f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  return to_float4(1.0f,0.0f,0.0f,1.0f); // error
}


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------

__DEVICE__ float _powcf(float x, float y) {
    float ret = _powf(x,y);
    if (isnan(ret)) {
        ret = 0.0001f;
    }
    return ret;
}



#define MAX_STEPS 64
#define MAX_DIST 12.0f
#define SURF_DIST 0.001f
#define TAU 6.283185f
#define PI 3.141592f

//===================================================================//
// below by https://iquilezles.org/

__DEVICE__ float sMin( float d1, float d2, float k ) {
    float h = clamp( 0.5f + 0.5f*(d2-d1)/k, 0.0f, 1.0f );
    return _mix( d2, d1, h ) - k*h*(1.0f-h); }

__DEVICE__ float sMax( float d1, float d2, float k ) {
    float h = clamp( 0.5f - 0.5f*(d2+d1)/k, 0.0f, 1.0f );
    return _mix( d2, -d1, h ) + k*h*(1.0f-h); }

__DEVICE__ float Sphere(float3 p,float s){
    return length(p)-s;
}

__DEVICE__ float Ellipsoid( float3 p, float3 r ){
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0f)/k1;
}

__DEVICE__ float rBox( float3 p, float3 b, float r ){
  float3 q = abs_f3(p) - b;
  return length(_fmaxf(q,to_float3_s(0.0f))) + _fminf(_fmaxf(q.x,_fmaxf(q.y,q.z)),0.0f) - r;
}

__DEVICE__ float Capsule( float3 p, float3 a, float3 b, float r ){
  float3 pa = p - a, ba = b - a;
  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0f, 1.0f );
  return length( pa - ba*h ) - r;
}

__DEVICE__ float HollowSphere( float3 p, float r, float h, float t ){
  float w = _sqrtf(r*r-h*h);
  float2 q = to_float2( length(swi2(p,x,z)), p.y );
  return ((h*q.x<w*q.y) ? length(q-to_float2(w,h)) :
                          _fabs(length(q)-r) ) - t;
}

__DEVICE__ float sdCappedTorus( float3 p, float2 sc, float ra, float rb)
{
  p.x = _fabs(p.x);
  float k = (sc.y*p.x>sc.x*p.y) ? dot(swi2(p,x,y),sc) : length(swi2(p,x,y));
  return _sqrtf( dot(p,p) + ra*ra - 2.0f*ra*k ) - rb;
}

// above by https://iquilezles.org/
//===================================================================//

__DEVICE__ mat2 Rot(float a) {
    float s=_sinf(a), c=_cosf(a);
    return to_mat2(c, -s, s, c);
}

// by https://mercury.sexy/hg_sdf/
__DEVICE__ float2 pModPolar(float2 p, float repetitions) {
    float angle = 2.0f*PI/repetitions,
          a = _atan2f((p).y, (p).x)+angle,
          r = length(p),
          c = _floor(a / angle);
    a = mod_f(a, angle) - angle / 2.0f;
    p = to_float2(_cosf(a), _sinf(a)) * r;
    //if (_fabs(c) >= (repetitions / 2.0f)) c = _fabs(c);
    //return c;
    return p;
}

__DEVICE__ mat2 RotSin(float a, float b, float c){
    mat2 rot = Rot(_sinf(a)*b+c);
    return rot;
}

__DEVICE__ float3 RayDir(float2 uv, float3 p, float3 l, float z) {
    float3
        f = normalize(l-p),
        r = normalize(cross(to_float3(0,1,0), f)),
        u = cross(f,r),
        c = f*z,
        i = c + uv.x*r + uv.y*u;
    return normalize(i);
}

// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Cubemap: Uffizi Gallery_0' to iChannel0


// Fork of "DULL SKULL" by Kris_Katur. https://shadertoy.com/view/DlyyWR
// 2025-04-17 08:33:02

// "Dull Skull"
// 2023
// by KΛTUR

/* license CC BY-NC 4.0f - https://creativecommons.org/licenses/by-nc/4.0f/
 * Author: KΛTUR
 * Original Shader: DULL SKULL
 * You may remix, adapt, and build upon this work for non-commercial
 * purposes, but you must give appropriate credit and indicate
 * changes were made.

=======================================================================

DULL SKULL - Playlist
https://www.shadertoy.com/playlist/c3sXWn

In this shader I explore the intricacies of the human skeleton through
the lens of mathematics, focusing on the skull as a SDF mostly made of
classic linear algebra and constructive solid geometry (Boolean operations).

=======================================================================

CHOOSE FROM DIFFERENT STYLES HERE

0 = MONOCHROME DIFFUSE
1 = FUNKY NORMAL FRESNEL
2 = SPECULAR ZOMBIE
3 = GHOST MODE
4 = GOLDEN REFLEX (Added 2025)
*/

//#define SHADE 4

//===================================================================//

__DEVICE__ float Bone(float3 p,float3 a, float3 b, float delta, float r, float r2, float bb){
    float bone = Capsule(p,a,b,(_fabs((_powcf(p.z-delta,2.0f))))*r2+r);
    p.z -= delta;
    bone = _fmaxf(bone,rBox(p,to_float3_s(bb),0.0f));//bounding box
    return bone;
}

__DEVICE__ float Finger(float3 p, float scale, float iter, float r, float r2, float bb, float angle, float iTime){
  
    float3 a = to_float3_s(0);
    float3 b = to_float3(0,0,1)*scale;
    float delta = (b-a).z;
    swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z) , Rot(angle*0.3f)));
    float fbone = Bone(p,a,b,delta/2.0f,r,r2,bb);
    float eps = 0.1f;
    float dist = (b-a).z;

    for (float i=0.0f;i<iter;i++){
            a.z = b.z+0.08f;
            b.z = a.z+dist;
            delta = a.z+(dist)/2.0f;
            dist -= eps;
            p.z -= a.z;
            swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z) , Rot(angle)));
            p.z += a.z;
            r -= 0.001f;
            fbone = _fminf(fbone,Bone(p,a,b,delta,r,r2,bb));
    }
    return fbone;
}

__DEVICE__ float map(float3 p, float iTime){

    float t = iTime;

// ||||||||||||||||||||============|||||||||||||||||||| //
// ==================== UPPER BODY ==================== //
// ||||||||||||||||||||============|||||||||||||||||||| //

    // ===== SPINE ===== //
    float3 p_spine = p;
    p_spine.y -= _sinf(t*0.1f)*0.3f;
    p_spine.z -= 0.6f+_sinf(t*0.2f)*_sinf(t*0.51f);
    float3 p_vert = p_spine+to_float3(0,0.15f,0);
    float3 sSpine = to_float3(0.13f,0.09f,0.13f);
    float spine = Ellipsoid(p_vert,sSpine);//vertebrae - no anatomical accuracy, just an indication that there are vertebrae :)
    for (float i=0.0f;i<4.0f;i++){
        p_vert.y += 0.2f;
        p_vert.z += i*0.09f;
        spine = _fminf(spine,Ellipsoid(p_vert,sSpine));
    }
    spine -= _sinf(29.0f*p_vert.x)*_sinf(21.0f*p_vert.y)*_sinf(12.0f*p_vert.z*0.003f);//deformation

    // ===== COLLARBONE ===== //
    float side = sign_f(p_spine.x);//side definition

    float3 p_cbone = to_float3(_fabs(p_spine.x),p_spine.y,p_spine.z);
    p_cbone += to_float3(-0.2f,0.9f,0.5f);
    swi2S(p_cbone,x,z, mul_f2_mat2(swi2(p_cbone,x,z) , Rot(1.8f+_sinf(t*0.09f)*0.2f)));
    swi2S(p_cbone,y,z, mul_f2_mat2(swi2(p_cbone,y,z) , Rot(_sinf((side-0.23f)*t*0.6f)*0.2f)));
    float cbone = Bone(p_cbone+_sinf(p_cbone.z*3.0f)*0.1f, to_float3_s(0),to_float3(0,0,1.6f),0.8f,0.04f,0.04f,1.5f);

// ======================  ARMS ====================== //

    // ===== UPPER ARM ===== //
    swi2S(p_cbone,x,z, mul_f2_mat2(swi2(p_cbone,x,z) , Rot(-1.8f-_sinf(t*0.09f)*0.2f)));//invert collarbone transformation
    float3 p_uArm = to_float3(_fabs(p_cbone.x)-1.8f,p_cbone.y+0.1f,p_cbone.z+0.3f);
    float ruAxz = (side-0.59f)*t*0.3f;
    swi2S(p_uArm,x,z, mul_f2_mat2(swi2(p_uArm,x,z) , RotSin(ruAxz,0.2f,0.35f)));
    swi2S(p_uArm,x,y, mul_f2_mat2(swi2(p_uArm,x,y) , RotSin((side-0.19f)*t*0.42f,_sinf(t*0.18f)*0.6f,0.2f)));
    swi2S(p_uArm,y,z, mul_f2_mat2(swi2(p_uArm,y,z) , RotSin((side+0.12f)*t*0.62f,0.2f,0.1f)));
    p_uArm.z -= 1.0f;
    float uABone = Bone(p_uArm,to_float3(0,0,-1),to_float3(0,0,1),0.0f,0.06f,0.09f,1.3f);//bone sdf
    float uArm = sMax(Sphere(p_uArm+to_float3(0.08f,-0.0f,-1.1f),0.13f),uABone,0.2f);//deformation of front end of bone

    // ===== LOWER ARM ===== //
    float3 p_lArm = to_float3(p_uArm.x,p_uArm.y,p_uArm.z-1.1f);
    swi2S(p_lArm,x,z, mul_f2_mat2(swi2(p_lArm,x,z) , RotSin(-ruAxz,0.3f,-0.6f)));
    float t1 = t*0.6f+_sinf(t*0.22f);
    float rlAxySin = (side+0.13f)*t1*0.5f;
    float rlAxyAmo = p_lArm.z*0.3f;
    float rlAxyOff = p_lArm.z*0.7f;
    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , Rot(-0.3f)));
    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , RotSin(rlAxySin,-rlAxyAmo,-rlAxyOff-0.2f)));//crossing Ulna and Radius
    p_lArm.z -= 1.0f;
    float3 p_lArmS = to_float3(_fabs(p_lArm.x)-0.09f,p_lArm.y,p_lArm.z);//mirroring single bone
    p_lArmS.x += (_fabs(_powcf(p_lArmS.z+0.7f,2.0f)))*0.04f;//bending bones
    float3 a = to_float3(0.1f,0,1), b = to_float3(0.0f,0,-1);
    float r2=0.04f, r = 0.03f, bb = 1.5f;
    float lArm = Bone(p_lArmS,a,b,0.0f,r,r2,1.2f);//lower arm
    float arm = _fminf(lArm, uArm);//union upper and lower arm

    // ===== HANDS ===== //
    // CARPUS

    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , RotSin(rlAxySin,rlAxyAmo,rlAxyOff+0.2f)));//inverse the crossing of Ulna and Radius
    float3 p_hand = p_lArm;
    p_hand.z -= 1.1f;//translate anchor point
    float t2 = _sinf(t1)+(side-0.19f)*t1;
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , Rot(1.5f)));
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , RotSin(-rlAxySin,1.0f,0.0f)));
    swi2S(p_hand,y,z, mul_f2_mat2(swi2(p_hand,y,z) , RotSin(t2+1.91f,1.0f,0.45f)));
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , RotSin((side-0.32f)*t1+0.3f,0.1f,0.1f)));
    float hand = Ellipsoid(p_hand,to_float3(0.2f,0.04f,0.1f));//ellipsoid as base
    hand -= (_sinf(27.0f*p_hand.x)+_sinf(37.0f*p_hand.z)*_sinf(19.0f*p_hand.y))*0.015f;//deformation of ellipsoid

    // FINGERS
    float3 pf = to_float3(p_hand.x,p_hand.y,p_hand.z-0.2f);
    r = 0.03f, r2=0.7f, bb=0.5f;

    // POINT
    float3 pf1 = pf;
    swi2S(pf1,x,z, swi2(pf1,x,z) + to_float2(0.13f,0.08f));
    swi2S(pf1,x,z, mul_f2_mat2(swi2(pf1,x,z) , Rot(-0.2f)));
    float fpoint = Finger(pf1,0.3f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.5f)+t2-0.12f)*(_sinf(t2)*0.4f+0.7f)*0.6f-0.7f), iTime);
    // MIDDLE
    float3 pf2 = pf;
    pf2.z += 0.03f;
    swi2S(pf2,x,z, mul_f2_mat2(swi2(pf2,x,z) , Rot(0.0f)));
    swi2S(pf2,x,y, mul_f2_mat2(swi2(pf2,x,y) , Rot(0.2f)));
    float fmiddle = Finger(pf2,0.32f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.3f)+t2-0.2f)*(_sinf(t2)*0.4f+0.7f)*0.7f-0.9f), iTime);
    // RING
    float3 pf3 = pf;
    swi2S(pf3,x,z, swi2(pf3,x,z) - to_float2(0.13f,-0.05f));
    swi2S(pf3,x,z, mul_f2_mat2(swi2(pf3,x,z) , Rot(0.15f)));
    swi2S(pf3,x,y, mul_f2_mat2(swi2(pf3,x,y) , Rot(0.3f)));
    float fring = Finger(pf3,0.3f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.7f)+t2-0.4f)*(_sinf(t2)*0.3f+0.7f)*0.8f-1.0f), iTime);//+_sinf(t*0.7f+0.5f)*0.3f-0.3f);
    // PINKY
    float3 pf4 = pf;
    swi2S(pf4,x,z, swi2(pf4,x,z) - to_float2(0.23f,-0.12f));
    swi2S(pf4,x,z, mul_f2_mat2(swi2(pf4,x,z) , Rot(0.5f)));
    swi2S(pf4,x,y, mul_f2_mat2(swi2(pf4,x,y) , Rot(0.4f)));
    float fpinky = Finger(pf4,0.25f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.9f)+t2)*(_sinf(t2)*0.2f+0.6f)*0.8f-1.0f), iTime);//;+_sinf(t+0.7f)*0.2f-0.4f);
    // THUMB
    float3 pf5 = pf;
    swi2S(pf5,x,z, swi2(pf5,x,z) + to_float2(0.22f,0.2f));
    swi2S(pf5,x,z, mul_f2_mat2(swi2(pf5,x,z) , Rot(-1.2f)));
    swi2S(pf5,x,y, mul_f2_mat2(swi2(pf5,x,y) , Rot(-0.6f)));
    swi2S(pf5,y,z, mul_f2_mat2(swi2(pf5,y,z) , Rot(-0.2f)));
    float thumb = Finger(pf5,0.14f,2.0f,0.035f,r2,bb,(_sinf(t2-0.16f)*(_sinf(t2)*0.6f+0.8f)*0.8f-1.0f), iTime);//+_sinf(t+1.2f)*0.3f-0.15f)*0.8f;

    float fingers = _fminf(fpoint,_fminf(fmiddle,_fminf(fring,_fminf(fpinky,thumb))));//union all fingers

    hand = _fminf(hand, fingers);//union fingers and carpus = hand
    arm = _fminf(hand,_fminf(arm,_fminf(cbone,spine)));//union hand, arm, collarbone and spine



// ||||||||||||||||||||||=======|||||||||||||||||||||| //
// ====================== SKULL ====================== //
// ||||||||||||||||||||||=======|||||||||||||||||||||| //


    // ===== HEAD ===== //
    float3 p_skull = p_spine-to_float3(0,0.7f,0.7f);
    swi2S(p_skull,x,y, mul_f2_mat2(swi2(p_skull,x,y) , RotSin(t*0.1f,_cosf(t*0.4f)*0.4f,_sinf(t*0.3f)*0.4f)));
    swi2S(p_skull,y,z, mul_f2_mat2(swi2(p_skull,y,z) , RotSin(t*0.13f,_cosf(t*0.27f)*0.2f,_sinf(t*0.23f)*0.1f)));
    float3 p_head = p_skull;
    float d = Ellipsoid(p_head,to_float3(0.9f,1.1f,1.2f));//head base
    float p_cutb = p_head.y+0.7f + _sinf(p_head.x + _sinf(_cosf(p_head.z*1.4f)) * 21.0f)*0.02f; //bottom cut
    p_cutb = sMin(p_cutb, Ellipsoid(p_head-to_float3(0,-0.3f,-0.2f),to_float3_s(0.7f)),0.0f);//head hole
    p_cutb = sMin(p_cutb, Ellipsoid(p_head-to_float3(0,-0.24f,0.5f),to_float3_s(0.51f)),0.1f);//head hole front
    d = sMax(p_cutb, d,0.05f); //bottom cut
    float p_cutf = -p_head.z+1.1f; //forehead plane
    d = sMax(p_cutf, d,0.2f); //forehead cut
    d = _fminf(d, spine);

    // TEMPLES
    float cuts_temple = Capsule(to_float3(-_fabs(p_head.x),p_head.y, p_head.z), to_float3(-1.0f,-1,0.8f), to_float3(-1.8f,3,0.0f), 0.5f );//temple deepenings
    d = sMax(cuts_temple, d,0.3f); //temple cuts
    float bcut_temple = Capsule(p_head, to_float3(-2.0f,-1.1f,0.6f), to_float3(2,-1.1f,0.6f), 0.6f );//side cuts
    d = sMax(bcut_temple, d,0.3f); //side cuts

    // ZYGOMATIC ARCH
    float3 p_zyg = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z);
    p_zyg.x += _sinf(p_zyg.z*4.0f+PI)*0.08f;
    p_zyg.y += _cosf(p_zyg.z*9.0f)*0.03f;
    float zyg = Capsule(p_zyg,to_float3(0.5f,-0.3f,0.8f),to_float3(0.75f,-0.3f,0.1f),(p_zyg.z)*0.1f);
    d = sMin(d,zyg,0.06f);

    // ===== UPPER JAW ===== //
    float3 p_jaw = p_skull-to_float3(0,0.36f,0.1f);
    swi2S(p_jaw,y,z, mul_f2_mat2(swi2(p_jaw,y,z) , Rot(PI)));
    p_jaw.y -= _sinf(p_jaw.x*37.0f)*0.007f - _cosf(p_jaw.z*59.0f)*0.01f;//deformation
    float ujaw = HollowSphere(p_jaw+to_float3(0,-0.95f,0.6f),0.38f,0.02f,0.05f );//jaw sdf
    float p_cutB = p_skull.z-0.6f;//cutting plane back
    ujaw = sMax(p_cutB, ujaw,0.05f); //jaw back cut
    float3 p_jawsc = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z); //new point def for side cuts
    swi2S(p_jawsc,x,y, mul_f2_mat2(swi2(p_jawsc,x,y) , Rot(-1.0f)));
    swi2S(p_jawsc,y,z, mul_f2_mat2(swi2(p_jawsc,y,z) , Rot(-0.4f)));
    p_jawsc.y += 0.3f;
    ujaw = sMax(p_jawsc.y, ujaw,0.04f); //side cuts
    d = sMin(ujaw, d,0.1f);//union upper jaw and d
    d -= _sinf(10.0f*p_skull.x)*_sinf(8.0f*p_skull.y)*_sinf(7.0f*p_skull.z)*0.01f;//deformation head

    // ===== EYES ===== //

    // CHEEKBONES
    float3 p_eyesur = p_skull-to_float3(0,0.3f,0);
    float eyesur = Ellipsoid(to_float3(_fabs(p_eyesur.x),p_eyesur.y,p_eyesur.z)+to_float3(-0.34f,0.5f,-0.87f),to_float3(0.25f,0.24f,0.2f));//cheekbones
    eyesur += _sinf(12.0f*p_skull.x)*_sinf(9.0f*p_skull.y)*_sinf(13.0f*p_skull.z)*0.05f;//deformation
    d = sMin(eyesur, d,0.2f);//union cheekbones and d

    // EYE HOLES
    float3 p_eye = p_skull;
    p_eye += _sinf(p_eye.x*29.0f+_cosf(p_eye.y*32.0f))*0.008f; //eye distortion
    float eye = Ellipsoid(to_float3(_fabs(p_eye.x),p_eye.y-0.4f,p_eye.z)+to_float3(-0.29f,0.49f,-1.1f),to_float3(0.21f,0.25f,0.25f)); // eye ball
    eye = sMin(eye,Sphere(to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z)-to_float3(0.25f,0.0f,0.7f),0.35f),0.05f);// eye hole back
    eye = sMax(-p_eye.y,eye,0.2f);
    d = sMax(eye, d,0.05f); //eye ball subtraction

    // ===== NOSE ===== //

    // NOSE BONE
    float3 p_nbone = p_skull;
    swi2S(p_nbone,y,z, mul_f2_mat2(swi2(p_nbone,y,z) , Rot(-2.2f)));
    float nbone = HollowSphere(p_nbone+to_float3(0,-1.0f,0.4f),0.1f,0.08f,0.04f );
    d = sMin(d,nbone,0.05f);

    // NOSE HOLE
    float3 p_nose = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z);
    swi2S(p_nose,x,y, mul_f2_mat2(swi2(p_nose,x,y) , Rot(-0.4f)));
    float nose = Ellipsoid(p_nose-to_float3(-0.1f,-0.3f,1.0f),to_float3(0.05f,0.1f,0.8f));
    d = sMax(nose, d,0.06f); //nose subtraction

    // ===== LOWER JAW ===== //

    // LOWER JAW TRANSFORMATION
    float3 pN = p_skull;
    pN.z -= 0.5f;
    pN.y += 0.4f;
    swi2S(pN,y,z, mul_f2_mat2(swi2(pN,y,z) , RotSin(_sinf(t*0.8f),_sinf(t)*0.3f+smoothstep(0.0f,1.0f,_sinf(t)*0.3f),-0.4f)));
    pN.z += 0.5f;
    pN.y -= 0.4f;
    pN -= _sinf(pN.y*15.0f)*0.001f - _cosf(pN.z*39.0f)*0.001f;//deformation

    // CHIN
    float3 p_ljaw = pN;
    p_ljaw.y *= 0.8f;
    p_ljaw.z -= _sinf(pN.y*26.0f)*0.008f;
    p_ljaw.y -= _cosf(pN.x*15.0f+_sinf(pN.y*7.0f)*2.0f)*0.01f;
    float ljaw = HollowSphere(p_ljaw+to_float3(0,0.77f,-0.74f),0.38f,0.03f,0.04f );//chin
    ljaw = sMax(p_ljaw.z-0.65f,ljaw,0.1f);

    // MANDIBLE BACK
    float3 p_maB = to_float3(_fabs(pN.x),pN.y,pN.z);
    swi2S(p_maB,y,z, mul_f2_mat2(swi2(p_maB,y,z) , Rot(-1.3f)));
    swi2S(p_maB,x,z, mul_f2_mat2(swi2(p_maB,x,z) , Rot(-0.34f)));
    swi2S(p_maB,x,y, mul_f2_mat2(swi2(p_maB,x,y) , Rot(-0.39f)));
    p_maB -= to_float3(0.85f,0.0f,0.63f);
    ljaw = sMin(ljaw,rBox(p_maB,to_float3(0.0f,smoothstep(0.0f,6.0f,_fabs(-p_maB.z)+0.9f),0.45f),0.04f),0.17f);//union chin + mandible
    ljaw = sMax(Ellipsoid(p_maB-to_float3(0.0f,0.0f,-0.55f),to_float3(0.5f,0.15f,0.26f)),ljaw,0.04f);//mandible top cut to get a V
    p_ljaw -= _sinf(p_ljaw.y*32.0f)*0.001f - _cosf(p_ljaw.z*29.0f)*0.007f;//deformation
    ljaw = sMax(p_ljaw.y+0.93f,ljaw,0.02f);//bottom cut

    d = _fminf(ljaw, d);//union chin and d

    // ===== UPPER TEETH ===== //
    float3 p_tooth = p_skull;
    p_tooth -= to_float3(0,-0.77f,0.7f);
    p_tooth *= to_float3(1.2f,1,1);
    swi2S(p_tooth,x,z, pModPolar(swi2(p_tooth,x,z), 28.0f));//alignment polar

    float teeth = Ellipsoid(p_tooth - to_float3(0.43f, 0.0f, 0.0f), to_float3(0.03f, 0.15f, 0.045f));
    teeth = _fmaxf(teeth, -p_skull.y-0.73f+_sinf(p_skull.x*32.0f)*0.006f);//cut teetch bottom
    teeth = _fmaxf(teeth, -p_skull.z+0.7f);// cut teeth back
    d = _fminf(d,teeth);

    // ===== LOWER TEETH ===== //
    float3 p_ltooth = pN;
    p_ltooth -= to_float3(0,-0.77f,0.7f);
    p_ltooth *= to_float3(1.2f,1,1);
    swi2S(p_ltooth,x,z, pModPolar(swi2(p_ltooth,x,z), 28.0f));//alignment polar

    float lteeth = Ellipsoid(p_ltooth - to_float3(0.42f, 0.0f, 0.0f), to_float3(0.03f, 0.15f, 0.045f));
    lteeth = _fmaxf(lteeth, pN.y+0.79f+_sinf(p_skull.x*29.0f)*0.004f);//cut teeth top
    lteeth = _fmaxf(lteeth, -pN.z+0.7f);// cut teeth back
    d = _fminf(d,lteeth);

    d = _fminf(d,arm);//union skull, arm, hand and fingers

    return d;
}
__DEVICE__ float March(float3 ro, float3 rd, float iTime){
    float h=0.0f;
    for(int i=0;i<MAX_STEPS; i++){
        float3 p = ro + rd*h;
        float d = map(p, iTime);
        h += d;
        if(h>MAX_DIST||_fabs(d)<SURF_DIST) break;
    }
    return h;
}

__DEVICE__ float3 CalcNormal (float3 p, float iTime){
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    float3 n = to_float3_s(0.0f);
    for( int i=0; i<4; i++ ){
        float3 e = 0.5773f*(2.0f*to_float3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0f);
        n += e*map(p+0.001f*e, iTime);
    }
    return normalize(n);
}

//by https://iquilezles.org/
__DEVICE__ float CalcAO( in float3 pos, in float3 nor, float iTime ){
  float occ = 0.0f;
    float sca = 1.0f;
    for( int i=0; i<8; i++ )
    {
        float h = 0.001f + 0.15f*(float)(i)/4.0f;
        float d = map( pos + h*nor, iTime );
        occ += (h-d)*sca;
        sca *= 0.95f;
    }
    return clamp( 1.0f - 1.5f*occ, 0.0f, 1.0f );
}

//by https://iquilezles.org/
__DEVICE__ float CalcSoftshadow( in float3 ro, in float3 rd, in float mint, in float tmax, float iTime){
  float res = 1.0f;
    float t = mint;
    float ph = 1e10;

    for( int i=0; i<32; i++ )
    {
    float h = map( ro + rd*t, iTime );
        {
          res = _fminf( res, 10.0f*h/t );
        }
            float y = h*h/(2.0f*ph);
            float d = _sqrtf(h*h-y*y);
            res = _fminf( res, 10.0f*d/_fmaxf(0.0f,t-y) );
            ph = h;
        t += h;

        if( res<0.0001f || t>tmax ) break;
    }

    res = clamp( res, 0.0f, 1.0f );
    return res*res*(3.0f-2.0f*res);
}

__KERNEL__ void DullSkullFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float  SHADE = params->SHADE;
  float4 ColorGolden = to_float4(params->ColorGolden[0], params->ColorGolden[1], params->ColorGolden[2], params->ColorGolden[3]);
  float4 ColorZombie = to_float4(params->ColorZombie[0], params->ColorZombie[1], params->ColorZombie[2], params->ColorZombie[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float  ViewDZ = params->ViewDZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  Alpha = params->Alpha;
  float  Fog = params->Fog;

  // --------

mat2 dummy1;
mat3 dummy2;

    float2 uv = (fragCoord-0.5f*iResolution)/iResolution.y;
    float3 ro = to_float3(0, _sinf(iTime*0.18f)*2.0f*_cosf(iTime*0.52f), 12.5f) + to_float3_aw(ViewDXY, ViewDZ);
    swi2S(ro,y,z, mul_f2_mat2(swi2(ro,y,z) , Rot(_sinf(iTime*0.41f)*0.2f)));
    swi2S(ro,x,z, mul_f2_mat2(swi2(ro,x,z) , Rot(_cosf(iTime*0.32f)*0.2f)));
    float3 rd = RayDir(uv, ro, to_float3(0,0.0f,0), 2.0f) + to_float3_aw(ViewXY, ViewZ);

    float3 col = to_float3_s(0);
    float d = March(ro, rd, iTime);

    float dif = 0.0f;
    float3 material = to_float3_s(0.0f);

    float alpha = 1.0f;

    if(d<MAX_DIST){
        float3 p = ro + rd*d;
        float3 n = CalcNormal(p, iTime);
        float3 r = reflect(rd,n);
        float3 ref = swi3(decube_f3(iChannel0,r),x,y,z);
        material = swi3(ColorGolden,x,y,z);//to_float3(0.95f,0.6f,0.1f);
        float3 l = normalize(to_float3(3,3,1));
        float3 hal = normalize(normalize(to_float3(3,2,1))-rd);
        dif = clamp(dot(n,l),0.0f,1.0f)*CalcSoftshadow(p,l,0.01f,3.0f, iTime);//diffuse
        float spe = _powcf(clamp(dot(n,hal),0.0f,1.0f),8.0f)*clamp(1.2f+dot(hal,rd),0.0f,1.0f);//specular
        float amb = clamp(-n.x,0.0f,1.0f);//ambient
        float ao = CalcAO(p,n, iTime);//ambient occlusion
        float fresnel = _powcf(1.0f+dot(rd, n),3.0f); //fresnel

        if (SHADE==0)
        {
          col = to_float3_s(dif)*3.0f+0.06f;
          col *= ao;
        }
        if (SHADE==1)
        {
          col = to_float3_s(fresnel*4.0f);
          col *= n*0.5f+0.9f;
        }
        if (SHADE==2)
        {
          material = swi3(ColorZombie,x,y,z);//to_float3(0.6f,1.0f,0.7f);
          col = material*dif*30.0f*spe;
          col += material*amb*ao;
          col *= n*0.7f+0.5f;
          col *= 1.0f-fresnel;
        }
        if (SHADE==3)
        {
          col = to_float3_s(d*0.4f);
        }
        if (SHADE==4)
        {
          col = material;
          col *= 32.0f*spe+amb;
          col *= ref;
          col *= ao;
        }

    }
    else
      alpha = Alpha;

    col = _mix( col, to_float3_s(0), clamp(d*0.086f*Fog, 0.0f, 1.0f));//fog
    col = pow_f3(col, to_float3_s(0.4545f)); //gamma correction

    fragColor = to_float4_aw(col, alpha);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  InSHADEButton = self:AddInput("SHADE", "SHADE", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "MultiButtonControl",
      MBTNC_ForceButtons = true,

      MBTNC_ShowName     = false,
      { MBTNC_AddButton  = " Mono", },  { MBTNC_AddButton  = " Funky", },  { MBTNC_AddButton  = " Zombie", },  { MBTNC_AddButton  = " Ghost", },  { MBTNC_AddButton  = " Golden", }, 
		  MBTNC_StretchToFit = true,
      IC_NoLabel         = true,
		  INP_Default        = 0,
      IC_Visible         = true,
  })

  self:BeginControlNest("ColorGolden", "ColorGolden", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorGolden",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorGoldenColorR = self:AddInput("Red",   "ColorGoldenRed",   { INP_Default  = 0.95, IC_ControlID = 0, attrs})
    InColorGoldenColorG = self:AddInput("Green", "ColorGoldenGreen", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColorGoldenColorB = self:AddInput("Blue",  "ColorGoldenBlue",  { INP_Default  = 0.1, IC_ControlID = 2, attrs})
    InColorGoldenColorA = self:AddInput("Alpha", "ColorGoldenAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorZombie", "ColorZombie", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorZombie",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorZombieColorR = self:AddInput("Red",   "ColorZombieRed",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InColorZombieColorG = self:AddInput("Green", "ColorZombieGreen", { INP_Default  = 1.0, IC_ControlID = 1, attrs})
    InColorZombieColorB = self:AddInput("Blue",  "ColorZombieBlue",  { INP_Default  = 0.7, IC_ControlID = 2, attrs})
    InColorZombieColorA = self:AddInput("Alpha", "ColorZombieAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InViewDXYPoint = self:AddInput("ViewDXY", "ViewDXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewDZSlider = self:AddInput("ViewDZ", "ViewDZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InAlphaSlider = self:AddInput("Alpha", "Alpha", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 1.0,
      })

  InFogSlider = self:AddInput("Fog", "Fog", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 1.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end




function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)


  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


  node = DVIPComputeNode(req,
    "DullSkullFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  params = node:GetParamBlock(ShaderParameters)
  
  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  params.iFrame = req.Time

  params.SHADE = InSHADEButton:GetValue(req).Value
  params.ColorGolden = {
    InColorGoldenColorR:GetValue(req).Value,
    InColorGoldenColorG:GetValue(req).Value,
    InColorGoldenColorB:GetValue(req).Value,InColorGoldenColorA:GetValue(req).Value
  }
  params.ColorZombie = {
    InColorZombieColorR:GetValue(req).Value,
    InColorZombieColorG:GetValue(req).Value,
    InColorZombieColorB:GetValue(req).Value,InColorZombieColorA:GetValue(req).Value
  }
  params.ViewDXY = {InViewDXYPoint:GetValue(req).X,InViewDXYPoint:GetValue(req).Y}
  params.ViewDZ = InViewDZSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.Alpha = InAlphaSlider:GetValue(req).Value
  params.Fog = InFogSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O

  node:SetParamBlock(params)
  --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  DefineEdges(edges, node)
    
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)


  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
