--[[--/*

  LostAstronaut.fuse

  Based on https://www.shadertoy.com/view/Mlfyz4 a WebGL shader created by duvengar.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  float  Orange[4];
  float  Green[4];
  float  Pink[4];
  float  TotCol[4];
  float  ViewXY[2];
  float  ViewZ;
  float  Brightness;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_mat2_f2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_mat2_f2( mat2 m, float2 v )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r1.x; t.y = v.x*m.r0.y + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3( float a, float b, float c, float d, float e, float f, float g, float h, float i)
  {
    return mat3(a,b,c,d,e,f,g,h,i);
  }

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }
  __DEVICE__ inline mat3 mul_mat3_mat3( mat3 A, mat3 B) { return (A*B); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3( float  a, float  b, float c,   float d, float e, float f,   float g, float h, float i)
  {
    mat3 t;
    t.r0.x = a; t.r0.y = b; t.r0.z = c;
    t.r1.x = d; t.r1.y = e; t.r1.z = f;
    t.r2.x = g; t.r2.y = h; t.r2.z = i;
    return t;
  }

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

__DEVICE__ mat3 mul_mat3_mat3( mat3 B, mat3 A)
{
   float r[3][3];
   float a[3][3] = {{A.r0.x, A.r0.y, A.r0.z},
                    {A.r1.x, A.r1.y, A.r1.z},
                    {A.r2.x, A.r2.y, A.r2.z}};
   float b[3][3] = {{B.r0.x, B.r0.y, B.r0.z},
                    {B.r1.x, B.r1.y, B.r1.z},
                    {B.r2.x, B.r2.y, B.r2.z}};

  for( int i = 0; i < 3; ++i)
  {
   for( int j = 0; j < 3; ++j)
   {
     r[i][j] = 0.0f;
     for( int k = 0; k < 3; ++k)
     {
       r[i][j] = r[i][j] + a[i][k] * b[k][j];
     }
   }
  }
  mat3 R = to_mat3(r[0][0], r[0][1], r[0][2],
                   r[1][0], r[1][1], r[1][2],
                  r[2][0], r[2][1], r[2][2]);
  return R;
}
#endif // end of mat3 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)

 #define abs_f3(a) _fabs(a)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define abs_f3(a) fabs(a)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[
// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'https://soundcloud.com/establishmentlabel/teaser-francesco-novara-astron-ep' to iChannel0


// "Lost_Astronaut"
// by Julien Vergnaud @duvengar-2017
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.
// ====================================================================
// this shader is inspired by iq's "Raymarching - Primitives's",
// https://www.shadertoy.com/view/Xds3zN
// and article,
// https://iquilezles.org/articles/distfunctions
// and Shane's "Transparent 3D Noise" ,
// https://www.shadertoy.com/view/lstGRB
// ====================================================================

#define T iTime

//==========================================================//
//                 NOISE 3D
//
// 3D noise and fbm function by Inigo Quilez
//==========================================================//
__DEVICE__ float hash( float n )
{
    float h =  fract(_sinf(n) * 4121.15393f);
    return  h + 0.444f;
}

__DEVICE__ float noise( in float3 x )
{
    float3 p = _floor(x);
    float3 f = fract_f3(x);

    f = f * f * (3.0f - 2.0f * f );

    float n = p.x + p.y * 157.0f + 113.0f * p.z;

    return _mix(_mix(_mix( hash(n + 00.00f), hash(n + 1.000f), f.x),
                     _mix( hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
                _mix(_mix( hash(n + 113.0f), hash(n + 114.0f), f.x),
                     _mix( hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

__DEVICE__ float fbm( float3 p )
{

   mat3 m = to_mat3( 0.00f,  0.80f,  0.60f,
                    -0.80f,  0.36f, -0.48f,
                    -0.60f, -0.48f,  0.64f );

   float f = 0.0f;

   f += 0.5000f * noise( p ); p = mul_mat3_f3(m , p) * 2.1f;
   f += 0.2500f * noise( p ); p = mul_mat3_f3(m , p) * 2.2f;
   f += 0.1250f * noise( p ); p = mul_mat3_f3(m , p) * 2.3f;
   f += 0.0625f * noise( p );

   return f / 0.9375f;
}


//==========================================================
//            signed DISTANCE FIELD PRIMITIVES
//==========================================================
//
// distance field primitives by Inigo Quilez
// https://www.shadertoy.com/view/Xds3zN
//
//-----------------------------------------------------------
//                       SPHERE
//-----------------------------------------------------------
__DEVICE__ float sdSphere( float3 p, float s )
{
  return length(p) - s;
}

//-----------------------------------------------------------
//                        BOX
//-----------------------------------------------------------
__DEVICE__ float sdBox( float3 p, float3 b )
{
  float3 d = abs_f3(p) - b ;
  return _fmaxf(_fminf(d.x, _fminf(d.y, d.z)), 0.0f) + length(_fmaxf(d, to_float3_s(0.0f)));
}


// polynomial smooth min and max ref iq's article
// https://iquilezles.org/articles/smin


__DEVICE__ float smin( float a, float b, float k )
{
    float h = clamp( 0.5f + 0.5f * (b - a) / k, 0.0f, 1.0f );
    return _mix( b, a, h ) - k * h * (1.0f - h);
}


__DEVICE__ float smax( float a, float b, float k )
{
    float h = clamp( 0.5f + 0.5f * (a - b) / k, 0.0f, 1.0f );
    return _mix( b, a, h ) + k * h * (1.0f - h);
}


__DEVICE__ float3 opRot( float3 p, float a )
{
    float  c = _cosf(a);
    float  s = _sinf(a);
    mat2   m = to_mat2(c,-s,s,c);
    return to_float3_aw(mul_mat2_f2(m,swi2(p,x,y)),p.z);
}

//==========================================================
//          SKULL SIGNED DISTANCE FIELD
//==========================================================
__DEVICE__ float sdSkull( float3 p, float s )
{

  // --------------------------------------------------------
  // domain deformation on radius (s) brings some interesting
  // results this deformation sould be applied to big shapes
  // in order to preserve details.

  float ss = noise(p * 9.0f);
  ss = _mix(s,ss *0.5f,0.1f);

  // sp is using symetry on z axis
  float3 sp = to_float3(p.x, p.y, _fabs(p.z));

  // kind of morphing effect
  // s = clamp(_cosf(iTime*0.5f), 0.20f,0.35f);

  float shape = sdSphere(p - to_float3(0.0f,0.05f,0.0f), s * 0.95f * _cosf(_cosf(p.y*11.0f)* p.z * 2.3f) );
  //---------------------------------------------------------
  // first part external skull top
  // --------------------------------------------------------

  // globe front
  shape = smin(shape,  sdSphere (p - to_float3(0.10f, 0.23f, 0.00f), s * 0.82f), 0.09f);

  // globe back
  shape = smin(shape,  sdSphere (p - to_float3(-0.1f, 0.24f, 0.00f), s * 0.82f), 0.09f);

  // eye brow
  shape = smin(shape,  sdSphere (sp - to_float3(0.25f, 0.07f, 0.10f), s * 0.36f * _cosf(p.y * 7.0f)), 0.02f);

  // lateral holes - symmetry
  shape = smax(shape, -sdSphere (sp - to_float3(0.15f, -0.01f, 0.31f), s * 0.28f * _cosf(p.x * 0.59f)), 0.02f);

  //checkbones - symmetry
  shape = smin(shape, sdSphere(sp-to_float3(0.22f,-0.13f,0.18f), s*0.11f),0.09f);

  // empty the skull
  shape = _fmaxf(shape, -sdSphere(p - to_float3(0.0f,0.05f,0.0f), s * 0.90f * _cosf(cos(p.y*11.0f)* p.z * 2.3f) ));
  shape = smax(shape,  -sdSphere (p - to_float3(0.10f, 0.23f, 0.00f), s * 0.74f),0.02f);
  shape = smax(shape,  -sdSphere (p - to_float3(-0.1f, 0.24f, 0.00f), s * 0.74f),0.02f);
  shape = smax(shape,  -sdSphere (p - to_float3(0.0f, 0.24f, 0.00f), s * 0.74f),0.02f);

  // eye balls - symmetry
  shape = smax(shape, -sdSphere(sp-to_float3(0.32f,-0.04f,0.140f), s  * 0.28f * _cosf(p.y*10.0f)),0.03f);

  // nose
  //-----------------------------------------------------------

  // base nose shape
  float temp = sdSphere(p- to_float3(_cosf(0.0f)*0.220f,-0.05f, _sinf(0.0f)*0.3f), s * 0.35f * _cosf(_sinf(p.y*22.0f)*p.z*24.0f));

  // substract the eyes balls ( symetrix) & skukl globe
  temp = smax(temp, -sdSphere(sp- to_float3(0.32f,-0.04f,0.140f), s * 0.35f * _cosf(p.y*10.0f)), 0.02f);
  temp = smax(temp, -sdSphere(p - to_float3(0.0f,0.05f,0.0f), s * 0.90f * _cosf(_cosf(p.y*11.0f)* p.z * 2.3f) ),0.02f);

  // add nose shape to skull
  shape = smin(shape,temp,0.015f);

  // empty the nose
  shape = smax(shape, - sdSphere(p- to_float3(_cosf(0.0f)*0.238f,-0.09f, _sinf(0.0f)*0.3f), s * 0.3f * _cosf(_sinf(p.y*18.0f)*p.z*29.0f)),0.002f);

  // substract bottom
  shape = smax(shape, -sdSphere(p- to_float3(-0.15f,-0.97f, 0.0f), s * 2.5f ),0.01f);

  // I like the noise deformation on this edge with ss for the sphere radius.
  // It give a more natural look to the skull.
  shape = smax(shape, -sdSphere(p- to_float3(-0.23f,-0.57f, 0.0f), _fabs(ss) * 1.6f ),0.01f);

  //---------------------------------------------------------
  // skull part2: UP jaws
  // --------------------------------------------------------

  temp = smax(sdSphere(p - to_float3(0.13f,-0.26f,0.0f), 0.45f * s), -sdSphere(p - to_float3(0.125f,-0.3f,0.0f), 0.40f * s), 0.01f);

  // substract back
  temp = smax(temp,-sdSphere(p - to_float3(-0.2f,-0.1f,0.0f), 0.9f * s), 0.03f);

  // substract bottom
  temp = smax(temp,-sdSphere(p - to_float3(0.13f,-0.543f,0.0f), 0.9f * s), 0.03f);

  // substract up
  temp = _fmaxf(temp, -sdSphere(p - to_float3(0.0f,0.02f,0.0f), s * 0.90f * _cosf(_cosf(p.y*11.0f)* p.z * 2.3f) ));
  shape = smin(shape, temp, 0.07f);


  // Teeths - symmetry
  //-----------------------------------------------------------

  temp = sdSphere(p - to_float3(0.26f, -0.29f, 0.018f), 0.053f * s );
  temp = _fminf(temp, sdSphere(p - to_float3(0.26f, -0.29f, -0.018f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.25f, -0.29f, 0.05f), 0.05f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.235f, -0.29f, 0.08f), 0.05f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.215f, -0.28f, 0.1f), 0.05f * s ));
  temp = _fmaxf(temp, -sdSphere(p - to_float3(0.16f, -0.35f, 0.0f), 0.33f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.18f, -0.28f, 0.115f), 0.05f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.14f, -0.28f, 0.115f), 0.06f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.11f, -0.28f, 0.115f), 0.06f * s ));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.08f, -0.28f, 0.115f), 0.06f * s ));

  shape = smin(shape, temp, 0.03f);

  // DOWN Jaws
  //-----------------------------------------------------------
  temp = sdSphere(p - to_float3(0.1f,-0.32f,0.0f), 0.43f * s);
  temp = smax (temp, - sdSphere(p - to_float3(0.1f,-0.32f,0.0f), 0.37f * s ),0.02f);
  temp = smax(temp, - sdSphere(p - to_float3(0.1f,-0.034f,0.0f), 1.03f * s),0.02f) ;
  temp = smax(temp, - sdSphere(p - to_float3(0.0f,-0.4f,0.0f), 0.35f * s),0.02f);
  // symmetry
  temp = smin(temp, sdBox(sp - to_float3(0.04f -0.03f * _cosf(p.y * 20.2f),-0.23f, 0.27f + _sinf(p.y)*0.27f), to_float3(_cosf(p.y*4.0f)*0.03f,0.12f,0.014f)), 0.13f);
  temp = _fmaxf(temp, - sdSphere(sp - to_float3(0.0f,0.153f,0.2f), 0.85f * s));
  temp = smin (temp, sdSphere(sp - to_float3(0.2f, -0.45f, 0.05f), 0.05f * s ),0.07f);

  shape = smin(shape, temp, 0.02f);


  // Teeths -  symmetry
  //--------------------------------------------------------
  temp = sdSphere(p - to_float3(0.23f, -0.34f, 0.018f), 0.053f * s );
  temp = _fminf(temp, sdSphere(p - to_float3(0.23f, -0.34f, -0.018f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.22f, -0.34f, 0.048f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.20f, -0.34f, 0.078f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.17f, -0.35f, 0.098f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.14f, -0.35f, 0.11f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.11f, -0.35f, 0.11f), 0.053f * s));
  temp = _fminf(temp, sdSphere(sp - to_float3(0.08f, -0.35f, 0.11f), 0.053f * s));

  shape = 1.5f * smin(shape, temp, 0.025f);

 return shape ;
 // return _mix(shape, sdSphere(p - to_float3(0.0f, 0.0f, 0.0f), 0.5f), _cosf(iTime*0.1f)*0.5f+0.5f);
 //return _mix(shape, sdBox(p-to_float3_s(0.0f),to_float3_s(0.45f)),_fabs(_cosf(iTime)));
}

//==========================================================
//                      POSITION
//==========================================================

__DEVICE__ float3 skullP ()
{
   return to_float3(0.0f,0.0f,0.0f);
}

//==========================================================
//                     OBJECTS UNION
//==========================================================

/*float2 add(float2 d1, float2 d2)
{

  return (d1.x < d2.x) ? d1: d2 ;
}*/

//==========================================================
//                     SCENE MANAGER
//==========================================================

__DEVICE__ float2 map(float3 pos, float T)
{
    float2 scene = to_float2(0.5f * sdSkull(opRot(pos,T*0.1f) -  skullP(), 0.35f), 39.0f);
    return scene;
}

//==========================================================
//                     RAY CASTER  with transparency
//
// derived from iq's original raycaster
// https://www.shadertoy.com/view/Xds3zN
// and mixed with shane's transparency layers,
// https://www.shadertoy.com/view/lstGRB
//==========================================================

__DEVICE__ float castRayTrans( float3 ro, float3 rd, float T )
{
    //int   i  = 0;
    float layers = 0.0f;
    float thD = 0.0023f;
    float aD = 0.0f;
    float col = 0.0f;
    float t = 1.0f;

    for ( int i = 0; i <= 64; i++)
    {
      float2 res = map(ro + rd * t, T);                  // map() > response to_float2(depth, id)
      float d = res.x;

      if(layers > 20.0f || col > 1.0f || t > 3.0f) break; // break when object something is encountred or when outside of bounds

        aD = (thD-_fabs(d)*13.0f/14.0f)/thD;

        if(aD > 0.0f) {
          col += aD/(1.0f + t*t*0.1f)*0.1f;
          layers++;
        }
       t += _fmaxf(_fabs(d)*0.8f, thD*1.6f);
    }
    return col;                                // return color value
}


//==========================================================
//                       NORMALS
//==========================================================


__DEVICE__ float3 calcNormal( float3 pos, float T )
{
    float2 e = to_float2(1.0f, -1.0f) * 0.0005f;
    return normalize(swi3(e,x,y,y) * map(pos + swi3(e,x,y,y), T).x +
                     swi3(e,y,y,x) * map(pos + swi3(e,y,y,x), T).x +
                     swi3(e,y,x,y) * map(pos + swi3(e,y,x,y), T).x +
                     swi3(e,x,x,x) * map(pos + swi3(e,x,x,x), T).x );
}

//==========================================================
//                       CAMERA
//==========================================================

__DEVICE__ mat3 setCamera(float3 ro)
{
  float3 cw = normalize(- ro);
  float3 cp = to_float3(_sinf(0.0f), _cosf(0.0f), 0.0f);
  float3 cu = normalize(cross(cw,cp));
  float3 cv = normalize(cross(cu,cw));

  return to_mat3_f3(cu, cv, cw);
}

//==========================================================
//                       MAIN
//==========================================================

#define pi 3.1415926535897f

__KERNEL__ void LostAstronautFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float4 Orange = to_float4(params->Orange[0], params->Orange[1], params->Orange[2], params->Orange[3]);
  float4 Green = to_float4(params->Green[0], params->Green[1], params->Green[2], params->Green[3]);
  float4 Pink = to_float4(params->Pink[0], params->Pink[1], params->Pink[2], params->Pink[3]);
  float4 TotCol = to_float4(params->TotCol[0], params->TotCol[1], params->TotCol[2], params->TotCol[3]);
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  Brightness = params->Brightness;

  // --------

  float3 ORANGE = swi3(Orange,x,y,z);
  float3 GREEN  = swi3(Green,x,y,z);
  float3 PINK   = swi3(Pink,x,y,z);


  // Pixel ratio
  //-----------------------------------------------------------
  // for background

  float2 uv =(-1.0f + 2.0f * fragCoord / iResolution.y)*4.0f;

  // Pixel ratio for skull

  float2 p = (-iResolution + 2.0f * fragCoord)/iResolution.y;
  float2 mo = swi2(iMouse,x,y)/iResolution;

  // camera
  //-----------------------------------------------------------
  // noisy version of skull with distortion applied to camera.
  // float3 ro = to_float3_aw( 2.0f * _cosf(T)+ 0.2f*_cosf(noise(to_float3(p*15.0f,T))), 1.0f, 2.0f * _sinf(T) );
  // rotation of camera on Y axis.

  float3 ro = to_float3( 2.0f * _cosf(T), 1.0f, 2.0f * _sinf(T) );

  // camera-to-world transformation

  mat3 ca = setCamera(ro);


  // ray direction
  //-----------------------------------------------------------

  float3 rd = mul_mat3_f3(ca , normalize(to_float3_aw(swi2(p,x,y), 2.0f) + to_float3_aw(ViewXY, ViewZ)));


  float crz = (iMouse.x - iResolution.x / 2.0f) / iResolution.x * pi;
  float crx = (iMouse.y - iResolution.y / 2.0f) / iResolution.y * pi;

  mat3 m = mul_mat3_mat3(to_mat3(_cosf(crz), 0.0f, _sinf(crz), 0.0f, 1.0f, 0.0f, -_sinf(crz), 0.0f, _cosf(crz)) ,
                         to_mat3(1.0f, 0.0f, 0.0f, 0.0f, _cosf(crx), _sinf(crx), 0.0f, -_sinf(crx), _cosf(crx)));

  if(iMouse.z > 0.0f)
  {
      ro = mul_mat3_f3(m , ro);
      rd = mul_mat3_f3(m , rd);
  }

  // render
  //-----------------------------------------------------------

  float3 tot = swi3(TotCol,x,y,z) + to_float3_s(_powf(fbm(to_float3_aw( fragCoord*0.005f,T*0.1f)),6.0f))*0.2f;

  // cosmos
  //-----------------------------------------------------------

  float ff = smoothstep(0.7f, 1.1f,fbm(0.1f * to_float3_aw(uv,T ) ));
  tot *= _mix(tot*0.6f, ORANGE, ff*0.9f  );
  ff = smoothstep(0.0f, 0.9f,fbm(0.1f * to_float3_aw(uv,T ) ));
  tot *= _mix(tot*0.4f, PINK, ff*2.3f  );
  ff = smoothstep(0.5f, 0.7f,fbm(0.1f * to_float3_aw(uv,T ) ));
  tot *= _mix(tot*0.6f, GREEN, ff*0.8f  );
  tot += smoothstep(0.0f,iResolution.y * 3.0f,iResolution.y-length(fragCoord));

  // skull
  //-----------------------------------------------------------

  float3 col = to_float3_s(castRayTrans(ro,rd,T));  ;
  tot += Brightness*col-0.07f;

  // lights & starfield
  //-----------------------------------------------------------

  float2 n = to_float2(T*0.2f,T*0.5f);
  tot /= smoothstep(0.45f,1.1f,fbm(to_float3_aw(n+fragCoord *0.01f,0.1f*T )));
  tot /= smoothstep(0.0f,1.0f,fbm(to_float3_aw(n+fragCoord *0.01f,0.1f*T )));
  tot /= smoothstep(0.55f,0.7f,fbm(to_float3_aw(6.0f*uv+n*9.0f ,0.1f)));

  fragColor = to_float4_aw( tot, 1.0f );

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })

  self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("Orange", "Orange", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Orange",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InOrangeColorR = self:AddInput("Red",   "OrangeRed",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InOrangeColorG = self:AddInput("Green", "OrangeGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InOrangeColorB = self:AddInput("Blue",  "OrangeBlue",  { INP_Default  = 0.3, IC_ControlID = 2, attrs})
    InOrangeColorA = self:AddInput("Alpha", "OrangeAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Green", "Green", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Green",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InGreenColorR = self:AddInput("Red",   "GreenRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InGreenColorG = self:AddInput("Green", "GreenGreen", { INP_Default  = 1.0, IC_ControlID = 1, attrs})
    InGreenColorB = self:AddInput("Blue",  "GreenBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InGreenColorA = self:AddInput("Alpha", "GreenAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Pink", "Pink", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Pink",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InPinkColorR = self:AddInput("Red",   "PinkRed",   { INP_Default  = 0.9, IC_ControlID = 0, attrs})
    InPinkColorG = self:AddInput("Green", "PinkGreen", { INP_Default  = 0.3, IC_ControlID = 1, attrs})
    InPinkColorB = self:AddInput("Blue",  "PinkBlue",  { INP_Default  = 0.4, IC_ControlID = 2, attrs})
    InPinkColorA = self:AddInput("Alpha", "PinkAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("TotCol", "TotCol", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "TotCol",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InTotColColorR = self:AddInput("Red",   "TotColRed",   { INP_Default  = 0.3, IC_ControlID = 0, attrs})
    InTotColColorG = self:AddInput("Green", "TotColGreen", { INP_Default  = 0.30, IC_ControlID = 1, attrs})
    InTotColColorB = self:AddInput("Blue",  "TotColBlue",  { INP_Default  = 0.7, IC_ControlID = 2, attrs})
    InTotColColorA = self:AddInput("Alpha", "TotColAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  self:EndControlNest()

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InBrightnessSlider = self:AddInput("Brightness", "Brightness", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.9,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, LINK_Visible = false, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


  node = DVIPComputeNode(req,
    "LostAstronautFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )

  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.Orange = {
    InOrangeColorR:GetValue(req).Value,
    InOrangeColorG:GetValue(req).Value,
    InOrangeColorB:GetValue(req).Value,InOrangeColorA:GetValue(req).Value
  }
  params.Green = {
    InGreenColorR:GetValue(req).Value,
    InGreenColorG:GetValue(req).Value,
    InGreenColorB:GetValue(req).Value,InGreenColorA:GetValue(req).Value
  }
  params.Pink = {
    InPinkColorR:GetValue(req).Value,
    InPinkColorG:GetValue(req).Value,
    InPinkColorB:GetValue(req).Value,InPinkColorA:GetValue(req).Value
  }
  params.TotCol = {
    InTotColColorR:GetValue(req).Value,
    InTotColColorG:GetValue(req).Value,
    InTotColColorB:GetValue(req).Value,InTotColColorA:GetValue(req).Value
  }
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.Brightness = InBrightnessSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  node:SetParamBlock(params)
  --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
  DefineEdges(edges, node)
    
  node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
  node:AddOutput("dst", dst)
  
  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
