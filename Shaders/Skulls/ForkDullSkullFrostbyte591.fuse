--[[--/*

  ForkDullSkullFrostbyte591.fuse

  Based on https://www.shadertoy.com/view/wXXSDX a WebGL shader created by JiPi.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  int    iFrame;
  float  SHADE;
  float  ColorGolden[4];
  float  ColorZombie[4];
  float  Color_floor[4];
  float  Color_coin[4];
  float  Color_sky[4];
  float  Color_fog[4];
  float  ViewDXY[2];
  float  ViewDZ;
  float  ViewXY[2];
  float  ViewZ;
  float  Alpha;
  float  Fog;
  float  xcenter;
  float  light_intensity;
  float  coin_specular_shineness;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

// ----------------------------------------------------------------------------------------------------------
// mat3 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float3x3 mat3;

  __DEVICE__ inline mat3 to_mat3( float a, float b, float c, float d, float e, float f, float g, float h, float i)
  {
    return mat3(a,b,c,d,e,f,g,h,i);
  }

  __DEVICE__ inline mat3 to_mat3_f3( float3 a, float3 b, float3 c ) { return mat3(a,b,c); }
  __DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) { return (B*A); }
  __DEVICE__ inline mat3 mul_mat3_mat3( mat3 A, mat3 B) { return (A*B); }

#else

  typedef struct { float3 r0; float3 r1; float3 r2; } mat3;

  __DEVICE__ inline mat3 to_mat3( float  a, float  b, float c,   float d, float e, float f,   float g, float h, float i)
  {
    mat3 t;
    t.r0.x = a; t.r0.y = b; t.r0.z = c;
    t.r1.x = d; t.r1.y = e; t.r1.z = f;
    t.r2.x = g; t.r2.y = h; t.r2.z = i;
    return t;
  }

  __DEVICE__ inline mat3 to_mat3_f3( float3 A, float3 B, float3 C)
  {
    mat3 D;
    D.r0 = A;
    D.r1 = B;
    D.r2 = C;
    return D;
  }

__DEVICE__ inline float3 mul_mat3_f3( mat3 B, float3 A) {
    float3 C;

    C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
    C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
    C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
    return C;
  }

__DEVICE__ mat3 mul_mat3_mat3( mat3 B, mat3 A)
{
   float r[3][3];
   float a[3][3] = {{A.r0.x, A.r0.y, A.r0.z},
                    {A.r1.x, A.r1.y, A.r1.z},
                    {A.r2.x, A.r2.y, A.r2.z}};
   float b[3][3] = {{B.r0.x, B.r0.y, B.r0.z},
                    {B.r1.x, B.r1.y, B.r1.z},
                    {B.r2.x, B.r2.y, B.r2.z}};

  for( int i = 0; i < 3; ++i)
  {
   for( int j = 0; j < 3; ++j)
   {
     r[i][j] = 0.0f;
     for( int k = 0; k < 3; ++k)
     {
       r[i][j] = r[i][j] + a[i][k] * b[k][j];
     }
   }
  }
  mat3 R = to_mat3(r[0][0], r[0][1], r[0][2],
                   r[1][0], r[1][1], r[1][2],
                  r[2][0], r[2][1], r[2][2]);
  return R;
}
#endif // end of mat3 implementation

// ----------------------------------------------------------------------------------------------------------
// mat4 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float4x4 mat4;

  __DEVICE__ inline mat4 to_mat4_f4( float4 a, float4 b, float4 c, float4 d ) { return mat4(a,b,c,d); }

#else

  typedef struct { float4 r0; float4 r1; float4 r2; float4 r3; } mat4;

__DEVICE__ inline mat4 to_mat4_f4( float4 A, float4 B, float4 C, float4 D)
  {
    mat4 _ret;
    _ret.r0 = A;
    _ret.r1 = B;
    _ret.r2 = C;
    _ret.r3 = D;
    return _ret;
  }

#endif // end of mat4 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f2(A) fract(A)
 #define fract_f3(A) fract(A)
 #define fract_f4(A) fract(A)

 #define mod_f(a,b)  fmod((a),(b))
 #define mod_f2(value,divisor) fmod(value,divisor)
 #define mod_f3(value,divisor) fmod(value,divisor)
 #define mod_f3f3(value,divisor) fmod(value,divisor)

 #define sin_f4(i) sin(i)
 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define mix_f3(v,i,m) mix(v,i,m)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define mod_f(a,b) _fmod(a,b)
 #define mod_f2(value,divisor) _fmod(value,divisor)
 #define mod_f3(value,divisor) _fmod(value,divisor)
 #define mod_f3f3(value,divisor) _fmod(value,divisor)
 #define sin_f4(i) sin(i)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define mix_f3(v,i,m) mix(v,i,m)
 #define sign_f(a) sign(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define fract_f2(A) to_float2(fract((A).x),fract((A).y))
 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define mod_f2(value,divisor) to_float2(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)))
 #define mod_f3(value,divisor) to_float3(mod_f((value).x, (divisor)),mod_f((value).y, (divisor)),mod_f((value).z, (divisor)))
 #define mod_f3f3(value,divisor) to_float3(mod_f((value).x, (divisor).x),mod_f((value).y, (divisor).y),mod_f((value).z, (divisor).z))
 #define sin_f4(i) to_float4( _sinf((i).x), _sinf((i).y), _sinf((i).z), _sinf((i).w))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define mix_f3(v,i,m) to_float3(_mix((v).x,(i).x,(m).x),_mix((v).y,(i).y,(m).y),_mix((v).z,(i).z,(m).z))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif

#define to_float4_f2f2(A,B) to_float4((A).x,(A).y,(B).x,(B).y ) // or is there some to_float_..() for that?!? - No - that is missing in DCTL :-) but now we have "one"

__DEVICE__ float4 decube_f3(__TEXTURE2D__ t, float3 xyz)
{
  float ax=_fabs(xyz.x);
  float ay=_fabs(xyz.y);
  float az=_fabs(xyz.z);

  int RowSampler = 15;

  if (xyz.x>0.0f && ax>=ay && ax>=az) // +X, Face 0, right
    return _tex2DVecN(t,(-xyz.z/ax+1.0f)/8.0f + 0.5f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y>0.0f && ay>=ax && ay>=az) // +Y, Face 2, top
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(-xyz.z/ay+1.0f)/6.0f + (2.0f/3.0f),15);

  if (xyz.z>0.0f && az>=ax && az>=ay) // +Z, Face 4, front
    return _tex2DVecN(t,(xyz.x/az+1.0f)/8.0f + 0.25f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.x<0.0f && ax>=ay && ax>=az) // -X, Face 1, left
    return _tex2DVecN(t,(xyz.z/ax+1.0f)/8.0f,(xyz.y/ax+1.0f)/6.0f + (1.0f/3.0f),15);

  if (xyz.y<0.0f && ay>=ax && ay>=az) // -Y, Face 3, bottom
    return _tex2DVecN(t,(xyz.x/ay+1.0f)/8.0f + 0.25f,(xyz.z/ay+1.0f)/6.0f,15);

  if (xyz.z<0.0f && az>=ax && az>=ay) // -Z, Face 5, back
    return _tex2DVecN(t,(-xyz.x/az+1.0f)/8.0f + 0.75f,(xyz.y/az+1.0f)/6.0f + (1.0f/3.0f),15);

  return to_float4(1.0f,0.0f,0.0f,1.0f); // error
}


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)


__DEVICE__ float _powcf(float x, float y) {
    float ret = _powf(x,y);
    if (isnan(ret)) {
        ret = 0.0001f;
    }
    return ret;
}


#define MAX_STEPS 64
#define MAX_DIST 12.0f
#define SURF_DIST 0.001f
#define TAU 6.283185f
#define PI 3.141592f

//===================================================================//
// below by https://iquilezles.org/

__DEVICE__ float sMin( float d1, float d2, float k ) {
    float h = clamp( 0.5f + 0.5f*(d2-d1)/k, 0.0f, 1.0f );
    return _mix( d2, d1, h ) - k*h*(1.0f-h); }

__DEVICE__ float sMax( float d1, float d2, float k ) {
    float h = clamp( 0.5f - 0.5f*(d2+d1)/k, 0.0f, 1.0f );
    return _mix( d2, -d1, h ) + k*h*(1.0f-h); }

__DEVICE__ float Sphere(float3 p,float s){
    return length(p)-s;
}

__DEVICE__ float Ellipsoid( float3 p, float3 r ){
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0f)/k1;
}

__DEVICE__ float rBox( float3 p, float3 b, float r ){
  float3 q = abs_f3(p) - b;
  return length(_fmaxf(q,to_float3_s(0.0f))) + _fminf(_fmaxf(q.x,_fmaxf(q.y,q.z)),0.0f) - r;
}

__DEVICE__ float Capsule( float3 p, float3 a, float3 b, float r ){
  float3 pa = p - a, ba = b - a;
  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0f, 1.0f );
  return length( pa - ba*h ) - r;
}

__DEVICE__ float HollowSphere( float3 p, float r, float h, float t ){
  float w = _sqrtf(r*r-h*h);
  float2 q = to_float2( length(swi2(p,x,z)), p.y );
  return ((h*q.x<w*q.y) ? length(q-to_float2(w,h)) :
                          _fabs(length(q)-r) ) - t;
}

__DEVICE__ float sdCappedTorus( float3 p, float2 sc, float ra, float rb)
{
  p.x = _fabs(p.x);
  float k = (sc.y*p.x>sc.x*p.y) ? dot(swi2(p,x,y),sc) : length(swi2(p,x,y));
  return _sqrtf( dot(p,p) + ra*ra - 2.0f*ra*k ) - rb;
}

// above by https://iquilezles.org/
//===================================================================//

__DEVICE__ mat2 Rot(float a) {
    float s=_sinf(a), c=_cosf(a);
    return to_mat2(c, -s, s, c);
}

// by https://mercury.sexy/hg_sdf/
__DEVICE__ float2 pModPolar(float2 p, float repetitions) {
    float angle = 2.0f*PI/repetitions,
          a = _atan2f((p).y, (p).x)+angle,
          r = length(p),
          c = _floor(a / angle);
    a = mod_f(a, angle) - angle / 2.0f;
    p = to_float2(_cosf(a), _sinf(a)) * r;
    //if (_fabs(c) >= (repetitions / 2.0f)) c = _fabs(c);
    //return c;
    return p;
}

__DEVICE__ mat2 RotSin(float a, float b, float c){
    mat2 rot = Rot(_sinf(a)*b+c);
    return rot;
}

__DEVICE__ float3 RayDir(float2 uv, float3 p, float3 l, float z) {
    float3
        f = normalize(l-p),
        r = normalize(cross(to_float3(0,1,0), f)),
        u = cross(f,r),
        c = f*z,
        i = c + uv.x*r + uv.y*u;
    return normalize(i);
}
// Math

#define PI_2  1.57079632679489661923f
#define PI_4  0.785398163397448309616f

__DEVICE__ mat4 scale(float x, float y, float z){
    return to_mat4_f4(
                      to_float4(x,   0.0f, 0.0f, 0.0f),
                      to_float4(0.0f, y,   0.0f, 0.0f),
                      to_float4(0.0f, 0.0f, z,   0.0f),
                      to_float4(0.0f, 0.0f, 0.0f, 1.0f)
                  );
}

__DEVICE__ mat4 translate(float x, float y, float z){
    return to_mat4_f4(
                      to_float4(1.0f, 0.0f, 0.0f, 0.0f),
                      to_float4(0.0f, 1.0f, 0.0f, 0.0f),
                      to_float4(0.0f, 0.0f, 1.0f, 0.0f),
                      to_float4(x,   y,   z,   1.0f)
                  );
}

__DEVICE__ mat3 rotateX(float phi){
    float c = _cosf(phi);
    float s = _sinf(phi);

    return to_mat3_f3(
                to_float3(1.0f, 0.0f, 0.0f),
                to_float3(0.0f, c, -s),
                to_float3(0.0f, s, c));
}

__DEVICE__ mat3 rotateY(float theta){
    float c = _cosf(theta);
    float s = _sinf(theta);

    return to_mat3_f3(
                to_float3(c, 0.0f, s),
                to_float3(0.0f, 1.0f, 0.0f),
                to_float3(-s, 0.0f, c));
}

__DEVICE__ mat3 rotateZ(float psi){
    float c = _cosf(psi);
    float s = _sinf(psi);

    return to_mat3_f3(
                to_float3(c, -s, 0.0f),
                to_float3(s, c, 0.0f),
                to_float3(0.0f, 0.0f, 1.0f));
}

// Noise and FBM (as seen on iq tutorials)

//const mat2 m2 = to_mat2(  0.80f,  0.60f,
//                      -0.60f,  0.80f );
//const mat2 m2i = to_mat2( 0.80f, -0.60f,
//                       0.60f,  0.80f );

__DEVICE__ float hash1_f2( float2 p )
{
    p  = 50.0f*fract_f2( p*0.3183099f );
    return fract( p.x*p.y*(p.x+p.y) );
}

__DEVICE__ float hash1( float n )
{
    return fract( n*17.0f*fract( n*0.3183099f ) );
}

__DEVICE__ float4 noised( in float3 x )
{
    float3 p = _floor(x);
    float3 w = fract_f3(x);

    float3 u = w*w*w*(w*(w*6.0f-15.0f)+10.0f);
    float3 du = 30.0f*w*w*(w*(w-2.0f)+1.0f);

    float n = p.x + 317.0f*p.y + 157.0f*p.z;

    float a = hash1(n+0.0f);
    float b = hash1(n+1.0f);
    float c = hash1(n+317.0f);
    float d = hash1(n+318.0f);
    float e = hash1(n+157.0f);
    float f = hash1(n+158.0f);
    float g = hash1(n+474.0f);
    float h = hash1(n+475.0f);

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    float tmp = ( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,
                  k2 + k5*u.z + k4*u.x + k7*u.z*u.x,
                  k3 + k6*u.x + k5*u.y + k7*u.x*u.y );

    return to_float4( -1.0f+2.0f*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z),
                       2.0f* du.x * tmp, 2.0f* du.y * tmp, 2.0f* du.z * tmp);
}

 __DEVICE__ inline mat3 mul_mat3_f( mat3 A, float B)
  {
  return to_mat3_f3(A.r0 * B, A.r1 * B, A.r2 * B);
  }


__DEVICE__ float4 fbm( in float3 x, int octaves )
{
    const mat3 m3  = to_mat3( 0.00f,  0.80f,  0.60f,
                              -0.80f,  0.36f, -0.48f,
                              -0.60f, -0.48f,  0.64f );
    const mat3 m3i = to_mat3( 0.00f, -0.80f, -0.60f,
                              0.80f,  0.36f, -0.48f,
                              0.60f, -0.48f,  0.64f );



    float f = 1.98f;  // could be 2.0
    float s = 0.49f;  // could be 0.5
    float a = 0.0f;
    float b = 0.5f;
    float3  d = to_float3_s(0.0f);
    mat3  m = to_mat3(1.0f,0.0f,0.0f,
                      0.0f,1.0f,0.0f,
                      0.0f,0.0f,1.0f);
    for( int i=0; i < octaves; i++ )
    {
        float4 n = noised(x);
        a += b*n.x;          // accumulate values
        d += b*mul_mat3_f3(m,swi3(n,y,z,w));      // accumulate derivatives
        b *= s;
        x = f*mul_mat3_f3(m3,x);
        m = mul_mat3_f(mul_mat3_mat3(m3i,m),f);
    }
    return to_float4( a, d.x,d.y,d.z );
}

// Primitives

__DEVICE__ float sdBox( float3 p, float3 b )
{
  float3 d = abs_f3(p) - b;
  return length(_fmaxf(d,to_float3_s(0.0f)));
}

__DEVICE__ float sdCappedCylinder( float3 p, float2 h )
{
  float2 d = abs_f2(to_float2(length(swi2(p,x,z)),p.y)) - h;
  return _fminf(_fmaxf(d.x,d.y),0.0f) + length(_fmaxf(d,to_float2_s(0.0f)));
}

__DEVICE__ float rounding( in float d, in float h )
{
    return d - h;
}


__DEVICE__ float opOnion( in float sdf, in float thickness )
{
    return _fabs(sdf)-thickness;
}

__DEVICE__ float opUnion( float d1, float d2 ) { return _fminf(d1,d2); }
__DEVICE__ float opSubtraction( float d1, float d2 ) { return _fmaxf(-d1,d2); }
__DEVICE__ float opIntersection( float d1, float d2 ) { return _fmaxf(d1,d2); }

__DEVICE__ float opSmoothUnion( float d1, float d2, float k ) {
    float h = clamp( 0.5f + 0.5f*(d2-d1)/k, 0.0f, 1.0f );
    return _mix( d2, d1, h ) - k*h*(1.0f-h); }

__DEVICE__ float opSmoothSubtraction( float d1, float d2, float k ) {
    float h = clamp( 0.5f - 0.5f*(d2+d1)/k, 0.0f, 1.0f );
    return _mix( d2, -d1, h ) + k*h*(1.0f-h); }

__DEVICE__ float opSmoothIntersection( float d1, float d2, float k ) {
    float h = clamp( 0.5f - 0.5f*(d2-d1)/k, 0.0f, 1.0f );
    return _mix( d2, d1, h ) + k*h*(1.0f-h); }

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------


// SNOISE function from: https://www.shadertoy.com/view/lsf3RH
__DEVICE__ float snoise(float3 uv, float res)
{
  const float3 s = to_float3(1e0f, 1e2f, 1e3f);

  uv *= res;

  float3 uv0 = _floor(mod_f3(uv, res))*s;
  float3 uv1 = _floor(mod_f3(uv+to_float3_s(1.0f), res))*s;

  float3 f = fract_f3(uv); f = f*f*(3.0f-2.0f*f);

  float4 v = to_float4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
                       uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);

  float4 r = fract_f4(sin_f4(v*1e-1f)*1e3f);
  float r0 = _mix(_mix(r.x, r.y, f.x), _mix(r.z, r.w, f.x), f.y);

  r = fract_f4(sin_f4((v + uv1.z - uv0.z)*1e-1f)*1e3f);
  float r1 = _mix(_mix(r.x, r.y, f.x), _mix(r.z, r.w, f.x), f.y);

  return _mix(r0, r1, f.z)*2.0f-1.0f;
}

__DEVICE__ float noise(float2 uv, float baseres)
{
    float n = 0.0f;
    for (int i = 0; i < 7; i++)
    {
        float v = _powcf(2.0f, (float)(i));
        n += (1.5f / v) * snoise(to_float3_aw(uv + to_float2(1.0f,1.0f) * ((float)(i) / 17.0f), 1), v * baseres);
    }


    return clamp((1.0f - n) * 0.5f, 0.0f, 1.0f);
}



__KERNEL__ void ForkDullSkullFrostbyte591Fuse__Buffer_A(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float  SHADE = params->SHADE;
  float4 ColorGolden = to_float4(params->ColorGolden[0], params->ColorGolden[1], params->ColorGolden[2], params->ColorGolden[3]);
  float4 ColorZombie = to_float4(params->ColorZombie[0], params->ColorZombie[1], params->ColorZombie[2], params->ColorZombie[3]);
  float4 Color_floor = to_float4(params->Color_floor[0], params->Color_floor[1], params->Color_floor[2], params->Color_floor[3]);
  float4 Color_coin = to_float4(params->Color_coin[0], params->Color_coin[1], params->Color_coin[2], params->Color_coin[3]);
  float4 Color_sky = to_float4(params->Color_sky[0], params->Color_sky[1], params->Color_sky[2], params->Color_sky[3]);
  float4 Color_fog = to_float4(params->Color_fog[0], params->Color_fog[1], params->Color_fog[2], params->Color_fog[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float  ViewDZ = params->ViewDZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  Alpha = params->Alpha;
  float  Fog = params->Fog;
  float  xcenter = params->xcenter;
  float  light_intensity = params->light_intensity;
  float  coin_specular_shineness = params->coin_specular_shineness;

  // --------

    fragCoord+=0.5f;

    const float2 center = to_float2(0.5f, 0.5f);

    float2 uv = (fragCoord/iResolution);

    float2 s1 = uv + to_float2(iTime * 0.005f, 0.005f);
    float2 s2 = (uv * 0.7f) + to_float2(iTime * -0.006f, iTime * - 0.007f);

    float dist = 1.0f - length(uv - center);

    float samplings = _fminf(noise(s1, 10.0f), noise(s2, 10.0f));
    float n = samplings * _powcf(dist, 3.2f);
    n += dist * 0.9f;
    //n += _powcf(dist, 7.0f) * 0.7f;

    fragColor = to_float4_s(n);
    //fragColor = to_float4_f2f2(uv,uv);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Cubemap: Uffizi Gallery_0' to iChannel0
// Connect Image 'Previsualization: Buffer A' to iChannel1


// Fork of "Fork DULL SKULL frostbyte_ 591" by Frostbyte_. https://shadertoy.com/view/3XB3RW
// 2025-04-25 07:05:02

//Added mirror Effect -Fbyte
// "Dull Skull"
// 2023
// by KΛTUR

/* license CC BY-NC 4.0f - https://creativecommons.org/licenses/by-nc/4.0f/
 * Author: KΛTUR
 * Original Shader: DULL SKULL
 * You may remix, adapt, and build upon this work for non-commercial
 * purposes, but you must give appropriate credit and indicate
 * changes were made.

=======================================================================

DULL SKULL - Playlist
https://www.shadertoy.com/playlist/c3sXWn

In this shader I explore the intricacies of the human skeleton through
the lens of mathematics, focusing on the skull as a SDF mostly made of
classic linear algebra and constructive solid geometry (Boolean operations).

=======================================================================

CHOOSE FROM DIFFERENT STYLES HERE

0 = MONOCHROME DIFFUSE
1 = FUNKY NORMAL FRESNEL
2 = SPECULAR ZOMBIE
3 = GHOST MODE
4 = GOLDEN REFLEX (Added 2025)
*/

//#define SHADE 4
//Mirror Effect
//#define xcenter -0.1
//===================================================================//

//Lygia Mirror lib
#ifndef FNC_MIRROR
#define FNC_MIRROR
__DEVICE__ float mirror(in float x) {
    float f = fract(x);
    float m = _floor(mod_f(x, 2.0f));
    float fm = f * m;
    return f + m - fm * 2.0f;
}

__DEVICE__ float2 mirror_f2(in float2 v) {
    float2 f = fract_f2(v);
    float2 m = _floor(mod_f2(v, 2.0f));
    float2 fm = f * m;
    return f + m - fm * 2.0f;
}
#endif


//Original Functions

__DEVICE__ float Bone(float3 p,float3 a, float3 b, float delta, float r, float r2, float bb){
    float bone = Capsule(p,a,b,(_fabs((_powcf(p.z-delta,2.0f))))*r2+r);
    p.z -= delta;
    bone = _fmaxf(bone,rBox(p,to_float3_s(bb),0.0f));//bounding box
    return bone;
}

__DEVICE__ float Finger(float3 p, float scale, float iter, float r, float r2, float bb, float angle, float iTime){
  
    float3 a = to_float3_s(0);
    float3 b = to_float3(0,0,1)*scale;
    float delta = (b-a).z;
    swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z) , Rot(angle*0.3f)));
    float fbone = Bone(p,a,b,delta/2.0f,r,r2,bb);
    float eps = 0.1f;
    float dist = (b-a).z;

    for (float i=0.0f;i<iter;i++){
            a.z = b.z+0.08f;
            b.z = a.z+dist;
            delta = a.z+(dist)/2.0f;
            dist -= eps;
            p.z -= a.z;
            swi2S(p,y,z, mul_f2_mat2(swi2(p,y,z) , Rot(angle)));
            p.z += a.z;
            r -= 0.001f;
            fbone = _fminf(fbone,Bone(p,a,b,delta,r,r2,bb));
    }
    return fbone;
}

__DEVICE__ float map(float3 p, float iTime){

    float t = iTime;

// ||||||||||||||||||||============|||||||||||||||||||| //
// ==================== UPPER BODY ==================== //
// ||||||||||||||||||||============|||||||||||||||||||| //

    // ===== SPINE ===== //
    float3 p_spine = p;
    p_spine.y -= _sinf(t*0.1f)*0.3f;
    p_spine.z -= 0.6f+_sinf(t*0.2f)*_sinf(t*0.51f);
    float3 p_vert = p_spine+to_float3(0,0.15f,0);
    float3 sSpine = to_float3(0.13f,0.09f,0.13f);
    float spine = Ellipsoid(p_vert,sSpine);//vertebrae - no anatomical accuracy, just an indication that there are vertebrae :)
    for (float i=0.0f;i<4.0f;i++){
        p_vert.y += 0.2f;
        p_vert.z += i*0.09f;
        spine = _fminf(spine,Ellipsoid(p_vert,sSpine));
    }
    spine -= _sinf(29.0f*p_vert.x)*_sinf(21.0f*p_vert.y)*_sinf(12.0f*p_vert.z*0.003f);//deformation

    // ===== COLLARBONE ===== //
    float side = sign_f(p_spine.x);//side definition

    float3 p_cbone = to_float3(_fabs(p_spine.x),p_spine.y,p_spine.z);
    p_cbone += to_float3(-0.2f,0.9f,0.5f);
    swi2S(p_cbone,x,z, mul_f2_mat2(swi2(p_cbone,x,z) , Rot(1.8f+_sinf(t*0.09f)*0.2f)));
    swi2S(p_cbone,y,z, mul_f2_mat2(swi2(p_cbone,y,z) , Rot(_sinf((side-0.23f)*t*0.6f)*0.2f)));
    float cbone = Bone(p_cbone+_sinf(p_cbone.z*3.0f)*0.1f, to_float3_s(0),to_float3(0,0,1.6f),0.8f,0.04f,0.04f,1.5f);

// ======================  ARMS ====================== //

    // ===== UPPER ARM ===== //
    swi2S(p_cbone,x,z, mul_f2_mat2(swi2(p_cbone,x,z) , Rot(-1.8f-_sinf(t*0.09f)*0.2f)));//invert collarbone transformation
    float3 p_uArm = to_float3(_fabs(p_cbone.x)-1.8f,p_cbone.y+0.1f,p_cbone.z+0.3f);
    float ruAxz = (side-0.59f)*t*0.3f;
    swi2S(p_uArm,x,z, mul_f2_mat2(swi2(p_uArm,x,z) , RotSin(ruAxz,0.2f,0.35f)));
    swi2S(p_uArm,x,y, mul_f2_mat2(swi2(p_uArm,x,y) , RotSin((side-0.19f)*t*0.42f,_sinf(t*0.18f)*0.6f,0.2f)));
    swi2S(p_uArm,y,z, mul_f2_mat2(swi2(p_uArm,y,z) , RotSin((side+0.12f)*t*0.62f,0.2f,0.1f)));
    p_uArm.z -= 1.0f;
    float uABone = Bone(p_uArm,to_float3(0,0,-1),to_float3(0,0,1),0.0f,0.06f,0.09f,1.3f);//bone sdf
    float uArm = sMax(Sphere(p_uArm+to_float3(0.08f,-0.0f,-1.1f),0.13f),uABone,0.2f);//deformation of front end of bone

    // ===== LOWER ARM ===== //
    float3 p_lArm = to_float3(p_uArm.x,p_uArm.y,p_uArm.z-1.1f);
    swi2S(p_lArm,x,z, mul_f2_mat2(swi2(p_lArm,x,z) , RotSin(-ruAxz,0.3f,-0.6f)));
    float t1 = t*0.6f+_sinf(t*0.22f);
    float rlAxySin = (side+0.13f)*t1*0.5f;
    float rlAxyAmo = p_lArm.z*0.3f;
    float rlAxyOff = p_lArm.z*0.7f;
    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , Rot(-0.3f)));
    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , RotSin(rlAxySin,-rlAxyAmo,-rlAxyOff-0.2f)));//crossing Ulna and Radius
    p_lArm.z -= 1.0f;
    float3 p_lArmS = to_float3(_fabs(p_lArm.x)-0.09f,p_lArm.y,p_lArm.z);//mirroring single bone
    p_lArmS.x += (_fabs(_powcf(p_lArmS.z+0.7f,2.0f)))*0.04f;//bending bones
    float3 a = to_float3(0.1f,0,1), b = to_float3(0.0f,0,-1);
    float r2=0.04f, r = 0.03f, bb = 1.5f;
    float lArm = Bone(p_lArmS,a,b,0.0f,r,r2,1.2f);//lower arm
    float arm = _fminf(lArm, uArm);//union upper and lower arm

    // ===== HANDS ===== //
    // CARPUS

    swi2S(p_lArm,x,y, mul_f2_mat2(swi2(p_lArm,x,y) , RotSin(rlAxySin,rlAxyAmo,rlAxyOff+0.2f)));//inverse the crossing of Ulna and Radius
    float3 p_hand = p_lArm;
    p_hand.z -= 1.1f;//translate anchor point
    float t2 = _sinf(t1)+(side-0.19f)*t1;
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , Rot(1.5f)));
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , RotSin(-rlAxySin,1.0f,0.0f)));
    swi2S(p_hand,y,z, mul_f2_mat2(swi2(p_hand,y,z) , RotSin(t2+1.91f,1.0f,0.45f)));
    swi2S(p_hand,x,y, mul_f2_mat2(swi2(p_hand,x,y) , RotSin((side-0.32f)*t1+0.3f,0.1f,0.1f)));
    float hand = Ellipsoid(p_hand,to_float3(0.2f,0.04f,0.1f));//ellipsoid as base
    hand -= (_sinf(27.0f*p_hand.x)+_sinf(37.0f*p_hand.z)*_sinf(19.0f*p_hand.y))*0.015f;//deformation of ellipsoid

    // FINGERS
    float3 pf = to_float3(p_hand.x,p_hand.y,p_hand.z-0.2f);
    r = 0.03f, r2=0.7f, bb=0.5f;

    // POINT
    float3 pf1 = pf;
    swi2S(pf1,x,z, swi2(pf1,x,z) + to_float2(0.13f,0.08f));
    swi2S(pf1,x,z, mul_f2_mat2(swi2(pf1,x,z) , Rot(-0.2f)));
    float fpoint = Finger(pf1,0.3f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.5f)+t2-0.12f)*(_sinf(t2)*0.4f+0.7f)*0.6f-0.7f), iTime);
    // MIDDLE
    float3 pf2 = pf;
    pf2.z += 0.03f;
    swi2S(pf2,x,z, mul_f2_mat2(swi2(pf2,x,z) , Rot(0.0f)));
    swi2S(pf2,x,y, mul_f2_mat2(swi2(pf2,x,y) , Rot(0.2f)));
    float fmiddle = Finger(pf2,0.32f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.3f)+t2-0.2f)*(_sinf(t2)*0.4f+0.7f)*0.7f-0.9f), iTime);
    // RING
    float3 pf3 = pf;
    swi2S(pf3,x,z, swi2(pf3,x,z) - to_float2(0.13f,-0.05f));
    swi2S(pf3,x,z, mul_f2_mat2(swi2(pf3,x,z) , Rot(0.15f)));
    swi2S(pf3,x,y, mul_f2_mat2(swi2(pf3,x,y) , Rot(0.3f)));
    float fring = Finger(pf3,0.3f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.7f)+t2-0.4f)*(_sinf(t2)*0.3f+0.7f)*0.8f-1.0f), iTime);//+_sinf(t*0.7f+0.5f)*0.3f-0.3f);
    // PINKY
    float3 pf4 = pf;
    swi2S(pf4,x,z, swi2(pf4,x,z) - to_float2(0.23f,-0.12f));
    swi2S(pf4,x,z, mul_f2_mat2(swi2(pf4,x,z) , Rot(0.5f)));
    swi2S(pf4,x,y, mul_f2_mat2(swi2(pf4,x,y) , Rot(0.4f)));
    float fpinky = Finger(pf4,0.25f,3.0f,r,r2,bb,(_sinf(_cosf(t2*0.9f)+t2)*(_sinf(t2)*0.2f+0.6f)*0.8f-1.0f), iTime);//;+_sinf(t+0.7f)*0.2f-0.4f);
    // THUMB
    float3 pf5 = pf;
    swi2S(pf5,x,z, swi2(pf5,x,z) + to_float2(0.22f,0.2f));
    swi2S(pf5,x,z, mul_f2_mat2(swi2(pf5,x,z) , Rot(-1.2f)));
    swi2S(pf5,x,y, mul_f2_mat2(swi2(pf5,x,y) , Rot(-0.6f)));
    swi2S(pf5,y,z, mul_f2_mat2(swi2(pf5,y,z) , Rot(-0.2f)));
    float thumb = Finger(pf5,0.14f,2.0f,0.035f,r2,bb,(_sinf(t2-0.16f)*(_sinf(t2)*0.6f+0.8f)*0.8f-1.0f), iTime);//+_sinf(t+1.2f)*0.3f-0.15f)*0.8f;

    float fingers = _fminf(fpoint,_fminf(fmiddle,_fminf(fring,_fminf(fpinky,thumb))));//union all fingers

    hand = _fminf(hand, fingers);//union fingers and carpus = hand
    arm = _fminf(hand,_fminf(arm,_fminf(cbone,spine)));//union hand, arm, collarbone and spine



// ||||||||||||||||||||||=======|||||||||||||||||||||| //
// ====================== SKULL ====================== //
// ||||||||||||||||||||||=======|||||||||||||||||||||| //


    // ===== HEAD ===== //
    float3 p_skull = p_spine-to_float3(0,0.7f,0.7f);
    swi2S(p_skull,x,y, mul_f2_mat2(swi2(p_skull,x,y) , RotSin(t*0.1f,_cosf(t*0.4f)*0.4f,_sinf(t*0.3f)*0.4f)));
    swi2S(p_skull,y,z, mul_f2_mat2(swi2(p_skull,y,z) , RotSin(t*0.13f,_cosf(t*0.27f)*0.2f,_sinf(t*0.23f)*0.1f)));
    float3 p_head = p_skull;
    float d = Ellipsoid(p_head,to_float3(0.9f,1.1f,1.2f));//head base
    float p_cutb = p_head.y+0.7f + _sinf(p_head.x + _sinf(_cosf(p_head.z*1.4f)) * 21.0f)*0.02f; //bottom cut
    p_cutb = sMin(p_cutb, Ellipsoid(p_head-to_float3(0,-0.3f,-0.2f),to_float3_s(0.7f)),0.0f);//head hole
    p_cutb = sMin(p_cutb, Ellipsoid(p_head-to_float3(0,-0.24f,0.5f),to_float3_s(0.51f)),0.1f);//head hole front
    d = sMax(p_cutb, d,0.05f); //bottom cut
    float p_cutf = -p_head.z+1.1f; //forehead plane
    d = sMax(p_cutf, d,0.2f); //forehead cut
    d = _fminf(d, spine);

    // TEMPLES
    float cuts_temple = Capsule(to_float3(-_fabs(p_head.x),p_head.y, p_head.z), to_float3(-1.0f,-1,0.8f), to_float3(-1.8f,3,0.0f), 0.5f );//temple deepenings
    d = sMax(cuts_temple, d,0.3f); //temple cuts
    float bcut_temple = Capsule(p_head, to_float3(-2.0f,-1.1f,0.6f), to_float3(2,-1.1f,0.6f), 0.6f );//side cuts
    d = sMax(bcut_temple, d,0.3f); //side cuts

    // ZYGOMATIC ARCH
    float3 p_zyg = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z);
    p_zyg.x += _sinf(p_zyg.z*4.0f+PI)*0.08f;
    p_zyg.y += _cosf(p_zyg.z*9.0f)*0.03f;
    float zyg = Capsule(p_zyg,to_float3(0.5f,-0.3f,0.8f),to_float3(0.75f,-0.3f,0.1f),(p_zyg.z)*0.1f);
    d = sMin(d,zyg,0.06f);

    // ===== UPPER JAW ===== //
    float3 p_jaw = p_skull-to_float3(0,0.36f,0.1f);
    swi2S(p_jaw,y,z, mul_f2_mat2(swi2(p_jaw,y,z) , Rot(PI)));
    p_jaw.y -= _sinf(p_jaw.x*37.0f)*0.007f - _cosf(p_jaw.z*59.0f)*0.01f;//deformation
    float ujaw = HollowSphere(p_jaw+to_float3(0,-0.95f,0.6f),0.38f,0.02f,0.05f );//jaw sdf
    float p_cutB = p_skull.z-0.6f;//cutting plane back
    ujaw = sMax(p_cutB, ujaw,0.05f); //jaw back cut
    float3 p_jawsc = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z); //new point def for side cuts
    swi2S(p_jawsc,x,y, mul_f2_mat2(swi2(p_jawsc,x,y) , Rot(-1.0f)));
    swi2S(p_jawsc,y,z, mul_f2_mat2(swi2(p_jawsc,y,z) , Rot(-0.4f)));
    p_jawsc.y += 0.3f;
    ujaw = sMax(p_jawsc.y, ujaw,0.04f); //side cuts
    d = sMin(ujaw, d,0.1f);//union upper jaw and d
    d -= _sinf(10.0f*p_skull.x)*_sinf(8.0f*p_skull.y)*_sinf(7.0f*p_skull.z)*0.01f;//deformation head

    // ===== EYES ===== //

    // CHEEKBONES
    float3 p_eyesur = p_skull-to_float3(0,0.3f,0);
    float eyesur = Ellipsoid(to_float3(_fabs(p_eyesur.x),p_eyesur.y,p_eyesur.z)+to_float3(-0.34f,0.5f,-0.87f),to_float3(0.25f,0.24f,0.2f));//cheekbones
    eyesur += _sinf(12.0f*p_skull.x)*_sinf(9.0f*p_skull.y)*_sinf(13.0f*p_skull.z)*0.05f;//deformation
    d = sMin(eyesur, d,0.2f);//union cheekbones and d

    // EYE HOLES
    float3 p_eye = p_skull;
    p_eye += _sinf(p_eye.x*29.0f+_cosf(p_eye.y*32.0f))*0.008f; //eye distortion
    float eye = Ellipsoid(to_float3(_fabs(p_eye.x),p_eye.y-0.4f,p_eye.z)+to_float3(-0.29f,0.49f,-1.1f),to_float3(0.21f,0.25f,0.25f)); // eye ball
    eye = sMin(eye,Sphere(to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z)-to_float3(0.25f,0.0f,0.7f),0.35f),0.05f);// eye hole back
    eye = sMax(-p_eye.y,eye,0.2f);
    d = sMax(eye, d,0.05f); //eye ball subtraction

    // ===== NOSE ===== //

    // NOSE BONE
    float3 p_nbone = p_skull;
    swi2S(p_nbone,y,z, mul_f2_mat2(swi2(p_nbone,y,z) , Rot(-2.2f)));
    float nbone = HollowSphere(p_nbone+to_float3(0,-1.0f,0.4f),0.1f,0.08f,0.04f );
    d = sMin(d,nbone,0.05f);

    // NOSE HOLE
    float3 p_nose = to_float3(_fabs(p_skull.x),p_skull.y,p_skull.z);
    swi2S(p_nose,x,y, mul_f2_mat2(swi2(p_nose,x,y) , Rot(-0.4f)));
    float nose = Ellipsoid(p_nose-to_float3(-0.1f,-0.3f,1.0f),to_float3(0.05f,0.1f,0.8f));
    d = sMax(nose, d,0.06f); //nose subtraction

    // ===== LOWER JAW ===== //

    // LOWER JAW TRANSFORMATION
    float3 pN = p_skull;
    pN.z -= 0.5f;
    pN.y += 0.4f;
    swi2S(pN,y,z, mul_f2_mat2(swi2(pN,y,z) , RotSin(_sinf(t*0.8f),_sinf(t)*0.3f+smoothstep(0.0f,1.0f,_sinf(t)*0.3f),-0.4f)));
    pN.z += 0.5f;
    pN.y -= 0.4f;
    pN -= _sinf(pN.y*15.0f)*0.001f - _cosf(pN.z*39.0f)*0.001f;//deformation

    // CHIN
    float3 p_ljaw = pN;
    p_ljaw.y *= 0.8f;
    p_ljaw.z -= _sinf(pN.y*26.0f)*0.008f;
    p_ljaw.y -= _cosf(pN.x*15.0f+_sinf(pN.y*7.0f)*2.0f)*0.01f;
    float ljaw = HollowSphere(p_ljaw+to_float3(0,0.77f,-0.74f),0.38f,0.03f,0.04f );//chin
    ljaw = sMax(p_ljaw.z-0.65f,ljaw,0.1f);

    // MANDIBLE BACK
    float3 p_maB = to_float3(_fabs(pN.x),pN.y,pN.z);
    swi2S(p_maB,y,z, mul_f2_mat2(swi2(p_maB,y,z) , Rot(-1.3f)));
    swi2S(p_maB,x,z, mul_f2_mat2(swi2(p_maB,x,z) , Rot(-0.34f)));
    swi2S(p_maB,x,y, mul_f2_mat2(swi2(p_maB,x,y) , Rot(-0.39f)));
    p_maB -= to_float3(0.85f,0.0f,0.63f);
    ljaw = sMin(ljaw,rBox(p_maB,to_float3(0.0f,smoothstep(0.0f,6.0f,_fabs(-p_maB.z)+0.9f),0.45f),0.04f),0.17f);//union chin + mandible
    ljaw = sMax(Ellipsoid(p_maB-to_float3(0.0f,0.0f,-0.55f),to_float3(0.5f,0.15f,0.26f)),ljaw,0.04f);//mandible top cut to get a V
    p_ljaw -= _sinf(p_ljaw.y*32.0f)*0.001f - _cosf(p_ljaw.z*29.0f)*0.007f;//deformation
    ljaw = sMax(p_ljaw.y+0.93f,ljaw,0.02f);//bottom cut

    d = _fminf(ljaw, d);//union chin and d

    // ===== UPPER TEETH ===== //
    float3 p_tooth = p_skull;
    p_tooth -= to_float3(0,-0.77f,0.7f);
    p_tooth *= to_float3(1.2f,1,1);
    swi2S(p_tooth,x,z, pModPolar(swi2(p_tooth,x,z), 28.0f));//alignment polar

    float teeth = Ellipsoid(p_tooth - to_float3(0.43f, 0.0f, 0.0f), to_float3(0.03f, 0.15f, 0.045f));
    teeth = _fmaxf(teeth, -p_skull.y-0.73f+_sinf(p_skull.x*32.0f)*0.006f);//cut teetch bottom
    teeth = _fmaxf(teeth, -p_skull.z+0.7f);// cut teeth back
    d = _fminf(d,teeth);

    // ===== LOWER TEETH ===== //
    float3 p_ltooth = pN;
    p_ltooth -= to_float3(0,-0.77f,0.7f);
    p_ltooth *= to_float3(1.2f,1,1);
    swi2S(p_ltooth,x,z, pModPolar(swi2(p_ltooth,x,z), 28.0f));//alignment polar

    float lteeth = Ellipsoid(p_ltooth - to_float3(0.42f, 0.0f, 0.0f), to_float3(0.03f, 0.15f, 0.045f));
    lteeth = _fmaxf(lteeth, pN.y+0.79f+_sinf(p_skull.x*29.0f)*0.004f);//cut teeth top
    lteeth = _fmaxf(lteeth, -pN.z+0.7f);// cut teeth back
    d = _fminf(d,lteeth);

    d = _fminf(d,arm);//union skull, arm, hand and fingers

    return d;
}
__DEVICE__ float March(float3 ro, float3 rd, float iTime){
    float h=0.0f;
    for(int i=0;i<MAX_STEPS; i++){
        float3 p = ro + rd*h;
        float d = map(p, iTime);
        h += d;
        if(h>MAX_DIST||_fabs(d)<SURF_DIST) break;
    }
    return h;
}

__DEVICE__ float3 CalcNormal (float3 p, float iTime){
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    float3 n = to_float3_s(0.0f);
    for( int i=0; i<4; i++ ){
        float3 e = 0.5773f*(2.0f*to_float3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0f);
        n += e*map(p+0.001f*e, iTime);
    }
    return normalize(n);
}

//by https://iquilezles.org/
__DEVICE__ float CalcAO( in float3 pos, in float3 nor, float iTime ){
  float occ = 0.0f;
    float sca = 1.0f;
    for( int i=0; i<8; i++ )
    {
        float h = 0.001f + 0.15f*(float)(i)/4.0f;
        float d = map( pos + h*nor, iTime );
        occ += (h-d)*sca;
        sca *= 0.95f;
    }
    return clamp( 1.0f - 1.5f*occ, 0.0f, 1.0f );
}

//by https://iquilezles.org/
__DEVICE__ float CalcSoftshadow( in float3 ro, in float3 rd, in float mint, in float tmax, float iTime){
  float res = 1.0f;
    float t = mint;
    float ph = 1e10;

    for( int i=0; i<32; i++ )
    {
    float h = map( ro + rd*t, iTime );
        {
          res = _fminf( res, 10.0f*h/t );
        }
            float y = h*h/(2.0f*ph);
            float d = _sqrtf(h*h-y*y);
            res = _fminf( res, 10.0f*d/_fmaxf(0.0f,t-y) );
            ph = h;
        t += h;

        if( res<0.0001f || t>tmax ) break;
    }

    res = clamp( res, 0.0f, 1.0f );
    return res*res*(3.0f-2.0f*res);
}






__DEVICE__ float3 applyFog( in float3  rgb,       // original color of the pixel
                           in float distance, float3 color_fog ) // camera to point distance
{
    const float b = 0.01f;
    float fogAmount = 1.0f - _expf( -_powcf(distance, 1.45f)*b );
    return _mix( rgb, color_fog, fogAmount );
}

// Marching functions
struct object
{
    float d;
    int id;
};

__DEVICE__ float skull(float3 p, float size)
{
    float cc_c = sdCappedCylinder(p - to_float3(0.0f, 0.05f, -0.07f), to_float2(size * 0.35f, 0.0005f));
    float eye = opUnion(
        sdCappedCylinder(p - to_float3(0.13f, 0.05f, -0.08f), to_float2(size * 0.16f, 0.1f)),
        sdCappedCylinder(p - to_float3(-0.13f, 0.05f, -0.08f), to_float2(size * 0.16f, 0.1f)));

    float nose = sdCappedCylinder(p - to_float3(0.0f, 0.05f, 0.1f), to_float2(size * 0.12f, 0.1f));

    float teeth = sdCappedCylinder(p - to_float3(0.13f, 0.05f, -0.07f), to_float2(size * 0.15f, 0.1f));

    //float jaw = sdBox(p - to_float3(0.0f, 0.05f, 0.31f), to_float3(0.15f, 0.0005f, 0.15f));
    float jaw = opUnion(
        sdCappedCylinder(p - to_float3(0.04f, 0.05f, 0.32f), to_float2(size * 0.148f, 0.001f)),
        sdCappedCylinder(p - to_float3(-0.04f, 0.05f, 0.32f), to_float2(size * 0.148f, 0.001f)));

    float content = opSmoothSubtraction(
        rounding(sdBox(p - to_float3(0.0f, 0.05f, 0.34f), to_float3(0.08f, 0.25f, 0.02f)), 0.03f),
        opUnion(opSubtraction(nose, opSubtraction(eye, cc_c)), jaw), 0.1f);
    return content;
}

__DEVICE__ float coin_c(float3 p, float size)
{
    float3 cc_p = p + to_float3(0.0f, 0.05f, 0.0f);
    float cc_c = sdCappedCylinder(cc_p, to_float2(size * 0.4f, 0.0005f));
    float cc_cs = sdCappedCylinder(cc_p, to_float2(size * 0.3f, 0.2f));
    float cc_off = sdCappedCylinder(cc_p - to_float3(0.58f, 0.0f, 0.0f), to_float2(size * 0.5f, 0.2f));
    float bar = sdBox(cc_p + to_float3(0.05f, 0.0f, 0.0f), to_float3(0.05f, 0.0005f, 0.45f));
    float content = opUnion(opSubtraction(cc_off, opSubtraction(cc_cs, cc_c)), bar);
    return content;
}

__DEVICE__ float coin(float3 p, float iTime)
{
    // Rotating coin
    float angularspeed = 1.5f * iTime;
    p = mul_mat3_f3(rotateX(PI_2) , mul_mat3_f3(rotateY(angularspeed) , p));

    // coin body
    float size = 0.94f;
    float b = 0.85f;
    float c = sdCappedCylinder(p, to_float2(size, 0.1f));
    float cs = sdCappedCylinder(p, to_float2(size * b, 0.2f));
    float ci = sdCappedCylinder(p, to_float2(size * b, 0.01f));
    float _coin = opSmoothUnion(opSubtraction(cs, c), ci, 0.03f);

    // coin content
    float mark = coin_c(p, size);
    float _skull = skull(p, size);

    // components

    float imperfections = fbm(p, 4).x * 0.04f;

    float final = opSmoothUnion(opSmoothUnion(_coin, mark, 0.05f), _skull, 0.05f) + imperfections;

    return final;
}

__DEVICE__ struct object croci( in float3 p, float iTime)
{
    float3 c = to_float3(3.5f, 0.0f, 2.7f);
    float3 q = mod_f3f3(p,c)-0.5f*c;
    struct object ret = {coin(q, iTime), 1};
    return ret;//object(coin(q, iTime), 1);
}

__DEVICE__ struct object floor_plane(float3 p)
{
    float f = p.y - 0.1f + fbm(p, 2).x * 0.19f;
    //float g = p.y - 0.1f + fbm(p, 12).y * 0.25f;
    struct object ret = {f,0};
    return ret;//object(f, 0);
}

__DEVICE__ struct object getDist(float3 p, float iTime)
{
    float4 s = to_float4(0.0f, 1.05f, 6.0f, 1.0f);
    struct object box = {coin(p - swi3(s,x,y,z), iTime), 1};
    struct object plane = floor_plane(p);

    if (box.d < plane.d && p.z > 2.8f)
    {
        return box;
    }
    return plane;
}

__DEVICE__ struct object rayMarch(float3 ro, float3 rd, float iTime)
{
    struct object obj;
    obj.d = 0.0f;

    for (int i = 0; i < MAX_STEPS; i++)
    {
        float3 p = ro + rd * obj.d;
        struct object o = getDist(p, iTime);

        obj.d += o.d;
        obj.id = o.id;

        if (obj.d > MAX_DIST || o.d < SURF_DIST) break;
    }

    return obj;
}

__DEVICE__ float3 getNormal(float3 p, float iTime)
{
    struct object o = getDist(p, iTime);
    float2 e = to_float2(0.01f, 0.0f);

    float3 n = o.d - to_float3(
                              getDist(p - swi3(e,x,y,y), iTime).d,
                              getDist(p - swi3(e,y,x,y), iTime).d,
                              getDist(p - swi3(e,y,y,x), iTime).d);

  return normalize(n);
}

__DEVICE__ float getDiffuse(float3 p, float3 n, float iTime, float3 light_pos)
{
    //swi2(lightPos,x,z) += to_float2(_sinf(iTime * 0.8f), _cosf(iTime)) * 0.6f;

    float3 l = normalize(light_pos - p);

    float diffuse = _fmaxf(0.0f, dot(l, n));

    struct object o = rayMarch(p + n * SURF_DIST * 2.0f, l, iTime);
    if (o.d < length(light_pos - p)) diffuse *= 0.4f;

    return diffuse;
}

__DEVICE__ float getSpecular(float3 p, float3 n, float s, float3 light_pos, float3 camera_pos, float light_intensity)
{
    float3 l = normalize(light_pos - p);
    float3 v = normalize(camera_pos - p);
    float3 r = reflect(-l, n);

    float spec = _powcf(_fmaxf(dot(v, r), 0.0f), s);
    float specular = light_intensity * spec;

    return specular;
}

__KERNEL__ void ForkDullSkullFrostbyte591Fuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  float  SHADE = params->SHADE;
  float4 ColorGolden = to_float4(params->ColorGolden[0], params->ColorGolden[1], params->ColorGolden[2], params->ColorGolden[3]);
  float4 ColorZombie = to_float4(params->ColorZombie[0], params->ColorZombie[1], params->ColorZombie[2], params->ColorZombie[3]);
  float4 Color_floor = to_float4(params->Color_floor[0], params->Color_floor[1], params->Color_floor[2], params->Color_floor[3]);
  float4 Color_coin = to_float4(params->Color_coin[0], params->Color_coin[1], params->Color_coin[2], params->Color_coin[3]);
  float4 Color_sky = to_float4(params->Color_sky[0], params->Color_sky[1], params->Color_sky[2], params->Color_sky[3]);
  float4 Color_fog = to_float4(params->Color_fog[0], params->Color_fog[1], params->Color_fog[2], params->Color_fog[3]);
  float2 ViewDXY = to_float2(params->ViewDXY[0], params->ViewDXY[1]);
  float  ViewDZ = params->ViewDZ;
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float  Alpha = params->Alpha;
  float  Fog = params->Fog;
  float  xcenter = params->xcenter;
  float  light_intensity = params->light_intensity;
  float  coin_specular_shineness = params->coin_specular_shineness;

  // --------

  //SHADE -= 1;

  mat2 dummy1;
  mat3 dummy2;

    float alpha = 1.0f;

float IIIIIIIIIIIIIIIIIIIIIIIIIIII;

    const float3 color_floor = swi3(Color_floor,x,y,z);//to_float3(0.0f, 0.0f, 0.0f);
    const float3 color_coin  = swi3(Color_coin,x,y,z);//to_float3(0.560f, 0.396f, 0.039f);
    const float3 color_sky   = swi3(Color_sky,x,y,z);//to_float3(0.0f, 0.0f, 0.0f);
    const float3 color_fog   = swi3(Color_fog,x,y,z);//to_float3(0.0f, 0.0f, 0.0f);

    const float3 camera_pos = to_float3(0.0f, 1.2f, 2.5f) + to_float3_aw(ViewDXY, ViewDZ);

    const float3 light_pos = to_float3(8.0f, 8.5f, -5.0f);
    //const float  light_intensity = 1.0f;
    //const float coin_specular_shineness = 10.0f;


    float2 uv = fract_f2(((fragCoord - 0.5f * iResolution)*2.0f/ iResolution.y)*2.0f)-0.5f;
    swi2S(uv,x,y, swi2(uv,x,y)*((_sinf(iTime)+1.5f)*6.0f)*0.25f);
    float2 uv3 = (fragCoord-0.5f*iResolution)/iResolution.y;
    //mirroreffect
    uv3 = to_float2(mirror(uv3.x)+xcenter, uv3.y);

    //Coin
    float2 uv2 = (fragCoord/iResolution);
    //ec2 uv3 = uv*2.0f;

    float3 col = to_float3_s(0);

    float2 movement = to_float2(
        ((iMouse.x - iResolution.x / 2.0f) * 0.0005f),
        ((iMouse.y - iResolution.y / 2.0f) * 0.0005f));

    float3 ro = camera_pos;
    float3 rd = normalize(to_float3(uv.x, uv.y, 1.0f));


    struct object o = rayMarch(ro, rd, iTime);
    float3 p = ro + rd * o.d;
    uv2 = fract_f2(uv2*5.0f);
    float3 normal = getNormal(p, iTime);
    float diffuse = getDiffuse(p, normal, iTime, light_pos);

    if (o.id == 0)
    {
        col = color_floor * 0.05f + diffuse * color_floor;
    }
    else
    {
        float specular = getSpecular(p, normal, coin_specular_shineness, light_pos, camera_pos, light_intensity);
        col = color_coin * 0.5f + diffuse * 0.5f + specular;
    }

    if (o.d > MAX_DIST)
    {
        int RowSampler = 15; // Total irre !!! Tausend Shader, die liefen ohne diese Zeile mit OpenCL. Dieser Shader braucht aber genau dies nur für OpenCL -> Total irre !!!
        col = _tex2DVecN(iChannel1,uv2.x,uv2.y,15).x * color_sky;
    }
    else
    {
        //col = _mix(col, to_float3(0.812f, 0.275f, 0.016f), clamp(0.0f, 1.0f, _powcf(o.d, 1.2f) / _powcf(40.0f, 1.2f)));
        col = applyFog(col, o.d, color_fog);
    }
    float3 col1 = col;
    //end coin

    float3 raa = to_float3(0, _sinf(iTime*0.18f)*2.0f*_cosf(iTime*0.52f), 12.5f);
    swi2S(raa,y,z, mul_f2_mat2(swi2(raa,y,z) , Rot(_sinf(iTime*0.41f)*0.2f)));
    swi2S(raa,x,z, mul_f2_mat2(swi2(raa,x,z) , Rot(_cosf(iTime*0.32f)*0.2f)));
    float3 rbb = RayDir(uv3, raa, to_float3(0,0.0f,0) + to_float3_aw(ViewXY, ViewZ), 2.0f);


    float crz = (iMouse.x - iResolution.x / 2.0f) / iResolution.x * PI;
    float crx = (iMouse.y - iResolution.y / 2.0f) / iResolution.y * PI;

    mat3 m = mul_mat3_mat3(to_mat3(_cosf(crz), 0.0f, _sinf(crz), 0.0f, 1.0f, 0.0f, -_sinf(crz), 0.0f, _cosf(crz)) ,
                           to_mat3(1.0f, 0.0f, 0.0f, 0.0f, _cosf(crx), _sinf(crx), 0.0f, -_sinf(crx), _cosf(crx)));

    if(iMouse.z > 0.0f)
    {
        raa = mul_mat3_f3(m , raa);
        rbb = mul_mat3_f3(m , rbb);
    }



    float d = March(raa, rbb, iTime);

    float dif = 0.0f;
    float3 material = to_float3_s(0.0f);

    if(d<MAX_DIST){
        float3 p = raa + rbb*d;
        float3 n = CalcNormal(p, iTime);
        float3 r = reflect(rbb,n);
        float3 ref = swi3(decube_f3(iChannel0,r),x,y,z);
        material = swi3(ColorGolden,x,y,z);//to_float3(0.95f,0.6f,0.1f);
        float3 l = normalize(to_float3(3,3,1));
        float3 hal = normalize(normalize(to_float3(3,2,1))-rbb);
        dif = clamp(dot(n,l),0.0f,1.0f)*CalcSoftshadow(p,l,0.01f,3.0f, iTime);//diffuse
        float spe = _powcf(clamp(dot(n,hal),0.0f,1.0f),8.0f)*clamp(1.2f+dot(hal,rbb),0.0f,1.0f);//specular
        float amb = clamp(-n.x,0.0f,1.0f);//ambient
        float ao = CalcAO(p,n, iTime);//ambient occlusion
        float fresnel = _powcf(1.0f+dot(rbb, n),3.0f); //fresnel

        if (SHADE==0)
        {
          col = to_float3_s(dif)*3.0f+0.06f;
          col *= ao;
        }
        if (SHADE==1)
        {
          col = to_float3_s(fresnel*4.0f);
          col *= n*0.5f+0.9f;
        }
        if (SHADE==2)
        {
          material = swi3(ColorZombie,x,y,z);//to_float3(0.6f,1.0f,0.7f);
          col = material*dif*30.0f*spe;
          col += material*amb*ao;
          col *= n*0.7f+0.5f;
          col *= 1.0f-fresnel;
        }
        if (SHADE==3)
        {
          col = to_float3_s(d*0.4f);
        }
        if (SHADE==4)
        {
          col = material;
          col *= 32.0f*spe+amb;
          col *= ref;
          col *= ao;
        }

    }
    else
      alpha = Alpha;


    col = _mix( col, to_float3_s(0), clamp(d*0.086f*Fog, 0.0f, 1.0f));//fog
    col = pow_f3(col, to_float3_s(0.4545f)); //gamma correction


    //Mixing
    float3 mc  = (col+(col1-(col*200.0f)));
    float3 mcm = _fmaxf(mc, to_float3_s(0.0f));
    col = mix_f3(col,col1,mcm);

    fragColor = to_float4_aw(col,1.0f);
    //fragColor = texture(iChannel1, uv);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InSHADEButton = self:AddInput("SHADE", "SHADE", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "MultiButtonControl",
      MBTNC_ForceButtons = true,
      MBTNC_ShowName     = false,
      { MBTNC_AddButton  = " Mono", },  { MBTNC_AddButton  = " Funky", },  { MBTNC_AddButton  = " Zombie", },  { MBTNC_AddButton  = " Ghost", },  { MBTNC_AddButton  = " Golden", }, 
		  MBTNC_StretchToFit = true,
      IC_NoLabel         = true,
		  INP_Default        = 0,
      IC_Visible         = true,
  })

  self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("ColorGolden", "ColorGolden", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorGolden",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorGoldenColorR = self:AddInput("Red",   "ColorGoldenRed",   { INP_Default  = 0.95, IC_ControlID = 0, attrs})
    InColorGoldenColorG = self:AddInput("Green", "ColorGoldenGreen", { INP_Default  = 0.6, IC_ControlID = 1, attrs})
    InColorGoldenColorB = self:AddInput("Blue",  "ColorGoldenBlue",  { INP_Default  = 0.1, IC_ControlID = 2, attrs})
    InColorGoldenColorA = self:AddInput("Alpha", "ColorGoldenAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorZombie", "ColorZombie", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorZombie",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorZombieColorR = self:AddInput("Red",   "ColorZombieRed",   { INP_Default  = 0.6, IC_ControlID = 0, attrs})
    InColorZombieColorG = self:AddInput("Green", "ColorZombieGreen", { INP_Default  = 1.0, IC_ControlID = 1, attrs})
    InColorZombieColorB = self:AddInput("Blue",  "ColorZombieBlue",  { INP_Default  = 0.7, IC_ControlID = 2, attrs})
    InColorZombieColorA = self:AddInput("Alpha", "ColorZombieAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color_floor", "Color_floor", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color_floor",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor_floorColorR = self:AddInput("Red",   "Color_floorRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InColor_floorColorG = self:AddInput("Green", "Color_floorGreen", { INP_Default  = 0.0, IC_ControlID = 1, attrs})
    InColor_floorColorB = self:AddInput("Blue",  "Color_floorBlue",  { INP_Default  = 0.0, IC_ControlID = 2, attrs})
    InColor_floorColorA = self:AddInput("Alpha", "Color_floorAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color_coin", "Color_coin", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color_coin",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor_coinColorR = self:AddInput("Red",   "Color_coinRed",   { INP_Default  = 0.560, IC_ControlID = 0, attrs})
    InColor_coinColorG = self:AddInput("Green", "Color_coinGreen", { INP_Default  = 0.396, IC_ControlID = 1, attrs})
    InColor_coinColorB = self:AddInput("Blue",  "Color_coinBlue",  { INP_Default  = 0.039, IC_ControlID = 2, attrs})
    InColor_coinColorA = self:AddInput("Alpha", "Color_coinAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color_sky", "Color_sky", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color_sky",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor_skyColorR = self:AddInput("Red",   "Color_skyRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InColor_skyColorG = self:AddInput("Green", "Color_skyGreen", { INP_Default  = 0.0, IC_ControlID = 1, attrs})
    InColor_skyColorB = self:AddInput("Blue",  "Color_skyBlue",  { INP_Default  = 0.0, IC_ControlID = 2, attrs})
    InColor_skyColorA = self:AddInput("Alpha", "Color_skyAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color_fog", "Color_fog", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color_fog",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor_fogColorR = self:AddInput("Red",   "Color_fogRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InColor_fogColorG = self:AddInput("Green", "Color_fogGreen", { INP_Default  = 0.0, IC_ControlID = 1, attrs})
    InColor_fogColorB = self:AddInput("Blue",  "Color_fogBlue",  { INP_Default  = 0.0, IC_ControlID = 2, attrs})
    InColor_fogColorA = self:AddInput("Alpha", "Color_fogAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()
  self:EndControlNest()

  InViewDXYPoint = self:AddInput("ViewDXY", "ViewDXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewDZSlider = self:AddInput("ViewDZ", "ViewDZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InAlphaSlider = self:AddInput("Alpha", "Alpha", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 1.0,
      })

  InFogSlider = self:AddInput("Fog", "Fog", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 3.0,
          INP_Default        = 1.0,
      })

  InxcenterSlider = self:AddInput("xcenter", "xcenter", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = -0.1,
      })

  Inlight_intensitySlider = self:AddInput("light_intensity", "light_intensity", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 1.0,
      })

  Incoin_specular_shinenessSlider = self:AddInput("coin_specular_shineness", "coin_specular_shineness", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 30.0,
          INP_Default        = 10.0,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Main = 2, LINK_Visible = false, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
  
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "ForkDullSkullFrostbyte591Fuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "ForkDullSkullFrostbyte591Fuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iFrame = req.Time

  params.SHADE = InSHADEButton:GetValue(req).Value
  params.ColorGolden = {
    InColorGoldenColorR:GetValue(req).Value,
    InColorGoldenColorG:GetValue(req).Value,
    InColorGoldenColorB:GetValue(req).Value,InColorGoldenColorA:GetValue(req).Value
  }
  params.ColorZombie = {
    InColorZombieColorR:GetValue(req).Value,
    InColorZombieColorG:GetValue(req).Value,
    InColorZombieColorB:GetValue(req).Value,InColorZombieColorA:GetValue(req).Value
  }
  params.Color_floor = {
    InColor_floorColorR:GetValue(req).Value,
    InColor_floorColorG:GetValue(req).Value,
    InColor_floorColorB:GetValue(req).Value,InColor_floorColorA:GetValue(req).Value
  }
  params.Color_coin = {
    InColor_coinColorR:GetValue(req).Value,
    InColor_coinColorG:GetValue(req).Value,
    InColor_coinColorB:GetValue(req).Value,InColor_coinColorA:GetValue(req).Value
  }
  params.Color_sky = {
    InColor_skyColorR:GetValue(req).Value,
    InColor_skyColorG:GetValue(req).Value,
    InColor_skyColorB:GetValue(req).Value,InColor_skyColorA:GetValue(req).Value
  }
  params.Color_fog = {
    InColor_fogColorR:GetValue(req).Value,
    InColor_fogColorG:GetValue(req).Value,
    InColor_fogColorB:GetValue(req).Value,InColor_fogColorA:GetValue(req).Value
  }
  params.ViewDXY = {InViewDXYPoint:GetValue(req).X,InViewDXYPoint:GetValue(req).Y}
  params.ViewDZ = InViewDZSlider:GetValue(req).Value
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.Alpha = InAlphaSlider:GetValue(req).Value
  params.Fog = InFogSlider:GetValue(req).Value
  params.xcenter = InxcenterSlider:GetValue(req).Value
  params.light_intensity = Inlight_intensitySlider:GetValue(req).Value
  params.coin_specular_shineness = Incoin_specular_shinenessSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


  local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "ForkDullSkullFrostbyte591Fuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", iChannel0)            -- Anpassen !!
    node:AddInput("iChannel1", Image_Buff_GlobalA)   -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
