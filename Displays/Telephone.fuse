--[[--/*

  Telephone.fuse

  Based on https://www.shadertoy.com/view/ldVyDG a WebGL shader created by jvb.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--


-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   AA;
  bool   BD;
  bool   CG;
  bool   Tex;
  bool   PTAO;
  bool   Background;
  bool   Logo;
  float  ColorBKG[4];
  float  ViewXY[2];
  float  ViewZ;
  float  ViewPXY[2];
  float  ViewPZ;
  float  AutoRot1;
  float  AutoRot2;
  float  Level0;
  float  Level1;
  float  TexXY[2];
  float  TexScale;
  float  OffsetX;
  float  OffsetZ;
  float  OffsetXX;
  float  OffsetZZ;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c

    #define swi2S(a,b,c,d)   a.b##c = d

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define mod_f(a,b)  fmod((a),(b))

 #define abs_f2(a) _fabs(a)
 #define abs_f3(a) _fabs(a)
 #define pow_f3(a,b) pow(a,b)

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define mod_f(a,b) _fmod(a,b)
 #define abs_f2(a) fabs(a)
 #define abs_f3(a) fabs(a)
 #define pow_f3(a,b) pow(a,b)

 #else // Generic

 #if defined(DEVICE_IS_OPENCL)
   __DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
 #endif

    #define fract(a) ((a)-_floor(a))

 #define mod_f(a,b) ((a)-(b)*_floor((a)/(b)))
 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define pow_f3(a,b) to_float3(_powf((a).x,(b).x),_powf((a).y,(b).y),_powf((a).z,(b).z))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer A 'Previsualization: Buffer A' to iChannel0
// Connect Buffer A 'Texture: Picture' to iChannel1
// Connect Buffer A 'Texture: Logo' to iChannel2

#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

// telefone by jvb
// Apple logo by zachernuk https://www.shadertoy.com/view/ltX3Dr


__DEVICE__ float3 rotatey(in float3 p, float ang) { return to_float3(p.x*_cosf(ang)-p.z*_sinf(ang),p.y,p.x*_sinf(ang)+p.z*_cosf(ang)); }
__DEVICE__ float3 rotatex(in float3 p, float ang) { return to_float3(p.x, p.y*_cosf(ang)-p.z*_sinf(ang),p.y*_sinf(ang)+p.z*_cosf(ang)); }
__DEVICE__ float3 rotatez(in float3 p, float ang) { return to_float3(p.x*_cosf(ang)-p.y*_sinf(ang),p.x*_sinf(ang)+p.y*_cosf(ang),p.z); }

__DEVICE__ float2 sph(in float3 p, float r, float o) { return to_float2(length(p)-r, o); }
__DEVICE__ float2 rbox(in float3 p, in float3 b, float r, float o) { return to_float2(length(_fmaxf(abs_f3(p)-b,to_float3_s(0.0f)))-r, o); }
__DEVICE__ float2 sdbox( float3 p, float3 b, float o ) { float3 d = abs_f3(p) - b; return to_float2(_fminf(_fmaxf(d.x,_fmaxf(d.y,d.z)),0.0f) + length(_fmaxf(d,to_float3_s(0.0f))), o); }
__DEVICE__ float2 plane(in float3 p, in float3 n, float d, float o) { return to_float2(dot(p,n)-d, o); }

__DEVICE__ float2 min2(in float2 o1, in float2 o2) { if (o1.x < o2.x) return o1; else return o2; }
__DEVICE__ float2 max2(in float2 o1, in float2 o2) { if (o1.x > o2.x) return o1; else return o2; }


__DEVICE__ bool rbox2d2(in float2 p, in float2 b, in float r) {
  float t = 0.002f;
  float3 col = to_float3_s(1);
  b -= to_float2(r,r);
  float d = length(_fmaxf(abs_f2(p),b)-b)-r;
  if (_fabs(d) < t)
    return true;
  return false;
}
__DEVICE__ bool rbox2df(in float2 p, in float2 b, in float r) {
  float t = 0.01f;
  float3 col = to_float3_s(1);
  b -= to_float2(r,r);
  float d = length(_fmaxf(abs_f2(p),b)-b)-r;
  if (d < t)
    return true;
  return false;
}

__DEVICE__ float3 rbox2d(in float2 p, in float2 b, in float r)
{
  float3 col = to_float3_s(0);
  float t = 0.0225f;  // thickness
  float d = length(_fmaxf(abs_f2(p),b)-b)-r*1.0f;
  if (_fabs(d) < t)
    col = to_float3_s(1);
  return col;
}

__DEVICE__ float3 box2d(in float2 p, in float2 b)
{
  float3 col = to_float3_s(0);
  if (_fabs(p.x) < b.x && _fabs(p.y) < b.y)
    col = to_float3_s(1);
  return col;
}

__DEVICE__ float3 d0(in float2 p) { float3 col = to_float3_s(0); col += rbox2d(p-to_float2(-0.0f,+0.0f),to_float2(0.2f,0.3f), 0.1f); return col; }
__DEVICE__ float3 d1(in float2 p) { float3 col = to_float3_s(0); col += rbox2d(p-to_float2(0.0f,+0.0f),to_float2(0.0f,0.4f), 0.0f); return col; }
__DEVICE__ float3 d2(in float2 p) { float3 col = to_float3_s(0); p.x *= -1.0f; if (p.x < 0.0f && p.y > -0.1f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p.x *= -1.0f; if (p.x < 0.0f && p.y > 0.25f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p *= to_float2(1.0f,-1.0f); if (p.x < 0.0f && p.y > -0.1f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p.x *= -1.0f; if (p.x < 0.0f && p.y > 0.25f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); return col;}
__DEVICE__ float3 d3(in float2 p) { float3 col = to_float3_s(0); p.y = _fabs(p.y); if (p.x < 0.0f && p.y > 0.3f) col += rbox2d(p-to_float2(0.0f,+0.0f),to_float2(0.2f,0.3f), 0.1f); if (p.x > 0.0f && p.y > -0.0f) col += rbox2d(p-to_float2(0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f); return col;}
__DEVICE__ float3 d4(in float2 p) { float3 col = to_float3_s(0); if (p.x < -0.2f && p.y < 0.1f) {col += rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f); } col += rbox2d(p-to_float2(+0.05f,+0.0f),to_float2(0.25f,0.0f), 0.0f); col += rbox2d(p-to_float2(+0.3f,+0.0f),to_float2(0.0f,0.4f), 0.0f); col += rbox2d(p-to_float2(-0.3f,+0.25f),to_float2(0.0f,0.15f), 0.0f); return col; }
__DEVICE__ float3 d5(in float2 p) { float2 op = p; float3 col = to_float3_s(0); if (p.x < 0.0f && p.y > -0.1f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p.x *= -1.0f; if (p.x < 0.0f && p.y > 0.25f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p *= to_float2(1.0f,-1.0f); if (p.x < 0.0f && p.y > -0.1f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); p.x *= -1.0f; if (p.x < 0.0f && p.y > 0.25f) col += _fmaxf(col, rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f)); return col;}
__DEVICE__ float3 d6(in float2 p) { float3 col = to_float3_s(0); if (p.x < +0.2f) col += rbox2d(p-to_float2(+0.2f,+0.2f),to_float2(0.4f,0.1f), 0.1f); col += rbox2d(p-to_float2(+0.0f,-0.2f),to_float2(0.2f,0.1f), 0.1f); return col;}
__DEVICE__ float3 d7(in float2 p) { float3 col = to_float3_s(0); if ( p.y > 0.3f) col += rbox2d(p-to_float2(-0.0f,+0.0f),to_float2(0.2f,0.3f), 0.1f); col += rbox2d(p-to_float2(+0.3f,-0.05f),to_float2(0.0f,0.35f), 0.0f); return col;}
__DEVICE__ float3 d8(in float2 p) { float3 col = to_float3_s(0); col += rbox2d(p-to_float2(+0.0f,+0.2f),to_float2(0.2f,0.1f), 0.1f); col += rbox2d(p-to_float2(+0.0f,-0.2f),to_float2(0.2f,0.1f), 0.1f); return col; }
__DEVICE__ float3 d9(in float2 p) { float3 col = to_float3_s(0); p *= to_float2(-1.0f,-1.0f); if (p.x < +0.2f) col += rbox2d(p-to_float2(+0.2f,+0.2f),to_float2(0.4f,0.1f), 0.1f); col += rbox2d(p-to_float2(+0.0f,-0.2f),to_float2(0.2f,0.1f), 0.1f); col += rbox2d(p-to_float2(+0.1f,+0.4f),to_float2(0.2f,0.0f), 0.0f); return col;}

__DEVICE__ float ls(float2 p1, float2 p2, float2 p3) { return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y); }
__DEVICE__ bool PointInTriangle (float2 pt, float2 v1, float2 v2, float2 v3) { bool b1, b2, b3; b1 = ls(pt, v1, v2) < 0.0f;b2 = ls(pt, v2, v3) < 0.0f; b3 = ls(pt, v3, v1) < 0.0f; return ((b1 == b2) && (b2 == b3)); }



__DEVICE__ float2 scene(in float3 p, float iTime, float3 View)
{
  float3 op = p;
  float2 d = to_float2(1000.0f, -1.0f);

  d = min2(d, to_float2(-1,1)*sdbox(p, to_float3(8,6,64),1.0f));
  p -= to_float3(0,0,-16);
  p = rotatey(p,iTime*0.2f+0.0f*p.x*_sinf(iTime) + View.x);
  p = rotatex(p,iTime*0.3f + View.y);
  p = rotatez(p,iTime*0.4f + View.z);

  float2 d2 = to_float2(1,1)*rbox(p, to_float3(2.0f,00.25f,4),1.0f,0.0f);
  d2 = max2(d2, to_float2(1,1)*sdbox(p, to_float3(3.5f,0.25f,6),0.0f));
  d2 = max2(d2, to_float2(-1,1)*sph(p-to_float3(0,1.1f,4), 1.0f, 0.0f));
  d2 = max2(d2, to_float2(-1,1)*sph(to_float3(0,1,1)*(p-to_float3(0,0.4f,3.2f)), 0.16f, 0.0f));
  d2 = max2(d2, to_float2(-1,1)*sph(to_float3(0,1,1)*(p-to_float3(0,0.4f,-4.5f)), 0.16f, 0.0f));
  d = min2(d,d2) ;

  return d;
}

__DEVICE__ float3 get_normal(in float3 p, float iTime, float3 View)
{
  float3 eps = to_float3(0.001f, 0, 0);
  float nx = scene(p + swi3(eps,x,y,y),iTime,View).x - scene(p - swi3(eps,x,y,y),iTime,View).x;
  float ny = scene(p + swi3(eps,y,x,y),iTime,View).x - scene(p - swi3(eps,y,x,y),iTime,View).x;
  float nz = scene(p + swi3(eps,y,y,x),iTime,View).x - scene(p - swi3(eps,y,y,x),iTime,View).x;
  return normalize(to_float3(nx,ny,nz));
}

__DEVICE__ float draw_digit(in float2 p, float d)
{
  if (d == 0.0f) if (d0(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 1.0f) if (d1(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 2.0f) if (d2(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 3.0f) if (d3(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 4.0f) if (d4(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 5.0f) if (d5(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 6.0f) if (d6(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 7.0f) if (d7(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 8.0f) if (d8(swi2(p,x,y)).x > 0.0f) return 1.0f;
  if (d == 9.0f) if (d9(swi2(p,x,y)).x > 0.0f) return 1.0f;
  return 0.0f;
}
__DEVICE__ float3 get_tex(in float3 p)
{

  float3 op = p;
  float3 col2 = to_float3_s(0.5f);
  float3 col3 = to_float3_s(0.75f);

  if (p.y > 6.5f) return to_float3_s(2.0f);

  float3 c1 = to_float3(1,1,1)*clamp(1.0f/(1.0f+2.5f*_fabs(p.y+6.0f)),-1.0f,1.0f);
  c1 += clamp(1.0f/(1.0f+2.5f*_fabs(p.y-6.0f)),-1.0f,1.0f);

  return c1+0.1f*_sinf(-2.0f+0.4f*p.z);
}


// Apple logo by zachernuk https://www.shadertoy.com/view/ltX3Dr
__DEVICE__ float addCircle(in float2 uv, in float2 p,float r,float a,float b) {

    float t = 0.0f;
    float2 rel = uv-_mix(p,to_float2(0.25f,0.4f), t);
        float r1 = r;//_mix(r, 0.2f, t);
    if(length(rel)<r1) {

        float angle = _atan2f(rel.y,rel.x);
        if(angle>3.141f*0.95f) {
       //     angle-=2.0f*3.141f;
        }
        if(angle>a && angle<b) {
          return 1.0f;
        } else {
       //   outColor.y+=0.015f;
        }
    }

  return 0.0f;
}



__DEVICE__ bool isInApple(in float2 uv) {

    float location =
    addCircle(uv, to_float2(0.234f, 0.285f), 0.067f, -3.4f,3.2f)+
    -2.75f*addCircle(uv, to_float2(0.222f, 0.135f), 0.099f, -3.4f,3.2f)+
    addCircle(uv, to_float2(0.000f, 0.399f), 0.591f, 0.15f,0.76f)+
    addCircle(uv, to_float2(0.075f, 0.385f), 0.195f, -4.0f,5.4f)+
    addCircle(uv, to_float2(0.117f, 0.424f), 0.252f, -3.5f,-2.3f)+
    addCircle(uv, to_float2(0.364f, 0.385f), 0.190f, -3.4f,3.2f)+
    addCircle(uv, to_float2(0.452f, 0.399f), 0.588f, 2.38f,3.1f)-
    //bite
    2.0f*addCircle(uv, to_float2(0.630f, 0.432f), 0.189f, -3.4f,3.25f)+
    addCircle(uv, to_float2(0.091f, 0.720f), 0.106f, -3.4f,3.2f)+
    addCircle(uv, to_float2(0.220f, 0.663f), 0.169f, -3.4f,3.2f)-
    4.0f* addCircle(uv, to_float2(0.223f, 0.963f), 0.17f, -3.4f,3.2f)+
    addCircle(uv, to_float2(0.360f, 0.720f), 0.109f, -3.4f,3.2f ) +
    //leaf
    9.0f* _fminf(
    addCircle(uv, to_float2(0.193f, 0.000f), 0.180f, -3.4f,3.2f),
    addCircle(uv, to_float2(0.388f, 0.168f), 0.180f, -3.4f,3.2f));

    return location>=1.0f;
}

__DEVICE__ float2 rotateUV(float2 uv, float2 pivot, float rotation) {
    float sine = sin(rotation);
    float cosine = cos(rotation);

    uv -= pivot;
    uv.x = uv.x * cosine - uv.y * sine;
    uv.y = uv.x * sine + uv.y * cosine;
    uv += pivot;

    return uv;
}

__DEVICE__ float2 rotateUVmatrinx(float2 uv, float2 pivot, float rotation)
{
    mat2 rotation_matrix= to_mat2(  sin(rotation),-cos(rotation),
                                    cos(rotation), sin(rotation)
                                 );
    uv -= pivot;
    uv= mul_f2_mat2(uv,rotation_matrix);
    uv += pivot;
    return uv;
}


#define PI 3.14159265f

__DEVICE__ float3 get_screen(in float3 p, float iTime, bool Tex, float4 TexP, float4 Offset, float3 View, bool Logo, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2)
{

  p -= to_float3(0,0,-16);
  p = rotatey(p,iTime*0.2f+0.0f*p.x*_sinf(iTime) + View.x);
  p = rotatex(p,iTime*0.3f + View.y);
  p = rotatez(p,iTime*0.4f + View.z);

  //if (p.y > 0.0f && _fabs(p.x) < 1.0f && _fabs(p.z) < 1.0f)
  //      return to_float3_s(1);

    float3 col = to_float3_s(0);
    if (p.y > 0.0f) {
      float dig1 = _floor(mod_f(iTime, 10.0f));
      float dig2 = _floor(mod_f(iTime/10.0f, 10.0f));
      col += to_float3(1,1,1)*draw_digit(to_float2(1,-1)*(swi2(p,x,z)-to_float2(-0.5f,-0.5f)), dig2);
      col += to_float3(1,1,1)*draw_digit(to_float2(1,-1)*(swi2(p,x,z)-to_float2(0.5f,-0.5f)), dig1);
      if (_fabs(length(swi2(p,x,z)-to_float2(0,-0.5f)) -1.5f) < 0.01f)  col += to_float3(1,1,1);

      if(Tex && _fabs(p.x+Offset.x) < Offset.z && _fabs(p.z+Offset.y) < Offset.w)
      {
         swi2S(p,x,z, rotateUVmatrinx(swi2(p,x,z), to_float2(0.5f,0.5f), PI));
         col = swi3(texture(iChannel1, (to_float2(p.x*TexP.w,p.z)+swi2(TexP,x,y))*TexP.z),x,y,z);
         //col = swi3(texture(iChannel1, swi2(p,x,z)),x,y,z);
      }

    }
    else {
        if (Logo)
        {
          col = swi3(texture(iChannel2, to_float2(-0.75f*TexP.w,0.75f)*(swi2(p,x,z)-to_float2(+1.2f,-3.0f))),x,y,z);
        }
        else
          if (isInApple(to_float2(-0.75f,0.75f)*(swi2(p,x,z)-to_float2(+0.25f,-3.0f)))) {
             col = to_float3_s(0.25f);
        }
    }
    return col;
}

// ambient occlusion approximation
// multiply with color
__DEVICE__ float ambientOcclusion(float3 p, float3 n, float time, float iTime, float3 View)
{
    const int steps = 3;
    const float delta = 0.5f;

    float a = 0.0f;
    float weight = 1.0f;
    for(int i=1; i<=steps; i++) {
        float d = ((float)(i) / (float)(steps)) * delta;
        a += weight*(d - scene(p + n*d,iTime,View).x);
        weight *= 0.5f;
    }
    return clamp(1.0f - a, 0.0f, 1.0f);
}

__DEVICE__ float random(float3 scale, float seed, float2 fragCoord) {
  return fract(_sinf(dot(fragCoord + seed, swi2(scale,x,y))) * 43758.5453f + seed);
}

__DEVICE__ float3 cosineWeightedDirection(float seed, float3 normal, float2 fragCoord) {
  float u = random(to_float3(12.9898f, 78.233f, 151.7182f), seed, fragCoord);
  float v = random(to_float3(63.7264f, 10.873f, 623.6736f), seed, fragCoord);
  float r = _sqrtf(u);
  float angle = 6.283185307179586f * v;
  float3 sdir, tdir;
  if (_fabs(normal.x)<0.5f) {
    sdir = cross(normal, to_float3(1,0,0));
  } else {
    sdir = cross(normal, to_float3(0,1,0));
  }
  tdir = cross(normal, sdir);
  return r*_cosf(angle)*sdir + r*_sinf(angle)*tdir + _sqrtf(1.0f-u)*normal;
}

__DEVICE__ float3 uniformlyRandomDirection(float seed, float2 fragCoord) {
  float u = random(to_float3(12.9898f, 78.233f, 151.7182f), seed, fragCoord);
  float v = random(to_float3(63.7264f, 10.873f, 623.6736f), seed, fragCoord);
  float z = 1.0f - 2.0f * u; float r = _sqrtf(1.0f - z * z);
  float angle = 6.283185307179586f * v;
  return to_float3(r * _cosf(angle), r * _sinf(angle), z);
}

__DEVICE__ float3 uniformlyRandomVector(float seed, float2 fragCoord) {
  return uniformlyRandomDirection(seed,fragCoord) * _sqrtf(random(to_float3(36.7539f, 50.3658f, 306.2759f), seed, fragCoord));
}
__DEVICE__ float3 mr(in float3 ro, in float3 rd, float time, float iTime, float3 View)
{
  float3 colorMask = to_float3_s(1.0f);
  float3 color = to_float3_s(0.0f);

  if (true) {
    float3 pos = ro;
    float dist = 0.0f;
    float2 d;

    for (int i = 0; i < 64; i++) {
      d = scene(pos, iTime, View);
      pos += rd*d.x;
      dist += d.x;
      //pos += uniformlyRandomVector(time+float(i))*0.01f;

    }
    if (dist < 1000.0f && _fabs(d.x) < 0.5f ) {
      float o = d.y;
      float3 n = get_normal(pos, iTime, View);
      float fres = clamp(dot(n,-rd), 0.0f, 1.0f);
      float3 tex = get_tex(pos);
      float3 surfaceColor = to_float3_s(0);
      if (o == 0.0f) {
        //surfaceColor = to_float3(1,1,1);

        surfaceColor = 0.5f*tex*_mix(to_float3(1,1,1)*1.0f,to_float3(1,1,1)*0.2f, fres);
      }
      else if (o == 1.0f) {
        surfaceColor = 1.0f*tex*_mix(to_float3(1,1,1)*1.0f,to_float3(1,1,1)*0.6f, fres);
      }
      else if (o == 2.0f) {
        surfaceColor =1.0f* _mix(to_float3(1,1,0),to_float3(1,1,0)*1.0f, fres);
      }

      float shade = 1.0f; //ambientOcclusion(pos+0.01f*n, n, time, iTime, View);
      colorMask *= surfaceColor;
      color += 1.0f*colorMask*(0.25f*surfaceColor*shade); //*clamp(dist*0.25f, 0.0f, 2.5f);
    }
  }

  return color;
}


__DEVICE__ float3 rm(in float3 ro, in float3 rd, float time, float iTime, float2 fragCoord, bool Tex, float4 TexP, float4 Offset, float3 View, bool PTAO, float3 ColorBKG, inout float *Alpha, bool Background, bool Logo, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2)
{
  float3 colorMask = to_float3_s(1.0f);
  float3 color = to_float3_s(0.0f);

  if (true) {
    float3 pos = ro;
    float dist = 0.0f;
    float2 d;

    for (int i = 0; i < 128; i++) {
      d = scene(pos, iTime, View);
      pos += rd*d.x;
      dist += d.x;
    }
    if (dist < 1000.0f && _fabs(d.x) < 100.5f) {
      float o = d.y;
      float3 n = get_normal(pos, iTime, View);
      float3 l = normalize(to_float3(0,1,0));
      float3 lightpos = to_float3(0,0,+40);
      //float diff = clamp(dot(n,l), 0.0f, 1.0f);
      float fres = clamp(dot(n,-rd), 0.0f, 1.0f);
      float3 tex = get_tex(pos);
      float3 surfaceColor = to_float3_s(0);

      if (o == 0.0f) {
          //tex = get_screen(pos, iTime, Tex, TexP, Offset, View, Logo, iChannel1, iChannel2);
        #define MULTISAMPLE_TEX 1
        #if MULTISAMPLE_TEX
          tex = to_float3_s(0);
          for (int i = 0; i < 16; i++) {
            float AA = 0.01f;
            tex += get_screen(pos + AA*uniformlyRandomVector((float)(time)+(float)(i),fragCoord), iTime, Tex, TexP, Offset, View, Logo, iChannel1, iChannel2);
          }
          tex /= 16.0f;
        #else
          tex = get_screen(pos, iTime, Tex, TexP, Offset, View, Logo, iChannel1, iChannel2);
        #endif

        //surfaceColor = 0.0f*to_float3(1,1,1);
        float3 refl= 1.75f*mr(pos+n*0.01f, reflect(rd,normalize(n)), time, iTime, View);
        surfaceColor = 2.0f*refl*_mix(to_float3(1,1,1)*2.0f,to_float3(1,1,1)*0.2f, fres);
        surfaceColor += tex;

        *Alpha = 1.0f;

      }
      else if (o == 1.0f) {
        if(Background)
          surfaceColor = ColorBKG;//to_float3(1.0f,0.0f,0.0f);
        else
          surfaceColor = tex*_mix(to_float3(1,1,1)*1.0f,to_float3(1,1,1)*1.0f, fres);

      }
      else if (o == 2.0f) {
        //surfaceColor =1.0f* _mix(to_float3(1,1,1)*1.0f,to_float3(1,1,1)*1.0f, fres)*(0.75f+0.25f*_sinf(2.3f+0.25f*pos.z));
        surfaceColor = to_float3(0.0f,1.0f,0.0f); // nicht aktiv
      }
      //surfaceColor *= clamp(dist*0.25f, 0.0f, 1.0f);
      //vec3 surfaceColor = to_float3_s(1.0f)*0.5f;
      //#define PTAO 1
      float shade = 1.0f;
      if(PTAO)
        shade = ambientOcclusion(pos+0.01f*n, n, time, iTime, View)*0.5f+0.5f;

      colorMask *= surfaceColor;
      color += 1.0f*colorMask*(0.25f*surfaceColor*shade)*clamp(dist*0.25f, 0.0f, 2.5f);
    }
    else {
      color = to_float3(0.0f,0.0f,0.0f); // nicht aktiv
    }
  }
  return color;
}

__DEVICE__ float3 rotateVec2(float3 posr, float2 angle)
{
    posr = to_float3(posr.x, posr.y*_cosf(angle.y) + posr.z*_sinf(angle.y), posr.y*_sinf(angle.y) - posr.z*_cosf(angle.y));
    posr = to_float3(posr.x*_cosf(angle.x) + posr.z*_sinf(angle.x), posr.y, posr.x*_sinf(angle.x) - posr.z*_cosf(angle.x));

    return posr;
}

__KERNEL__ void TelephoneFuse__Buffer_A(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   AA = params->AA;
  bool   BD = params->BD;
  bool   CG = params->CG;
  bool   Tex = params->Tex;
  bool   PTAO = params->PTAO;
  bool   Background = params->Background;
  bool   Logo = params->Logo;
  float4 ColorBKG = to_float4(params->ColorBKG[0], params->ColorBKG[1], params->ColorBKG[2], params->ColorBKG[3]);
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float2 ViewPXY = to_float2(params->ViewPXY[0], params->ViewPXY[1]);
  float  ViewPZ = params->ViewPZ;
  float  AutoRot1 = params->AutoRot1;
  float  AutoRot2 = params->AutoRot2;
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float2 TexXY = to_float2(params->TexXY[0], params->TexXY[1]);
  float  TexScale = params->TexScale;
  float  OffsetX = params->OffsetX;
  float  OffsetZ = params->OffsetZ;
  float  OffsetXX = params->OffsetXX;
  float  OffsetZZ = params->OffsetZZ;

  // --------

  fragCoord+=0.5f;

  float ratio = iResolution.y/iResolution.x;

  float4 TexP = to_float4(TexXY.x, TexXY.y, TexScale, ratio);

  float4 Offset = to_float4(OffsetX, OffsetZ, OffsetXX, OffsetZZ);

  float3 View = to_float3_aw(ViewPXY,ViewPZ);

  float Alpha = ColorBKG.w;

  float2 p = 2.0f*( fragCoord / iResolution )-1.0f;
  p.x *= iResolution.x/iResolution.y; // inb4 fabrice**

  // mouse
  float2 mo = swi2(iMouse,x,y)/iResolution;


  float3 campos = to_float3(_sinf(iTime)*10.0f,1,0);

  campos = rotateVec2(campos, to_float2(Level0*mo.x, Level1*mo.y + 0.05f));

  #ifdef XXX
  float3 camtar = to_float3(0,1,1) + to_float3_aw(ViewXY,ViewZ);
  float3 camup = to_float3(0,1,0);

  float3 camdir = normalize(camtar-campos);
  float3 cu = normalize(cross(camdir, camup));
  float3 cv = normalize(cross(cu, camdir));
  #endif

  float3 color = to_float3_s(0.0f);

  //#define ANTIALIASING 0
  //#if ANTIALIASING
  if(AA)
    p += swi2(uniformlyRandomVector(iTime,fragCoord),x,y)*0.0025f;
  //#endif

  float3 ro = to_float3(0,0,-3.0f);
  float3 rd = normalize(to_float3(p.x,p.y,-2.0f)+to_float3_aw(ViewXY,ViewZ));

      // camera
  float stime=_sinf(6.0f*mo.x)*Level0;
  float ctime=_cosf(6.0f*mo.x)*Level1;

  ro=to_float3(2.0f*stime,2.5f*mo.y, 4.5f + 0.5f*ctime);


  // barrel distortion
  if(BD)
  {
    rd = normalize(to_float3_aw(swi2(rd,x,y), _sqrtf(_fmaxf(rd.z*rd.z - dot(swi2(rd,x,y), swi2(rd,x,y))*0.2f, 0.0f))));
    rd.z *= -1.0f;
  }

  float aa = 0.01f;
  float ta = 0.0f;
  color = rm(ro, rd, iTime, iTime, fragCoord, Tex, TexP, Offset, View, PTAO, swi3(ColorBKG,x,y,z), &Alpha, Background, Logo, iChannel1, iChannel2);


  color = pow_f3(color, to_float3_s(1.0f/2.3f))*1.0f;
  //#define COLOR_GRAIN 1
  if(CG)
    color += uniformlyRandomVector(iTime, fragCoord)*0.1f;

  color = _mix(color, swi3(texture(iChannel0,fragCoord/iResolution),x,y,z), 0.5f);
  fragColor = to_float4_aw(color, Alpha);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0


__KERNEL__ void TelephoneFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   AA = params->AA;
  bool   BD = params->BD;
  bool   CG = params->CG;
  bool   Tex = params->Tex;
  bool   PTAO = params->PTAO;
  bool   Background = params->Background;
  bool   Logo = params->Logo;
  float4 ColorBKG = to_float4(params->ColorBKG[0], params->ColorBKG[1], params->ColorBKG[2], params->ColorBKG[3]);
  float2 ViewXY = to_float2(params->ViewXY[0], params->ViewXY[1]);
  float  ViewZ = params->ViewZ;
  float2 ViewPXY = to_float2(params->ViewPXY[0], params->ViewPXY[1]);
  float  ViewPZ = params->ViewPZ;
  float  AutoRot1 = params->AutoRot1;
  float  AutoRot2 = params->AutoRot2;
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float2 TexXY = to_float2(params->TexXY[0], params->TexXY[1]);
  float  TexScale = params->TexScale;
  float  OffsetX = params->OffsetX;
  float  OffsetZ = params->OffsetZ;
  float  OffsetXX = params->OffsetXX;
  float  OffsetZZ = params->OffsetZZ;

  // --------

    // Normalized pixel coordinates (from 0 to 1)
    float2 uv = fragCoord/iResolution;

    // Output to screen
    fragColor = _tex2DVecN(iChannel0,uv.x,uv.y,15);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })

  InAACheckbox = self:AddInput("AA", "AA", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InBDCheckbox = self:AddInput("BD", "BD", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InCGCheckbox = self:AddInput("CG", "CG", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InTexCheckbox = self:AddInput("Tex", "Tex", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InPTAOCheckbox = self:AddInput("PTAO", "PTAO", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InBackgroundCheckbox = self:AddInput("Background", "Background", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InLogoCheckbox = self:AddInput("Logo", "Logo", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  self:BeginControlNest("ColorBKG", "ColorBKG", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorBKG",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorBKGColorR = self:AddInput("Red",   "ColorBKGRed",   { INP_Default  = 0.0, IC_ControlID = 0, attrs})
    InColorBKGColorG = self:AddInput("Green", "ColorBKGGreen", { INP_Default  = 0.0, IC_ControlID = 1, attrs})
    InColorBKGColorB = self:AddInput("Blue",  "ColorBKGBlue",  { INP_Default  = 0.0, IC_ControlID = 2, attrs})
    InColorBKGColorA = self:AddInput("Alpha", "ColorBKGAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InViewXYPoint = self:AddInput("ViewXY", "ViewXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewZSlider = self:AddInput("ViewZ", "ViewZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InViewPXYPoint = self:AddInput("ViewPXY", "ViewPXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InViewPZSlider = self:AddInput("ViewPZ", "ViewPZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InAutoRot1Slider = self:AddInput("AutoRot1", "AutoRot1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InAutoRot2Slider = self:AddInput("AutoRot2", "AutoRot2", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InLevel0Slider = self:AddInput("Level0", "Level0", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InLevel1Slider = self:AddInput("Level1", "Level1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InTexXYPoint = self:AddInput("TexXY", "TexXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InTexScaleSlider = self:AddInput("TexScale", "TexScale", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.5,
      })

  InOffsetXSlider = self:AddInput("OffsetX", "OffsetX", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InOffsetZSlider = self:AddInput("OffsetZ", "OffsetZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.65,
      })

  InOffsetXXSlider = self:AddInput("OffsetXX", "OffsetXX", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 2.8,
      })

  InOffsetZZSlider = self:AddInput("OffsetZZ", "OffsetZZ", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 3.8,
      })



  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    { CCS_AddString = "BufferB", },
    { CCS_AddString = "BufferC", },
    { CCS_AddString = "BufferD", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Main = 2, INP_Required = false  })
  InChannel2 = self:AddInput( "iChannel2",  "iChannel2",  { LINKID_DataType = "Image", LINK_Visible = false, LINK_Main = 3, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })

  ShaderFuse.end_create()

end


-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
  
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstI = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "TelephoneFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "TelephoneFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  iChannel2 = InChannel2:GetValue(req)

  if iChannel2==nil then
    iChannel2 = Image(imgattrs)
    iChannel2:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end


  params.AA = InAACheckbox:GetValue(req).Value
  params.BD = InBDCheckbox:GetValue(req).Value
  params.CG = InCGCheckbox:GetValue(req).Value
  params.Tex = InTexCheckbox:GetValue(req).Value
  params.PTAO = InPTAOCheckbox:GetValue(req).Value
  params.Background = InBackgroundCheckbox:GetValue(req).Value
  params.Logo = InLogoCheckbox:GetValue(req).Value
  params.ColorBKG = {
    InColorBKGColorR:GetValue(req).Value,
    InColorBKGColorG:GetValue(req).Value,
    InColorBKGColorB:GetValue(req).Value,InColorBKGColorA:GetValue(req).Value
  }
  params.ViewXY = {InViewXYPoint:GetValue(req).X,InViewXYPoint:GetValue(req).Y}
  params.ViewZ = InViewZSlider:GetValue(req).Value
  params.ViewPXY = {InViewPXYPoint:GetValue(req).X,InViewPXYPoint:GetValue(req).Y}
  params.ViewPZ = InViewPZSlider:GetValue(req).Value
  params.AutoRot1 = InAutoRot1Slider:GetValue(req).Value
  params.AutoRot2 = InAutoRot2Slider:GetValue(req).Value
  params.Level0 = InLevel0Slider:GetValue(req).Value
  params.Level1 = InLevel1Slider:GetValue(req).Value
  params.TexXY = {InTexXYPoint:GetValue(req).X,InTexXYPoint:GetValue(req).Y}
  params.TexScale = InTexScaleSlider:GetValue(req).Value
  params.OffsetX = InOffsetXSlider:GetValue(req).Value
  params.OffsetZ = InOffsetZSlider:GetValue(req).Value
  params.OffsetXX = InOffsetXXSlider:GetValue(req).Value
  params.OffsetZZ = InOffsetZZSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


    local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
    node:AddInput("iChannel2",iChannel2) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddInput("iChannel0",Image_Buff_GlobalA)  -- Anpassen !!
    nodeA:AddInput("iChannel1",iChannel0)  -- Anpassen !!
    nodeA:AddInput("iChannel2",iChannel1)  -- Anpassen !!
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "TelephoneFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
      
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
