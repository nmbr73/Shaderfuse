--[[--/*

  Vt220CodingatnightJipi.fuse

  Based on https://www.shadertoy.com/view/XdtfzX a WebGL shader created by sprash3.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--


-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  bool   DayNightMan;
  bool   DayNight;
  bool   Tex;
  float  BEZEL_COL[4];
  float  ambientDay;
  float  ambientNight;
  float  REFLECTION_BLUR_SIZE;
  float  CURVE;
  float  SMOOTH;
  float  SHINE;
  float  ShineXY[2];
  float  Deb1;
  float  Deb2;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)

  #endif

#if defined(USE_NATIVE_METAL_IMPL)

 #define abs_f2(a) _fabs(a)
 #define ceil_f2(a) ceil(a)
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define abs_f2(a) fabs(a)
 #define ceil_f2(a) ceil(a)
 #define distance_f2( p1, p2) distance(p1, p2)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define abs_f2(a) to_float2(_fabs((a).x), _fabs((a).y))
 #define ceil_f2(a) to_float2(_ceil((a).x), _ceil((a).y))
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

  #endif

#endif


]]
-- /*


-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

#define PHOSPHOR_COL to_float4(0.2f, 1.0f, 0.2f, 0.0f)

__DEVICE__ float rand(float2 co){
    return fract(_sinf(dot(swi2(co,x,y) ,to_float2(12.9898f,78.233f))) * 43758.5453f);
}

// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------


#define FONT_SIZE to_float2(10.0f,20.0f)
#define ROWCOLS   to_float2(80.0f, 24.0f)

// Some Plasma stolen from dogeshibu for testing
__DEVICE__ float somePlasma(float2 uv, float2 iResolution, float iTime)
{
    uv /= iResolution;
    uv *= ROWCOLS; // 80 by 24 characters
    uv = ceil_f2(uv);
    uv /= ROWCOLS;

    float color = 0.0f;
    color += 0.7f*_sinf(0.5f*uv.x + iTime/5.0f);
    color += 3.0f*_sinf(1.6f*uv.y + iTime/5.0f);
    color += 1.0f*_sinf(10.0f*(uv.y * _sinf(iTime/2.0f) + uv.x * _cosf(iTime/5.0f)) + iTime/2.0f);
    float cx = uv.x + 0.5f*_sinf(iTime/2.0f);
    float cy = uv.y + 0.5f*_cosf(iTime/4.0f);
    color += 0.4f*_sinf(sqrt(100.0f*cx*cx + 100.0f*cy*cy + 1.0f) + iTime);
    color += 0.9f*_sinf(sqrt(75.0f*cx*cx + 25.0f*cy*cy + 1.0f) + iTime);
    color += -1.4f*_sinf(sqrt(256.0f*cx*cx + 25.0f*cy*cy + 1.0f) + iTime);
    color += 0.3f * _sinf(0.5f*uv.y + uv.x + _sinf(iTime));
    return 17.0f*(0.5f+0.499f*_sinf(color))*(0.7f+_sinf(iTime)*0.3f);
}

__DEVICE__ float textLines(float2 uvG, float iTime)
{
    float wt = 5.0f * (iTime + 0.5f*_sinf(iTime*1.4f) + 0.2f*_sinf(iTime*2.9f)); // wobbly time
    float2 uvGt = uvG + to_float2(0.0f, _floor(wt));
    float ll = rand(to_float2(uvGt.y, - 1.0f)) * ROWCOLS.x; // line length

    if (uvG.y > ROWCOLS.y - 2.0f){
        if (_ceil(uvG.x) == _floor(_fminf(ll, fract(wt)*ROWCOLS.x)))
          return 2.0f;
        if (_ceil(uvG.x) > _floor(_fminf(ll, fract(wt)*ROWCOLS.x)))
          return 0.0f;
    }
    if (uvGt.x > 5.0f && rand(uvGt) < 0.075f)
        return 0.0f;
    if (_fmaxf(5.0f, uvGt.x) > ll)
        return 0.0f;

    return rand(uvGt)*15.0f + 2.0f;
}

// Font Rendering
// From my shader https://www.shadertoy.com/view/llSXDV
// Can be done much better in the future...
#define l(y,a,b,c) roundLine(p, to_float2((float)(a), (float)(y)), to_float2((float)(b), (float)(y)), (c))
__DEVICE__ float roundLine(float2 p, float2 a, float2 b, float2 iResolution)
{
  b -= a + to_float2(1.0f,0.0f);
  p -= a;
    float f = length(p-clamp(dot(p,b)/dot(b,b),0.0f,1.0f)*b);
  if (iResolution.y < 320.0f) // attempt to get rid of aliasing on small resolution
    return smoothstep(1.0f, 0.9f, f);
    else if (iResolution.y < 720.0f)
    return smoothstep(0.75f, 0.5f, f);
  else
    return smoothstep(1.0f, 0.0f, f);
}

__DEVICE__ float vt220Font(float2 p, float c, float2 iResolution)
{
    if (c < 1.0f) return 0.0f;
    if(p.y > 16.0f){
        if(c > 2.0f) return 0.0f;
    if(c > 1.0f) return l(17,1,9,iResolution);
    }
    if(p.y > 14.0f){
    if(c > 16.0f) return l(15,3,8,iResolution);
    if(c > 15.0f) return l(15,1,8,iResolution);
    if(c > 14.0f) return l(15,1,3,iResolution)+ l(15,7,9,iResolution);
    if(c > 13.0f) return l(15,2,8,iResolution);
    if(c > 12.0f) return l(15,1,9,iResolution);
    if(c > 11.0f) return l(15,2,8,iResolution);
    if(c > 10.0f) return l(15,1,3,iResolution)+ l(15,6,8,iResolution);
    if(c > 9.0f)  return l(15,4,6,iResolution);
    if(c > 8.0f)  return l(15,2,4,iResolution)+ l(15,5,7,iResolution);
    if(c > 7.0f)  return l(15,2,8,iResolution);
    if(c > 6.0f)  return l(15,2,8,iResolution);
    if(c > 5.0f)  return l(15,2,8,iResolution);
    if(c > 4.0f)  return l(15,2,9,iResolution);
    if(c > 3.0f)  return l(15,1,8,iResolution);
    if(c > 2.0f)  return l(15,2,9,iResolution);
    }
    if(p.y > 12.0f){
    if(c > 16.0f) return l(13,2,4,iResolution)+ l(13,7,9,iResolution);
    if(c > 15.0f) return l(13,2,4,iResolution)+ l(13,7,9,iResolution);
    if(c > 14.0f) return l(13,1,3,iResolution)+ l(13,7,9,iResolution);
    if(c > 13.0f) return l(13,1,3,iResolution)+ l(13,7,9,iResolution);
    if(c > 12.0f) return l(13,1,3,iResolution);
    if(c > 11.0f) return l(13,4,6,iResolution);
    if(c > 10.0f) return l(13,2,4,iResolution)+ l(13,5,9,iResolution);
    if(c > 9.0f)  return l(13,2,8,iResolution);
    if(c > 8.0f)  return l(13,2,4,iResolution)+ l(13,5,7,iResolution);
    if(c > 7.0f)  return l(13,1,3,iResolution)+ l(13,7,9,iResolution);
    if(c > 6.0f)  return l(13,1,3,iResolution)+ l(13,7,9,iResolution);
    if(c > 5.0f)  return l(13,1,3,iResolution)+ l(13,7,9,iResolution);
    if(c > 4.0f)  return l(13,1,3,iResolution)+ l(15,2,9,iResolution);
    if(c > 3.0f)  return l(13,1,4,iResolution)+ l(13,7,9,iResolution);
    if(c > 2.0f)  return l(13,1,3,iResolution)+ l(13,6,9,iResolution);
    }
    if(p.y > 10.0f){
    if(c > 16.0f) return l(11,1,3,iResolution);
    if(c > 15.0f) return l(11,2,4,iResolution)+ l(11,7,9,iResolution);
    if(c > 14.0f) return l(11,1,9,iResolution);
    if(c > 13.0f) return l(11,7,9,iResolution);
    if(c > 12.0f) return l(11,2,5,iResolution);
    if(c > 11.0f) return l(11,4,6,iResolution);
    if(c > 10.0f) return l(11,3,5,iResolution)+ l(11,6,8,iResolution);
    if(c > 9.0f)  return l(11,4,6,iResolution)+ l(11,7,9,iResolution);
    if(c > 8.0f)  return l(11,1,8,iResolution);
    if(c > 7.0f)  return l(11,1,3,iResolution)+ l(11,7,9,iResolution);
    if(c > 6.0f)  return l(11,1,3,iResolution)+ l(11,7,9,iResolution);
    if(c > 5.0f)  return l(11,1,3,iResolution)+ l(11,7,9,iResolution);
    if(c > 4.0f)  return l(11,1,3,iResolution);
    if(c > 3.0f)  return l(11,1,3,iResolution)+ l(11,7,9,iResolution);
    if(c > 2.0f)  return l(11,2,9,iResolution);
    }
    if(p.y > 8.0f){
    if(c > 16.0f) return l(9,1,3,iResolution);
    if(c > 15.0f) return l(9,2,8,iResolution);
    if(c > 14.0f) return l(9,1,3,iResolution)+ l(9,7,9,iResolution);
    if(c > 13.0f) return l(9,4,8,iResolution);
    if(c > 12.0f) return l(9,4,8,iResolution);
    if(c > 11.0f) return l(9,4,6,iResolution);
    if(c > 10.0f) return l(9,4,6,iResolution);
    if(c > 9.0f)  return l(9,2,8,iResolution);
    if(c > 8.0f)  return l(9,2,4,iResolution)+ l(9,5,7,iResolution);
    if(c > 7.0f)  return l(9,1,3,iResolution)+ l(9,7,9,iResolution);
    if(c > 6.0f)  return l(9,1,3,iResolution)+ l(9,7,9,iResolution);
    if(c > 5.0f)  return l(9,1,3,iResolution)+ l(9,7,9,iResolution);
    if(c > 4.0f)  return l(9,1,3,iResolution)+ l(9,7,9,iResolution);
    if(c > 3.0f)  return l(9,1,4,iResolution)+ l(9,7,9,iResolution);
    if(c > 2.0f)  return l(9,7,9,iResolution);
    }
    if(p.y > 6.0f){
    if(c > 16.0f) return l(7,1,3,iResolution);
    if(c > 15.0f) return l(7,2,4,iResolution)+ l(7,7,9,iResolution);
    if(c > 14.0f) return l(7,2,4,iResolution)+ l(7,6,8,iResolution);
    if(c > 13.0f) return l(7,5,7,iResolution);
    if(c > 12.0f) return l(7,7,9,iResolution);
    if(c > 11.0f) return l(7,2,6,iResolution);
    if(c > 10.0f) return l(7,2,4,iResolution)+ l(7,5,7,iResolution);
    if(c > 9.0f)  return l(7,1,3,iResolution)+ l(7,4,6,iResolution);
    if(c > 8.0f)  return l(7,1,8,iResolution);
    if(c > 7.0f)  return l(7,2,8,iResolution);
    if(c > 6.0f)  return l(7,2,8,iResolution);
    if(c > 5.0f)  return l(7,2,8,iResolution);
    if(c > 4.0f)  return l(7,2,8,iResolution);
    if(c > 3.0f)  return l(7,1,8,iResolution);
    if(c > 2.0f)  return l(7,2,8,iResolution);
    }
    if(p.y > 4.0f){
    if(c > 16.0f) return l(5,2,4,iResolution)+ l(5,7,9,iResolution);
    if(c > 15.0f) return l(5,2,4,iResolution)+ l(5,7,9,iResolution);
    if(c > 14.0f) return l(5,3,7,iResolution);
    if(c > 13.0f) return l(5,6,8,iResolution);
    if(c > 12.0f) return l(5,1,3,iResolution)+ l(5,7,9,iResolution);
    if(c > 11.0f) return l(5,3,6,iResolution);
    if(c > 10.0f) return l(5,1,5,iResolution)+ l(5,6,8,iResolution);
    if(c > 9.0f)  return l(5,2,8,iResolution);
    if(c > 8.0f)  return l(5,2,4,iResolution)+ l(5,5,7,iResolution);
    if(c > 7.0f)  return 0.0f;
    if(c > 6.0f)  return 0.0f;
    if(c > 5.0f)  return 0.0f;
    if(c > 4.0f)  return 0.0f;
    if(c > 3.0f)  return l(5,1,3,iResolution);
    if(c > 2.0f)  return 0.0f;
    }
    if(p.y > 2.0f){
    if(c > 16.0f) return l(3,3,8,iResolution);
    if(c > 15.0f) return l(3,1,8,iResolution);
    if(c > 14.0f) return l(3,4,6,iResolution);
    if(c > 13.0f) return l(3,1,9,iResolution);
    if(c > 12.0f) return l(3,2,8,iResolution);
    if(c > 11.0f) return l(3,4,6,iResolution);
    if(c > 10.0f) return l(3,2,4,iResolution)+ l(3,7,9,iResolution);
    if(c > 9.0f)  return l(3,4,6,iResolution);
    if(c > 8.0f)  return l(3,2,4,iResolution)+ l(3,5,7,iResolution);
    if(c > 7.0f)  return l(3,2,4,iResolution)+ l(3,6,8,iResolution);
    if(c > 6.0f)  return l(3,1,3,iResolution)+ l(3,4,7,iResolution);
    if(c > 5.0f)  return l(3,2,4,iResolution)+ l(3,6,8,iResolution);
    if(c > 4.0f)  return 0.0f;
    if(c > 3.0f)  return l(3,1,3,iResolution);
    if(c > 2.0f)  return 0.0f;
    }
    else{
    if(c > 7.0f) return 0.0f;
    if(c > 6.0f) return l(1,2,5,iResolution)+ l(1,6,8,iResolution);
    }
    return 0.0f;
}

__KERNEL__ void Vt220CodingatnightJipiFuse__Buffer_A(__CONSTANTREF__ Params*  params, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 fragColor   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   DayNightMan = params->DayNightMan;
  bool   DayNight = params->DayNight;
  bool   Tex = params->Tex;
  float4 BEZEL_COL = to_float4(params->BEZEL_COL[0], params->BEZEL_COL[1], params->BEZEL_COL[2], params->BEZEL_COL[3]);
  float  ambientDay = params->ambientDay;
  float  ambientNight = params->ambientNight;
  float  REFLECTION_BLUR_SIZE = params->REFLECTION_BLUR_SIZE;
  float  CURVE = params->CURVE;
  float  SMOOTH = params->SMOOTH;
  float  SHINE = params->SHINE;
  float2 ShineXY = to_float2(params->ShineXY[0], params->ShineXY[1]);
  float  Deb1 = params->Deb1;
  float  Deb2 = params->Deb2;

  // --------

     fragCoord+=0.5f;

     float val = 0.0f;

     float2 uv = to_float2(fragCoord.x, iResolution.y - fragCoord.y);
     float2 uvT = to_float2(80, 24) * FONT_SIZE * uv / iResolution;
     float2 uvG = _floor(ROWCOLS * uv / iResolution);

    // Switch between 3 "programs"
    float prog = _sinf(iTime*0.5f);
    if(prog < -0.1f)
      val = somePlasma(fragCoord, iResolution, iTime);
    else if(prog < 0.1f)
      val = rand(uvG * iTime) * 17.0f;
    else
      val = textLines(uvG, iTime);
   fragColor = vt220Font(uvT - uvG * FONT_SIZE, val, iResolution) * PHOSPHOR_COL;

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, fragColor);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer A' to iChannel0
// Connect Image 'Texture: Picture' to iChannel1


//#define LIGHTS_ON true
//#define LIGHTS_ON false
#define LIGHTS_ON _sinf(fract(iTime/23.0f)+2.74f) + 0.05f*_fabs(_sinf(iTime*1000.0f)) < 0.0f

#define WIDTH  0.48f
#define HEIGHT 0.3f
//#define CURVE  3.0f
//#define SMOOTH 0.004f
//#define SHINE  0.66f

//#define BEZEL_COL to_float4(0.8f, 0.8f, 0.6f, 0.0f)

#define REFLECTION_BLUR_ITERATIONS 5
//#define REFLECTION_BLUR_SIZE 0.04f

//precision highp float;

__DEVICE__ float2 CurvedSurface(float2 uv, float r)
{
    return r * uv/_sqrtf(r * r - dot(uv, uv));
}

__DEVICE__ float2 crtCurve(float2 uv, float r, bool content, bool shine, float2 iResolution, float4 iMouse, float CURVE)
{
    r = CURVE * r;
//    if (iMouse.z > 0.0f) r *= _expf(0.5f - iMouse.y/iResolution.y); // CURVE schon als Parameter
    uv = (uv / iResolution - 0.5f) / to_float2(iResolution.y/iResolution.x, 1.0f) * 2.0f;
    uv = CurvedSurface(uv, r);
    if(content) uv *= 0.5f / to_float2(WIDTH, HEIGHT);
    uv = (uv / 2.0f) + 0.5f;
    if(!shine) if (iMouse.z > 0.0f) uv.x -= iMouse.x/iResolution.x - 0.5f;
    if(!shine) if (iMouse.z > 0.0f) uv.y -= (iMouse.y/iResolution.y - 0.5f);

  return uv;
}

__DEVICE__ float roundSquare(float2 p, float2 b, float r)
{
    return length(_fmaxf(abs_f2(p)-b, to_float2_s(0.0f)))-r;
}

// standard roundSquare
__DEVICE__ float stdRS(float2 uv, float r)
{
    return roundSquare(uv - 0.5f, to_float2(WIDTH, HEIGHT) + r, 0.05f);
}

// Calculate normal to distance function and move along
// normal with distance to get point of reflection
__DEVICE__ float2 borderReflect(float2 p, float r)
{
    float eps = 0.0001f;
    float2 epsx = to_float2(eps,0.0f);
    float2 epsy = to_float2(0.0f,eps);
    float2 b = (1.0f+to_float2(r,r))* 0.5f;
    r /= 3.0f;

    p -= 0.5f;
    float2 normal = to_float2(roundSquare(p-epsx,b,r)-roundSquare(p+epsx,b,r),
                              roundSquare(p-epsy,b,r)-roundSquare(p+epsy,b,r))/eps;
    float d = roundSquare(p, b, r);
    p += 0.5f;
    return p + d*normal;
}

__KERNEL__ void Vt220CodingatnightJipiFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  float4 c   = to_float4_s(0.0f);
  float2 fragCoord   = to_float2(fusion_x,fusion_y);


  bool   DayNightMan = params->DayNightMan;
  bool   DayNight = params->DayNight;
  bool   Tex = params->Tex;
  float4 BEZEL_COL = to_float4(params->BEZEL_COL[0], params->BEZEL_COL[1], params->BEZEL_COL[2], params->BEZEL_COL[3]);
  float  ambientDay = params->ambientDay;
  float  ambientNight = params->ambientNight;
  float  REFLECTION_BLUR_SIZE = params->REFLECTION_BLUR_SIZE;
  float  CURVE = params->CURVE;
  float  SMOOTH = params->SMOOTH;
  float  SHINE = params->SHINE;
  float2 ShineXY = to_float2(params->ShineXY[0], params->ShineXY[1]);
  float  Deb1 = params->Deb1;
  float  Deb2 = params->Deb2;

  // --------

    __TEXTURE2D__ Channel = iChannel0;

    if (Tex)
      Channel = iChannel1;

    c = to_float4(0.0f, 0.0f, 0.0f, 0.0f);

    float2 uvC = crtCurve(fragCoord, 1.0f, true, false, iResolution, iMouse, CURVE);    // Content Layer
    float2 uvS = crtCurve(fragCoord, 1.0f, false, false, iResolution, iMouse, CURVE);   // Screen Layer
    float2 uvE = crtCurve(fragCoord, 1.25f, false, false, iResolution, iMouse, CURVE);  // Enclosure Layer

    if ((LIGHTS_ON && !DayNightMan) || (DayNight && DayNightMan)  ) {
      // From my shader https://www.shadertoy.com/view/MtBXW3

      const float ambient = ambientDay;//0.33f;

      // Glass Shine
      float2 uvSh = crtCurve(fragCoord, 1.0f, false, true, iResolution, iMouse, CURVE);
      c += _fmaxf(0.0f, SHINE - distance_f2(uvSh, to_float2(0.5f, 1.0f)+ShineXY)) *
            smoothstep(SMOOTH/2.0f, -SMOOTH/2.0f, stdRS(uvS + to_float2(0.0f, 0.03f), 0.0f));

      // Ambient
      c += _fmaxf(0.0f, ambient - 0.5f*distance_f2(uvS, to_float2(0.5f,0.5f))) *
           smoothstep(SMOOTH, -SMOOTH, stdRS(uvS, 0.0f));

      // Enclosure Layer
      uvSh = crtCurve(fragCoord, 1.25f, false, true, iResolution, iMouse, CURVE);
      float4 b = to_float4(0.0f, 0.0f, 0.0f, 0.0f);
      for(int i=0; i<12; i++)
      b += (clamp(BEZEL_COL + rand(uvSh+(float)(i))*0.05f-0.025f, 0.0f, 1.0f) +
        rand(uvE+1.0f+(float)(i))*0.25f * _cosf((uvSh.x-0.5f)*3.1415f*1.5f))/12.0f;

      // Inner Border
      const float HHW = 0.5f * HEIGHT/WIDTH;

      c += b/3.0f*( 1.0f + smoothstep(HHW - 0.025f, HHW + 0.025f, _fabs(_atan2f(uvS.x-0.5f, uvS.y-0.5f))/3.1415f)
           + smoothstep(HHW + 0.025f, HHW - 0.025f, _fabs(_atan2f(uvS.x-0.5f, 0.5f-uvS.y))/3.1415f) )*
           smoothstep(-SMOOTH, SMOOTH, stdRS(uvS, 0.0f)) *
           smoothstep(SMOOTH, -SMOOTH, stdRS(uvE, 0.05f));

    // Inner Border Shine
      c += (b - 0.4f)*
        smoothstep(-SMOOTH*2.0f, SMOOTH*2.0f, roundSquare(uvE-to_float2(0.5f, 0.505f), to_float2(WIDTH, HEIGHT) + 0.05f, 0.05f)) *
        smoothstep(SMOOTH*2.0f, -SMOOTH*2.0f, roundSquare(uvE-to_float2(0.5f, 0.495f), to_float2(WIDTH, HEIGHT) + 0.05f, 0.05f));

      // Outer Border
      c += b *
        smoothstep(-SMOOTH, SMOOTH, roundSquare(uvE-to_float2(0.5f, 0.5f), to_float2(WIDTH, HEIGHT) + 0.05f, 0.05f)) *
        smoothstep(SMOOTH, -SMOOTH, roundSquare(uvE-to_float2(0.5f, 0.5f), to_float2(WIDTH, HEIGHT) + 0.15f, 0.05f));

      // Outer Border Shine
      c += (b - 0.4f)*
        smoothstep(-SMOOTH*2.0f, SMOOTH*2.0f, roundSquare(uvE-to_float2(0.5f, 0.495f), to_float2(WIDTH, HEIGHT) + 0.15f, 0.05f)) *
        smoothstep(SMOOTH*2.0f, -SMOOTH*2.0f, roundSquare(uvE-to_float2(0.5f, 0.505f), to_float2(WIDTH, HEIGHT) + 0.15f, 0.05f));

      // Table and room
      c += _fmaxf(0.0f , (1.0f - 2.0f* fragCoord.y/iResolution.y)) * to_float4(1, 1, 1, 0.0f) *
        smoothstep(-0.25f, 0.25f, roundSquare(uvC - to_float2(0.5f, -0.2f), to_float2(WIDTH+0.25f, HEIGHT-0.15f), 0.1f)) *
        smoothstep(-SMOOTH*2.0f, SMOOTH*2.0f, roundSquare(uvE-to_float2(0.5f, 0.5f), to_float2(WIDTH, HEIGHT) + 0.15f, 0.05f));

    } else {
      // From my shader https://www.shadertoy.com/view/lt2SDK

      const float ambient = ambientNight;//0.2f;

      // Ambient
      c += _fmaxf(0.0f, ambient - 0.3f*distance_f2(uvS, to_float2(0.5f,0.5f))) *
        smoothstep(SMOOTH, -SMOOTH, stdRS(uvS, 0.0f));

      // Inner Border
      c += BEZEL_COL * ambient * 0.7f *
        smoothstep(-SMOOTH, SMOOTH, stdRS(uvS, 0.0f)) *
        smoothstep(SMOOTH, -SMOOTH, stdRS(uvE, 0.05f));

      // Corner
      c -= (BEZEL_COL )*
        smoothstep(-SMOOTH*2.0f, SMOOTH*10.0f, stdRS(uvE, 0.05f)) *
        smoothstep(SMOOTH*2.0f, -SMOOTH*2.0f, stdRS(uvE, 0.05f));

      // Outer Border
      c += BEZEL_COL * ambient *
        smoothstep(-SMOOTH, SMOOTH, stdRS(uvE, 0.05f)) *
        smoothstep(SMOOTH, -SMOOTH, stdRS(uvE, 0.15f));

      // Inner Border Reflection
      for(int i = 0; i < REFLECTION_BLUR_ITERATIONS; i++)
      {
        float2 uvR = borderReflect(uvC + (to_float2(rand(uvC+(float)(i)), rand(uvC+(float)(i)+0.1f))-0.5f)*REFLECTION_BLUR_SIZE, 0.05f);
        c += (PHOSPHOR_COL - BEZEL_COL*ambient) * _tex2DVecN(Channel,uvR.x,uvR.y,15) / (float)(REFLECTION_BLUR_ITERATIONS) *
          smoothstep(-SMOOTH, SMOOTH, stdRS(uvS, 0.0f)) *
          smoothstep(SMOOTH, -SMOOTH, stdRS(uvE, 0.05f));
      }


      // Bloom using composed MipMaps
//      c += (textureLod(iChannel0, uvC, 3.0f) +
//            textureLod(iChannel0, uvC, 4.0f) +
//            textureLod(iChannel0, uvC, 5.0f))
//          * smoothstep(0.0f, -SMOOTH*20.0f, stdRS(uvS, -0.02f)) * 0.5f;
        c += texture(Channel, uvC)
             * smoothstep(0.0f, -SMOOTH*20.0f, stdRS(uvS, -0.02f)) * 0.5f;

    }

    float my = ((iMouse.y/iResolution.y) - 0.5f) * -0.6f;

    if (uvC.x > 0.0f && uvC.x < 1.0f && uvC.y+my > 0.0f && uvC.y+my < 1.0f)
      c += _tex2DVecN(Channel,uvC.x,uvC.y+my,15);

  c.w = 1.0f;

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, c);
}
]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InDayNightManCheckbox = self:AddInput("DayNightMan", "DayNightMan", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InDayNightCheckbox = self:AddInput("DayNight", "DayNight", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 1,
  })

  InTexCheckbox = self:AddInput("Tex", "Tex", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  self:BeginControlNest("BEZEL_COL", "BEZEL_COL", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "BEZEL_COL",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InBEZEL_COLColorR = self:AddInput("Red",   "BEZEL_COLRed",   { INP_Default  = 0.8, IC_ControlID = 0, attrs})
    InBEZEL_COLColorG = self:AddInput("Green", "BEZEL_COLGreen", { INP_Default  = 0.8, IC_ControlID = 1, attrs})
    InBEZEL_COLColorB = self:AddInput("Blue",  "BEZEL_COLBlue",  { INP_Default  = 0.6, IC_ControlID = 2, attrs})
    InBEZEL_COLColorA = self:AddInput("Alpha", "BEZEL_COLAlpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  InambientDaySlider = self:AddInput("ambientDay", "ambientDay", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.33,
      })

  InambientNightSlider = self:AddInput("ambientNight", "ambientNight", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.2,
      })

  InREFLECTION_BLUR_SIZESlider = self:AddInput("REFLECTION_BLUR_SIZE", "REFLECTION_BLUR_SIZE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.04,
      })

  InCURVESlider = self:AddInput("CURVE", "CURVE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 3.0,
      })

  InSMOOTHSlider = self:AddInput("SMOOTH", "SMOOTH", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 0.1,
          INP_Default        = 0.004,
      })

  InSHINESlider = self:AddInput("SHINE", "SHINE", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.66,
      })

  InShineXYPoint = self:AddInput("ShineXY", "ShineXY", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InDeb1Slider = self:AddInput("Deb1", "Deb1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -5.0,
          INP_MaxScale       = 5.0,
          INP_Default        = 0.0,
      })

  InDeb2Slider = self:AddInput("Deb2", "Deb2", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -5.0,
          INP_MaxScale       = 5.0,
          INP_Default        = 1.0,
      })


  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
    INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
    { CCS_AddString  = "int8", },
    { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
    ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstI = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "Vt220CodingatnightJipiFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "Vt220CodingatnightJipiFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end

  params.DayNightMan = InDayNightManCheckbox:GetValue(req).Value
  params.DayNight = InDayNightCheckbox:GetValue(req).Value
  params.Tex = InTexCheckbox:GetValue(req).Value
  params.BEZEL_COL = {
    InBEZEL_COLColorR:GetValue(req).Value,
    InBEZEL_COLColorG:GetValue(req).Value,
    InBEZEL_COLColorB:GetValue(req).Value,InBEZEL_COLColorA:GetValue(req).Value
  }
  params.ambientDay = InambientDaySlider:GetValue(req).Value
  params.ambientNight = InambientNightSlider:GetValue(req).Value
  params.REFLECTION_BLUR_SIZE = InREFLECTION_BLUR_SIZESlider:GetValue(req).Value
  params.CURVE = InCURVESlider:GetValue(req).Value
  params.SMOOTH = InSMOOTHSlider:GetValue(req).Value
  params.SHINE = InSHINESlider:GetValue(req).Value
  params.ShineXY = {InShineXYPoint:GetValue(req).X,InShineXYPoint:GetValue(req).Y}
  params.Deb1 = InDeb1Slider:GetValue(req).Value
  params.Deb2 = InDeb2Slider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


    local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
    node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
    node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

  
    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "Vt220CodingatnightJipiFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    node:AddInput("iChannel1", iChannel0)           -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end

-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
