--[[--
Legofied

    Based on https://www.shadertoy.com/view/XtBSzy a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT)
    for use in DaFusion.

    Shader created by Gijs



--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
LegofieldParams =
[[
  float scale2;
  float disoffset;
  float disfactor;
  float disoffset2;
  int width;
  int height;

  int compOrder;
]]


-- source of kernel
LegofieldKernel =
    [[
#define swixyz(V) to_float3((V).x,(V).y,(V).z)

__DEVICE__ float2 abs_f2(float2 a) {return (to_float2(_fabs(a.x), _fabs(a.y)));}

#define distance_fx(pt1,pt2) (_sqrtf(dot(pt2-pt1,pt2-pt1)))

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void LegofieldKernel(__CONSTANTREF__ LegofieldParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;

	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

	/*
	// Standardparameter
    uv -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f); //*ratio*2.0f
    uv *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f); //*ratio
    uv = spin(uv, pivot, params->angle, 1.0f); //params->debug
	*/

    //Functionality.......

      float c = params->scale2;//amout of blocks = c*iResolution.x

      float2 middle = _floor(fragCoord*c+0.5f)/c;

      float3 color = swixyz(_tex2DVecN(iChannel0,middle.x/iResolution.x,middle.y/iResolution.y, 15));

      //lego block effects
      //stud

      //float dis = _fabs((distance_fx(uv,middle)-08.0)*c*2.0f-0.6f);
      float dis = _fabs((distance_fx(fragCoord,middle)-params->disoffset)*c*params->disfactor-params->disoffset2);
      color *= smoothstep(0.1f,0.05f,dis)*dot(to_float2_s(0.707f),normalize(fragCoord-middle))*0.5f+1.0f;

      //side shadow
      float2 delta = abs_f2(fragCoord-middle)*c*2.0f;
      float sdis = _fmaxf(delta.x,delta.y);

      color *= 0.8f+smoothstep(0.950f,0.8f,sdis)*0.2f;

	  fragColor = to_float4_aw(color,1.0f);

	 _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------
  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })


self:BeginControlNest("Parameter", "Par", true, {})
  InLegoScale = self:AddInput("Scale", "LegoScale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.04,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InDisOffset = self:AddInput("Distance Offset", "DisOff", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InDisFactor = self:AddInput("Distance Factor", "DisFactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 2.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InDisOffset2 = self:AddInput("Distance Offset2", "DisOff2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.6,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Line Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.42,
	IC_Visible          = false,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.32,
	IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.12,
	IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })


self:EndControlNest()

-- if dctlfuse_author=='JiPi' then
-- 	sw_visible = true
-- else
-- 	sw_visible = false
-- end
-- 	InLogoSw = self:AddInput("Logo", "LogoSw", {
-- 	  LINKID_DataType = "Number",
-- 	  INPID_InputControl = "CheckboxControl",
-- 	  INP_Integer = true,
-- 	  INP_DoNotifyChanged = true,
-- 	  INP_Default         = 1,
-- 	  IC_Visible          = sw_visible,
-- 	  INP_External        = false,
-- 	  INP_Passive         = true,
-- 	})

--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	--LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --   authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --   authorlogo:SetAttrs({IC_Visible = false})
    --   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end

    node = DVIPComputeNode(req, "LegofieldKernel", LegofieldKernel, "LegofieldParams", LegofieldParams)

    if not pcall(function ()
        params.scale2      = InLegoScale:GetValue(req).Value
		params.disoffset   = InDisOffset:GetValue(req).Value
		params.disfactor   = InDisFactor:GetValue(req).Value
		params.disoffset2  = InDisOffset2:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()


        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(LegofieldParams)

        params.scale2      = InLegoScale:GetValue(req).Value
		params.disoffset   = InDisOffset:GetValue(req).Value
		params.disfactor   = InDisFactor:GetValue(req).Value
		params.disoffset2  = InDisOffset2:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()


        node:SetParamBlock(params)

    end


    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
	collectgarbage();
end

-- **/ "End of LUA CODE"


