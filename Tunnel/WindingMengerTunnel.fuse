--[[--
WindingMengerTunnel

    Based on https://www.shadertoy.com/view/4scXzn a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/channel/UCItO4q_3JgMVV2MFIPDGQGg)
    for use in DaFusion.

    Shader created by Shane


V0.1 initial
V0.2 Global variables rebuilt, Added the different Variants and Parameter (Pertubing,..)
V0.3
V0.4

--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()


-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,


  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
WindingMengerTunnelParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float look[2];
  float far;
  int pertubing;
  int moduswalls;
  bool addBump;
  int modustunnel[2];
  int grid[2];
  int modussection[2];
  bool antiwarping;
  float color[3];
  float color2[3];
  float color3[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
WindingMengerTunnelKernel =
    [[
 //**** mat3 ****
 typedef struct
  {
  float3 r0, r1, r2;
  } mat3;


  __DEVICE__ inline mat3 make_mat3( float3 A, float3 B, float3 C)
  {
  mat3 D;
  D.r0 = A;
  D.r1 = B;
  D.r2 = C;
  return D;
  }

 __DEVICE__  inline mat3 make_mat3_2( float A1, float B1, float C1, float A2, float B2, float C2, float A3, float B3, float C3 )
  {
  mat3 D;
  D.r0 = to_float3(A1,B1,C1);
  D.r1 = to_float3(A2,B2,C2);
  D.r2 = to_float3(A3,B3,C3);
  return D;
  }

 __DEVICE__ inline float3 mat3_multi_f3( mat3 B, float3 A) {
  float3 C;

  C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
  C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
  C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;

  return C;
  }

 __DEVICE__ inline mat3 mat3_add_mat3( mat3 A, mat3 B) {
  mat3 C;

  C.r0 = to_float3(A.r0.x + B.r0.x, A.r0.y + B.r0.y,A.r0.z + B.r0.z);
  C.r1 = to_float3(A.r1.x + B.r1.x, A.r1.y + B.r1.y,A.r1.z + B.r1.z);
  C.r2 = to_float3(A.r2.x + B.r2.x, A.r2.y + B.r2.y,A.r2.z + B.r2.z);

  return C;
  }

  __DEVICE__ inline mat3 mat3_multi_f( mat3 A, float B)
  {
  return make_mat3(A.r0 * B, A.r1 * B, A.r2 * B);
  }

//-----------------------
//-------- mat2 ---------
//-----------------------
 typedef struct
  {
  float2 r0, r1;
  } mat2;

 __DEVICE__ inline mat2 make_mat2( float A, float B, float C, float D)
  {
  mat2 E;
  E.r0 = to_float2(A,B);
  E.r1 = to_float2(C,D);
  return E;
  }

__DEVICE__ inline float2 mat2_multi_f2( mat2 B, float2 A)
  {
  float2 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y;
  C.y = A.x * B.r1.x + A.y * B.r1.y;
  return C;
  }

#if defined(DEVICE_IS_OPENCL) || defined(DEVICE_IS_METAL)
__DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
#endif



#define fract_f(a) a - _floor(a)
__DEVICE__ float2 fract_f2(float2 A){return make_float2(A.x - _floor(A.x), A.y - _floor(A.y));}
__DEVICE__ float3 fract_f3(float3 A){return make_float3(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.z));}

__DEVICE__ float3 sqrt_f3(float3 a) {float3 r; r.x = _sqrtf(a.x); r.y = _sqrtf(a.y); r.z = _sqrtf(a.z); return r;}
__DEVICE__ float2 abs_f2(float2 a) {return (to_float2(_fabs(a.x), _fabs(a.y)));}
__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
#define lpowf _powf
__DEVICE__ float2 pow_f2(float2 a, float2 b) {float2 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); return r;}

#define mod_f(a,b) (a-b*_floor(a/b))
__DEVICE__ float3 mod_f3(float3 value, float divisor) {return to_float3(mod_f(value.x, divisor),mod_f(value.y, divisor),mod_f(value.z, divisor));}
__DEVICE__ float3 mod_f3f3(float3 value, float3 divisor) {return to_float3(mod_f(value.x, divisor.x),mod_f(value.y, divisor.y),mod_f(value.z, divisor.z));}


__DEVICE__ float2 sin_f2(float2 i) {float2 r; r.x = _sinf(i.x); r.y = _sinf(i.y); return r;}
__DEVICE__ float2 cos_f2(float2 i) {float2 r; r.x = _cosf(i.x); r.y = _cosf(i.y); return r;}

__DEVICE__ float sign_f(float value) { if (value == 0.0f) return 0.0f; return value > 0.0f ? 1.0f : -1.0f;}


#define swixy(V) to_float2((V).x,(V).y)
#define swixz(V) to_float2((V).x,(V).z)
#define swizy(V) to_float2((V).z,(V).y)
#define swiyz(V) to_float2((V).y,(V).z)
#define swiyx(V) to_float2((V).y,(V).x)

#define swixyz(V) to_float3((V).x,(V).y,(V).z)
#define swizyx(V) to_float3((V).z,(V).y,(V).x)

#define swixyy(V) to_float3((V).x,(V).y,(V).y)
#define swiyyx(V) to_float3((V).y,(V).y,(V).x)
#define swiyxy(V) to_float3((V).y,(V).x,(V).y)

#define swizyx(V) to_float3((V).z,(V).y,(V).x)


/*

Winding Menger Tunnel
---------------------

I got bored and decided to wrap a Menger object around a curvy tunnel, then I got even more bored and
incorporated some tubing and some curved screens... I have no idea what they're for either. :)

Anyway, if you put aside the cheesy, Quake-2-style graphics, it's nothing more than a couple of
interwoven fractal objects perturbed sinusoidally about the "XY" plane. In code:

pos.xy -= sinPath(pos.z);
dist = FractalObjects(pos);

Obviously, the camera has to follow the path as well, but that's basically it. You can ignore everything
else, which is just less-than-adequate window dressing. I've been on a bit of an oldschool demo trip
lately, which probably explains the simplistic lighting style.

Other tunnel related examples worth looking at:

// Awesome example. Makes the lighting effort this one look lazy... which it is. :)
    Castle Tunnel - Hamneggs
    https://www.shadertoy.com/view/Xs3Xzn

    // Love this. It inspired me to interweave the metal tubing this particular shader.
    Metro Tunnel - fb39ca4
    https://www.shadertoy.com/view/ldsGRS

    // Like all of dr2's stuff, it has a higher level of difficulty. :)
    Gotthard Tunnel - dr2
    https://www.shadertoy.com/view/MlSXRR

*/


// Used to identify individual scene objects. In this case, there are only three: The metal framework, the walls,
// and the lights.
//__DEVICE__ float objID = 0.0f; // Metal = 1.0f, Walls = 2.0f, Screens = 3.0f.
//__DEVICE__ __CONSTANTREF__ WindingMengerTunnelParams *g_params;
//__DEVICE__ __TEXTURE2D__ g_texture;

//, float *objID, __CONSTANTREF__ WindingMengerTunnelParams g_params, __TEXTURE2D__ g_texture)
// Simple hash function.
__DEVICE__ float hash( float n ){ return fract_f(_cosf(n)*45758.5453f); }


// Tri-Planar blending function. Based on an old Nvidia writeup:
// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.0fhtml
__DEVICE__ float3 tex3D( __TEXTURE2D__ tex, float3 p, float3 n ){

    n = _fmaxf(abs_f3(n), to_float3_s(0.001f)); // n = _fmaxf((_fabs(n) - 0.2f)*7.0f, 0.001f); // n = _fmaxf(_fabs(n), 0.001f), etc.
    n /= (n.x + n.y + n.z);
	return swixyz(_tex2DVecN(tex, p.y,p.z,15)*n.x + _tex2DVecN(tex, p.z,p.x,15)*n.y + _tex2DVecN(tex, p.x,p.y,15)*n.z);

}

// Common formula for rounded squares, for all intended purposes.
__DEVICE__ float lengthN(float2 p, float n){ p = pow_f2(abs_f2(p), to_float2_s(n)); return _powf(p.x + p.y, 1.0f/n); }

// 2D path displacement.
__DEVICE__ float2 path(float x, __CONSTANTREF__ WindingMengerTunnelParams *g_params){

   if (g_params->pertubing == 2)      return to_float2_s(0); // Trivial, straight path.
   else if (g_params->pertubing == 1) return to_float2(_cosf(x*0.25f)*1.8f + _cosf(x*0.15f)*2.0f, 0); // Perturbing "X" only.

   return to_float2(_cosf(x*0.25f)*1.8f + _cosf(x*0.15f)*1.5f, _sinf(x*0.25f)*1.2f + _sinf(x*0.15f)); // Perturbing "X" and "Y."
}

// Camera path. Arranged to coincide with the frequency of the tunnel.
__DEVICE__ float3 camPath(float t, __CONSTANTREF__ WindingMengerTunnelParams *g_params){

    return to_float3_aw(path(t, g_params), t);
}

// Smooth minimum function. There are countless articles, but IQ explains it best here:
// http://iquilezles.org/www/articles/smin/smin.htm
__DEVICE__ float sminP( float a, float b, float s ){

    float h = clamp( 0.5f+0.5f*(b-a)/s, 0.0f, 1.0f );
    return _mix( b, a, h ) - s*h*(1.0f-h);
}
// I have a "Menger Sponge Variation" example somewhere, if you'd like to look into this.
__DEVICE__ float Menger(float3 q, __CONSTANTREF__ WindingMengerTunnelParams *g_params){

    float s = 4.0f;
    // Layer one. The "0.05f" on the end varies the hole size.
    float3 p = abs_f3(fract_f3(q/s)*s - s*0.5f);
    float d = _fminf(_fmaxf(p.x, p.y), _fminf(_fmaxf(p.y, p.z), _fmaxf(p.x, p.z))) - s/3.0f;// + 0.05f;

    s /= 2.0f;
    // Layer two.
    p = abs_f3(fract_f3(q/s)*s - s*0.5f);
	d = _fmaxf(d, _fminf(_fmaxf(p.x, p.y), _fminf(_fmaxf(p.y, p.z), _fmaxf(p.x, p.z))) - s/3.0f);//+ 0.05f

    s /= 3.0f;
    // Layer three. 3D space is divided by two, instead of three, to give some variance.
    p = abs_f3(fract_f3(q/s)*s - s*0.5f);
	d = _fmaxf(d, _fminf(_fmaxf(p.x, p.y), _fminf(_fmaxf(p.y, p.z), _fmaxf(p.x, p.z))) - s/3.0f); //- 0.015f


    //float floor = _fmaxf(_fabs(q.x) - 2.0f, _fabs(q.y) - 1.5f);//_fabs(q.x) - 2.0f;//

	if (g_params->moduswalls == 1) return q.y + 0.8f;
    else                           return _fminf(d, q.y + 0.8f);
}

// I have a "Steel Lattice" example somewhere, if you'd like to look into this. There's not
// much to it, though.
__DEVICE__ float tubing(float3 p, __CONSTANTREF__ WindingMengerTunnelParams *g_params){

    // SECTION 1
    //
    // Repeat field entity one, which is just some tubes repeated all directions every
    // two units, then combined with a smooth minimum function. Otherwise known as a lattice.
    if (g_params->grid[0] == 0)
	    p = fract_f3(p/2.0f)*2.0f - 1.0f;
    else
		p = abs_f3(p);

	float x1 = sminP(length(swixy(p)),sminP(length(swiyz(p)),length(swixz(p)), 0.25f), 0.25f)-0.5f; // EQN 1

	if (g_params->modussection[0] == 1)
	      x1 = _sqrtf(_fminf(dot(swixy(p), swixy(p)),_fminf(dot(swiyz(p), swiyz(p)),dot(swixz(p), swixz(p)))))-0.5f; // EQN 2

	if (g_params->modussection[0] == 2)
	      x1 = _fminf(_fmaxf(p.x, p.y),_fminf(_fmaxf(p.y, p.z),_fmaxf(p.x, p.z)))-0.5f; // EQN 3 ////p = _fabs(p); float

    // SECTION 2
    //
    // Repeat field entity two, which is just an abstract object repeated every half unit.
	if (g_params->grid[1] == 0)
        p = abs_f3(fract_f3(p*2.0f)*0.5f - 0.25f);

	float x2 = _fminf(p.x, _fminf(p.y,p.z))-0.025f; // EQN 1

	if (g_params->modussection[1] == 1)
	      x2 = _fminf(p.x,_fminf(p.y,p.z)); // EQN 1
    if (g_params->modussection[1] == 2)
	      x2 = _fminf(_fmaxf(p.x, p.y),_fminf(_fmaxf(p.y, p.z),_fmaxf(p.x, p.z)))-0.15f; //-0.175f, etc. // EQN 2

    // SECTION 3
    //
    // Combining the two entities above.
    return _fmaxf(_fabs(x1), _fabs(x2)) - 0.0175f;

}


// Creating the scene geometry. This is the process:
//
// Use the sinusoidal path function to perturb the original position. Create the Menger object
// using the perturbed postion. Do the same for the tubing and again with the screens.
// Return the minimum of the objects, and also use the relative minimums to return the object's
// individual ID. That's basically it.
__DEVICE__ float map(float3 p, __CONSTANTREF__ WindingMengerTunnelParams *g_params, __TEXTURE2D__ g_texture, float *objID){


    // Partial anti-warping solution, based on Gaz's "Square Sin Curve" shader below:
    // https://www.shadertoy.com/view/MscGzf
    //
    // As you could imagine, tunnels (columns) get a little warped when you bend them. Countering
    // that by taking the curvature into account helps quite a bit. Unfortunately, it slows things
    // down, so isn't being used here, which is a shame, because I like it a lot more. Anyway, if
    // you can spare the cycles, it gives the tunnel's "X" and "Y" (width and height) dimensions a
    // little more consistency.
    float2 g = (path(p.z + 0.01f, g_params) - path(p.z - 0.01f,g_params))/0.02f;
    g.x = _cosf(_atan2f(g.x,1.0f));
	g.y = _cosf(_atan2f(g.y,1.0f));


    // "Windy Tunnels 101" - Use "Z" to perturb the "XY" plane. If you're not sure how it'd done,
    // I have a few tunnel examples where I explain the process.
    float2 pxy = swixy(p)-path(p.z,g_params);
    p.x=pxy.x;p.y=pxy.y;

	if (g_params->antiwarping == 1)
	     p.x*=g.x;p.y*=g.y;  //p.xy *= g; // See the anti-warping explanation above.

    // A bit of tubing, using a combination of repeat objects.
    float tube = tubing(p, g_params);


    // Again a little expensive, but it's a surprisingly effective way to bump the tunnel walls.
    // This is a variation, but you can thank "aeikick" for this little snippet. :)
    if (g_params->addBump == 1)
	{
	    float3 u = p;

        p.x -= sign_f(u.x)*(_tex2DVecN(g_texture, u.y/8.0f,u.z/8.0f,15).x - 0.0f)*0.03f;//-0.2f;
        p.y -= sign_f(u.y)*(_tex2DVecN(g_texture, u.x/8.0f,u.z/8.0f,15).x - 0.0f)*0.03f;
	}


    // The walls. I have another Menger example, if you'd like to look into that more closely.
    float walls = Menger(p, g_params);
    // Simpler alternatives.

	if (g_params->moduswalls == 2)      walls = 1.0f - _fmaxf(_fabs(p.x), _fabs(p.y));
    else if (g_params->moduswalls == 3) walls = 1.25f - lengthN(swixy(p), 4.0f);

    // The curved screens. Kind of worth the effort, but not really. Fine details always overcomplicate
    // things, not to mention, halve the frame rate. :) Anyway, it's basically repeated square box-related
    // stuff... Add this, take that, etc. Fiddly, hacky, not all that interesting, and probably not the
    // best way to do it. Chipping away at a cylinder might raymarch better.
    //

    p += to_float3(sign_f(p.x)*(-0.11f + (_sinf(p.z*3.14159f*2.0f + 1.57f/1.0f))*0.05f), 0.0f, 0.0f); // Screen curve, and repositioning.
    float3 q = abs_f3(mod_f3f3(p + to_float3(0.0f, 0.5f, 0.0f), to_float3(1.0f, 1.0f, 2.0f)) - to_float3(0.5f, 0.5f, 1.0f)); // Repeat space.
    float screen = _fmaxf(_fmaxf(q.y, q.z) - 0.22f, q.x-0.05f); // Box.
    screen = _fmaxf(screen, _fmaxf(_fabs(p.x) - 0.5f, _fabs(p.y) - 0.22f)); // Chopping off anything outside the tunnel... Kind of.

    // Object ID: Equivalent to: if(tube<walls)objID=2; else objID = 1.0f; //etc.
    //
    // By the way, if you need to identify multiple objects, you're better off doing it a seperate pass,
    // after the raymarching function. Having multiple "if" statements a distance field equation can slow
    // things down considerably. Alternatively, there's the "float2 objA = to_float2(objectADist, objAID)" option
    // that many are fond of. It seems to be slower on my machines, but seems to work well enough.
    *objID = 1.0f + step(tube, walls) + step(screen, tube)*step(screen, walls)*2.0f;

    if (g_params->modustunnel[0] == 1)
        *objID = 2.0f + step(screen, tube);
	  else if (g_params->modustunnel[0] == 2)
		    *objID = 1.0f + step(tube, walls);
	  else if (g_params->modustunnel[0] == 3)
        *objID = 1.0f + step(screen, walls)*2.0f;

    //if (g_params->modustunnel[1] == 0)
		// Returning the minimum of the three objects.
    //    return _fminf(_fminf(tube, walls), screen);
    //else
	if (g_params->modustunnel[1] == 1)
	    return _fminf(tube, screen);
	else if (g_params->modustunnel[1] == 2)
	    return _fminf(tube, walls);
	else if (g_params->modustunnel[1] == 3)
	    return _fminf(screen, walls);


	return _fminf(_fminf(tube, walls), screen);
/*
    //Two object combinations. Spoils the illusion, but helps visualize things.

    //objID = 2.0f + step(screen, tube);
    //return _fminf(tube, screen);


    //objID = 1.0f + step(tube, walls);
    //return _fminf(tube, walls);

    objID = 1.0f + step(screen, walls)*2.0f;
    return _fminf(screen, walls);
*/

}


// Tetrahedral normal, to save a couple of "map" calls. Courtesy of IQ.
__DEVICE__ float3 calcNormal(float3 p, __CONSTANTREF__ WindingMengerTunnelParams *g_params, __TEXTURE2D__ g_texture, float *objID){

    // Note the slightly increased sampling distance, to alleviate artifacts due to hit point inaccuracies.
    float2 e = to_float2(0.0025f, -0.0025f);
    return normalize(swixyy(e) * map(p + swixyy(e),g_params,g_texture, objID) + swiyyx(e) * map(p + swiyyx(e),g_params,g_texture,objID) + swiyxy(e) * map(p + swiyxy(e),g_params,g_texture,objID) + e.x * map(p + e.x, g_params,g_texture,objID));
}

/*
// Standard normal function.
__DEVICE__ float3 calcNormal(float3 p) {
	const float2 e = to_float2(0.005f, 0);
	return normalize(to_float3(map(p + e.xyy) - map(p - e.xyy), map(p + e.yxy) - map(p - e.yxy),map(p + e.yyx) - map(p - e.yyx)));
}
*/

// I keep a collection of occlusion routines... OK, that sounded really nerdy. :)
// Anyway, I like this one. I'm assuming it's based on IQ's original .
__DEVICE__ float calcAO(float3 pos, float3 nor, __CONSTANTREF__ WindingMengerTunnelParams *g_params, __TEXTURE2D__ g_texture, float *objID)
{
	float sca = 2.0f, occ = 0.0f;
    for( int i=0; i<5; i++ ){

        float hr = 0.01f + (float)(i)*0.5f/4.0f;
        float dd = map(nor * hr + pos, g_params,g_texture,objID);
        occ += (hr - dd)*sca;
        sca *= 0.7f;
    }
    return clamp( 1.0f - occ, 0.0f, 1.0f );
}


// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups total. I tried to
// make it as concise as possible. Whether that translate to speed, or not, I couldn't say.
__DEVICE__ float3 texBump( __TEXTURE2D__ tx, float3 p, float3 n, float bf){

    const float2 e = to_float2(0.002f, 0);

    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.
    mat3 m = make_mat3( tex3D(tx, p - swixyy(e), n), tex3D(tx, p - swiyxy(e), n), tex3D(tx, p - swiyyx(e), n));

    float3 g = mat3_multi_f3(m, to_float3(0.299f, 0.587f, 0.114f)); // Converting to greyscale.
    g = (g - dot(tex3D(tx,  p , n), to_float3(0.299f, 0.587f, 0.114f)) )/e.x; g -= n*dot(n, g);

    return normalize( n + g*bf ); // Bumped normal. "bf" - bump factor.

}

// Standard hue rotation formula.
__DEVICE__ float3 rotHue(float3 p, float a){

    float2 cs = sin_f2(to_float2(1.570796f, 0) + a);

    mat3 hr = mat3_add_mat3(mat3_add_mat3(make_mat3_2(0.299f,  0.587f,  0.114f,  0.299f,  0.587f,  0.114f,  0.299f,  0.587f,  0.114f) ,
              mat3_multi_f(make_mat3_2(0.701f, -0.587f, -0.114f, -0.299f,  0.413f, -0.114f, -0.300f, -0.588f,  0.886f) , cs.x)) ,
              mat3_multi_f(make_mat3_2(0.168f,  0.330f, -0.497f, -0.328f,  0.035f,  0.292f,  1.250f, -1.050f, -0.203f) , cs.y));

    return clamp(mat3_multi_f3(hr,p), 0.0f, 1.0f);
}

// Screen pattern. Simple, but effective. The idea to go with this was inspired by Dmitry Andreev's
// really cool "pixelScreen" shader, here: https://www.shadertoy.com/view/XdG3Wc
//
// His example is a little fancier, mainly because he's using way more code... The fact that he won
// Assembly a couple of times might also be a factor. :)
__DEVICE__ float dotPattern(float2 p, float itime){

    // Partition space into multiple squares.
    float2 fp = abs_f2(fract_f2(p)-0.5f)*2.0f;

    // Rounded circle, for the overlay, or vignette, if you prefer.
    fp = pow_f2(fp, to_float2_s(8.0f));
    float r = _fmaxf(1.0f - _powf(fp.x + fp.y, 1.0f), 0.0f);

    // More squarish (Chebyshev) version of the above.
    //fp = _powf(fp, to_float2(8.0f));
    //float r = 1.0f - _fmaxf(fp.x, fp.y);

    // Single value for each square. Used for IDs and a bunch of other things, but this
    // case it'll give the square a homogeneous color.
    p = _floor(p);

    // The blocky pattern value. Made up, but you could use all kinds of things, like Voronoi, etc.
    float c = dot(sin_f2(p/4.0f - cos_f2(swiyx(p)/0.2f + itime/4.0f)), to_float2_s(0.5f));

    c = fract_f(c * 7.0f); // Mixing it up, for no particular reason.

    return c*r; // Pixel shade, multiplied by the rounded square vignette. Range: [0, 1].

}
__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void WindingMengerTunnelKernel(__CONSTANTREF__ WindingMengerTunnelParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

     //Functionality.......

    //g_params = params;
	  //g_texture = iChannel1;

	  float objID = 0.0f;

    // Screen coordinates.
    float2 u = (fragCoord - iResolution*0.5f)/iResolution.y;

	  // Standardparameter
    u -=  to_float2( (params->center[0]-0.5f)*ratio, (params->center[1]-0.5f));
    u *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*ratio),(params->pivot[1]-0.5f));
    u = spin(u, pivot, params->angle, 1.0f); //params->debug

    // Camera Setup.
    float3 ro = camPath(itime*1.5f, params); // Camera position, doubling as the ray origin.
    float3 lk = camPath(itime*1.5f + 0.1f, params);  // "Look At" position.
    float3 lp = camPath(itime*1.5f + 2.0f, params) + to_float3(0, 2, 0); // Light position, somewhere near the moving camera.


    // Using the above to produce the unit ray-direction vector.
    float FOV = 1.57f; // FOV - Field of view.
    float3 fwd = normalize(lk-ro);
    float3 rgt = normalize(to_float3(fwd.z, 0.0f, -fwd.x ));
    float3 up = cross(fwd, rgt);

    // Unit direction ray.
    float3 rd = normalize(fwd + FOV*(u.x*rgt + u.y*up));

    float2 a = sin_f2(to_float2(1.5707963f, 0) - camPath(lk.z, params).x/12.0f);
    mat2 rM = make_mat2(a.x, a.y, -a.y, a.x);
    float2 rdxy = mat2_multi_f2(rM, swixy(rd)); // Apparently, "rd.xy *= rM" doesn't work on some setups. Crazy.
    rd.x=rdxy.x;rd.y=rdxy.y;

    // Mouse controls, as per Dave Hoskins's suggestion. A bit hacky, but I'll fix them.
    float2 ms = to_float2_s(0);
    //if (params->mousebutton > 0.0f) ms = (2.0f*to_float2(iMouse.x,iMouse.y) - iResolution)/iResolution;
    ms = to_float2_v(params->look);

    a = sin_f2(to_float2(1.5707963f, 0) - ms.x);
    rM = make_mat2(a.x, a.y, -a.y, a.x);
    float2 rdxz = mat2_multi_f2(rM, swixz(rd));
    rd.x=rdxz.x;rd.z=rdxz.y;

    a = sin_f2(to_float2(1.5707963f, 0) - ms.y);
    rM = make_mat2(a.x, a.y, -a.y, a.x);
    float2 rdyz = mat2_multi_f2(rM, swiyz(rd));
    rd.y=rdyz.x;rd.z=rdyz.y;


    // Raymarching.
    const float FAR = params->far;
    float t = 0.0f, h;

   for(int i = 0; i < 96; i++){

        h = map(ro+rd*t, params, iChannel1, &objID);
        // Note the "t*b + a" addition. Basically, we're putting less emphasis on accuracy, as
        // "t" increases. It's a cheap trick that works most situations... Not all, though.
        if(_fabs(h)<0.001f*(t*0.75f + 0.25f) || t>FAR) break;//*(t*0.5f + 1.0f)
        t += h*0.75f;
        //t += step(0.5f, t)*h*0.25f + h*0.5f;

    }

    // Initialize the scene color.
    float3 col = to_float3_s(0);

    // Scene hit, so color the pixel.
    if(t<FAR){

        // This looks a little messy and haphazard, but it's really just some basic lighting, and application
        // of the following material properties: Metal = 1.0f, Walls = 2.0f, Screens = 3.0f.

        float ts = 2.0f;
        // Global object ID. It needs to be saved just after the raymarching equation, since other "map" calls,
        // like normal calculations will give incorrect results. Found that out the hard way. :)
        float saveObjID = objID;


        float3 pos = ro + rd*t; // Scene postion.

        float3 pOffs = to_float3(pos .x,pos.y,pos.z*ratio) - to_float3_aw(swixy(camPath(pos.z, params)), 0); // Postion, offset by the path.
//pOffs.x*=ratio;
        float3 nor = calcNormal(pos, params, iChannel1,&objID); // Normal.

        // Apply some subtle texture bump mapping to the walls and the metal tubing, but not the screen.
        // I should probably get rid of that "if" statement later, but it seems OK for now.
        if(saveObjID<2.5f) nor = texBump(iChannel0, pOffs*ts, nor, 0.002f + step(saveObjID, 1.5f)*0.012f);


	      col = tex3D(iChannel0, pOffs*ts, nor); // Texture pixel at the scene postion.
        col = smoothstep(to_float3_s(-0.3f), to_float3_s(0.8f), col)*to_float3_v(params->color3); // Process the color a little.

        // More fake lighting. This was just a bit of trial-and-error to produce some repetitive,
        // slightly overhead, spotlights each of the modules. Cylinder XY, sine repeat
        // the Z direction... Something like that.
        float spot = _fmaxf(2.0f - length(swixy(pOffs) - to_float2(0, 1)), 0.0f)*(_sinf((pOffs.z)*3.14159f + 1.57f)*0.5f+0.5f);
        spot = smoothstep(0.25f, 1.0f, spot);



        float occ = calcAO( pos, nor, params, iChannel1,&objID ); // Occlusion.
	      float3  li = normalize( lp - pos ); // Point light.
        float dif = clamp(dot(nor, li), 0.0f, 1.0f); // Diffuse.
        float spe = _powf(_fmaxf(dot(reflect(-li, nor), -rd), 0.0f), 8.0f); // Object specular.
        float spe2 = 0.0f; // Global specular.



        float3  rCol = to_float3_s(0); // Reflection color. Mostly fake.

        // If the metal tubing or the screen is hit, apply the individual properties.
        if(saveObjID>1.5f){

            // Grey out the limestone wall color.
            col = to_float3_s(1)*dot(col*0.7f+0.2f, to_float3_v(params->color2)); //to_float3(0.299f, 0.587f, 0.114f));
            // Add some fake reflection. Not reliable, but it's subtle.
            rCol = tex3D(iChannel0, (pOffs + reflect(rd, nor))*ts, nor);
            col += rCol*0.25f + spot*0.125f;
            spe2 = spe*spe*0.25f; // Ramp up the global specular a bit.
            if(saveObjID<2.5f) dif = _powf(dif, 2.0f)*1.25f;

        }

        // If just the screen has been hit, apply some extra properties, then draw the screen image.
        // I could just write "saveObjID == 3.0f," but I get a little paranoid where floats are concerned. :)
        if(saveObjID>2.5f){

            // For the screen image, we're interested the offset height and depth positions. Ie: pOffs.zy.

            // Pixelized dot pattern shade.
            float c = dotPattern(swizy(pOffs)*36.0f+0.5f, itime);

            // Applying some color to the shade.
            col = to_float3(_fminf(c*1.5f, 1.0f), _powf(c, 2.5f), _powf(c, 12.0f));
            // Mixing the colors around a little. Made up.
            col = _mix(swizyx(col), col, _sinf(dot(pos, to_float3_s(0.333f))*3.14159f*6.0f)*0.34f+0.66f);

            // Individual screen ID or sorts.
            float id = hash(dot(_floor(pOffs + to_float3(0.0f, 0.5f, 0.5f)), to_float3(7, 157, 113)));

            // Use the screen ID to give it a different random hue.
            col = rotHue(col, _floor(id*12.0f)/12.0f*6.283f/2.0f);

            col += rCol*rCol*0.5f; // Screen reflection.

            dif += 0.5f; // Make the screen appear self illuminating, but increasing the diffuse.
            spe += 0.25f;

        }

        // Combining everything together to produce the scene color.
        col *= (dif + 0.25f + spot*0.5f + to_float3_v(params->color)*spe) + spe2;
        col *= occ; // Applying occlusion.


    }


    // Applying some very slight fog the distance. This is technically an inside scene...
    // Or is it underground... Who cares, it's just a shader. :)
    col = _mix(_fminf(col, to_float3_s(1.0f)), to_float3_s(0), 1.0f-_expf(-t*t/FAR/FAR*15.0f));//smoothstep(0.0f, FAR-20.0f, t)

    // Done.
    fragColor = to_float4_aw(col, 1.0f);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()

ShaderFuse.begin_create()

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- WindingMengerTunnel ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    PC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })

  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default      = 0.0,
	  IC_Visible       = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:BeginControlNest("Parameter", "Par", true, {})
  InLook = self:AddInput("Look","Look", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InFar = self:AddInput("Lighting distance", "Far", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 50.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InPertubing = self:AddInput("Pertubing", "Pertubing", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    --INP_External        = false,
	--INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Full", },
    { MBTNC_AddButton = "X Only", },
	{ MBTNC_AddButton = "Straight", },
  })


  InModusWalls = self:AddInput("Modus Walls", "ModusWalls", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Original", },
    { CCS_AddString = "Variante1", },
    { CCS_AddString = "Variante2", },
    { CCS_AddString = "Variante3", },
    CC_LabelPosition = "Horizontal",
  })

  InAddBump = self:AddInput("AddBump", "AddBump", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External      = false,
  })


  InModusTunnel1 = self:AddInput("Modus Tunnel1", "ModusTunnel1", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Original", },
    { CCS_AddString = "Variante1", },
    { CCS_AddString = "Variante2", },
    { CCS_AddString = "Variante3", },
    CC_LabelPosition = "Horizontal",
  })
  InModusTunnel2 = self:AddInput("Modus Tunnel2", "ModusTunnel2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Original", },
    { CCS_AddString = "Variante1", },
    { CCS_AddString = "Variante2", },
    { CCS_AddString = "Variante3", },
    CC_LabelPosition = "Horizontal",
  })


  InGrid1 = self:AddInput("Grid1", "Grid1", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External      = false,
  })
  InModusSection1 = self:AddInput("Modus Section 1", "ModusSection1", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Original", },
    { CCS_AddString = "Variante1", },
    { CCS_AddString = "Variante2", },
    { CCS_AddString = "Variante3", },
    CC_LabelPosition = "Horizontal",
  })

  InGrid2 = self:AddInput("Grid2", "Grid2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External      = false,
  })
  InModusSection2 = self:AddInput("Modus Section 2", "ModusSection2", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Original", },
    { CCS_AddString = "Variante1", },
    { CCS_AddString = "Variante2", },
    { CCS_AddString = "Variante3", },
    CC_LabelPosition = "Horizontal",
  })

  InAntiWarping = self:AddInput("AntiWarping", "AntiWarping", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External      = false,
  })



 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Wall Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.25,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.3,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })

InRed2CH = self:AddInput("Red", "Red2CH", {
    ICS_Name            = "Metall Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.299,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2CH = self:AddInput("Green", "Green2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.587,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2CH = self:AddInput("Blue", "Blue2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.114,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })

InRed3CH = self:AddInput("Red", "Red3CH", {
    ICS_Name            = "Tex Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 3,
    IC_ControlID        = 0,
  })
  InGreen3CH = self:AddInput("Green", "Green3CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 3,
    IC_ControlID        = 1,
  })
  InBlue3CH = self:AddInput("Blue", "Blue3CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.7,
    IC_ControlGroup     = 3,
    IC_ControlID        = 2,
  })


self:EndControlNest()

-- if FC_AUTHBASEDLAYOUT==true then
-- 	sw_visible = true
-- else
-- 	sw_visible = false
-- end
-- 	InLogoSw = self:AddInput("Logo", "LogoSw", {
-- 	  LINKID_DataType = "Number",
-- 	  INPID_InputControl = "CheckboxControl",
-- 	  INP_Integer = true,
-- 	  INP_DoNotifyChanged = true,
-- 	  INP_Default         = 1,
-- 	  IC_Visible          = sw_visible,
-- 	  INP_External        = false,
-- 	  INP_Passive         = true,
-- 	})

--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	--LINK_Visible = false,
    INP_Required = false
  })

  InImage2 = self:AddInput("Bumpmap", "Bumpmap", {
    LINKID_DataType = "Image",
    LINK_Main = 2,
	--LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

	-- if inp == InLogoSw then
	--   if param.Value == 1 then
	-- 	 authorlogo:SetAttrs({IC_Visible = true})
	--   else
	-- 	 authorlogo:SetAttrs({IC_Visible = false})
	--   end
	-- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

      if (InImage2:GetValue(req) ~= nil) then
         src2 = InImage2:GetValue(req)
      else
         src2 = Image(imgattrs)
         src2:Fill(p)
      end


    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________WindingMengerTunnel______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "WindingMengerTunnelKernel", WindingMengerTunnelKernel, "WindingMengerTunnelParams", WindingMengerTunnelParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.look         = {InLook:GetValue(req).X,InLook:GetValue(req).Y}
		    params.far          = InFar:GetValue(req).Value
		    params.pertubing    = InPertubing:GetValue(req).Value
		    params.moduswalls   = InModusWalls:GetValue(req).Value
		    params.addBump      = InAddBump:GetValue(req).Value
		    params.modustunnel  = {InModusTunnel1:GetValue(req).Value, InModusTunnel2:GetValue(req).Value}
		    params.grid         = {InGrid1:GetValue(req).Value, InGrid2:GetValue(req).Value}
		    params.modussection = {InModusSection1:GetValue(req).Value,InModusSection2:GetValue(req).Value}
		    params.antiwarping  = InAntiWarping:GetValue(req).Value
        params.color        = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		    params.color2       = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}
        params.color3       = {InRed3CH:GetValue(req).Value, InGreen3CH:GetValue(req).Value, InBlue3CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(WindingMengerTunnelParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.look         = {InLook:GetValue(req).X,InLook:GetValue(req).Y}
		    params.far          = InFar:GetValue(req).Value
		    params.pertubing    = InPertubing:GetValue(req).Value
	 	    params.moduswalls   = InModusWalls:GetValue(req).Value
		    params.addBump      = InAddBump:GetValue(req).Value
		    params.modustunnel  = {InModusTunnel1:GetValue(req).Value, InModusTunnel2:GetValue(req).Value}
		    params.grid         = {InGrid1:GetValue(req).Value, InGrid2:GetValue(req).Value}
		    params.modussection = {InModusSection1:GetValue(req).Value,InModusSection2:GetValue(req).Value}
		    params.antiwarping  = InAntiWarping:GetValue(req).Value
        params.color        = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		    params.color2       = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}
        params.color3       = {InRed3CH:GetValue(req).Value, InGreen3CH:GetValue(req).Value, InBlue3CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
	  node:AddInput("iChannel1", src2)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
	collectgarbage();
end

-- **/ "End of LUA CODE"

