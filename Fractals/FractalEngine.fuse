--[[--
FractalEngine

    Based on https://www.shadertoy.com/view/ttSBRm a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/channel/UCItO4q_3JgMVV2MFIPDGQGg)
    for use in DaFusion.

    Shader created by gaz


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
FractalEngineParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float look[3];
  float color[3];
  float color2[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
FractalEngineKernel =
    [[
 //-----------------------
//-------- mat2 ---------
//-----------------------
 typedef struct
  {
  float2 r0, r1;
  } mat2;

 __DEVICE__ inline mat2 make_mat2( float A, float B, float C, float D)
  {
  mat2 E;
  E.r0 = to_float2(A,B);
  E.r1 = to_float2(C,D);
  return E;
  }

__DEVICE__ inline float2 mat2_multi_f2( mat2 B, float2 A)
  {
  float2 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y;
  C.y = A.x * B.r1.x + A.y * B.r1.y;
  return C;
  }

#define swixy(V) to_float2((V).x,(V).y)
#define swiyz(V) to_float2((V).y,(V).z)


#define fract_f(a) a - _floor(a)
__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
__DEVICE__ float3 exp2_f3(float3 a) {return (to_float3(_exp2f(a.x), _exp2f(a.y), _exp2f(a.z)));}
__DEVICE__ float3 cos_f3(float3 i) {float3 r; r.x = _cosf(i.x); r.y = _cosf(i.y); r.z = _cosf(i.z); return r;}

#if defined(DEVICE_IS_OPENCL) || defined(DEVICE_IS_METAL)
__DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
#endif

#define rot(a) make_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a))

#define hash(n) fract_f(_sinf(n*234.567f+123.34f))

__DEVICE__ float map1(float3 p, float itime){

    float2 pxy = mat2_multi_f2(rot(itime*0.1f), swixy(p) );
    p.x=pxy.x;p.y=pxy.y;

    float2 pyz = mat2_multi_f2(rot(itime*0.2f), swiyz(p) );
    p.y=pyz.x;p.z=pyz.y;

    float seed=dot(_floor((p+3.5f)/7.0f)+3.0f,to_float3(123.12f,234.56f,678.22f));
    p-=clamp(p,-3.5f,3.5f)*2.0f;


    pxy = mat2_multi_f2(rot(itime*0.3f), swixy(p) );
    p.x=pxy.x;p.y=pxy.y;


    pyz = mat2_multi_f2(rot(itime*0.4f), swiyz(p) );
    p.y=pyz.x;p.z=pyz.y;

	float scale=-5.0f;
	float mr2=0.38f;
	float off=1.2f;
	float s=3.0f;
	p=abs_f3(p);
	float3  p0 = p;
	for (float i=0.0f; i<4.0f+hash(seed)*6.0f; i+=1){
		p=1.0f-abs_f3(p-1.0f);
		float g=clamp(mr2*_fmaxf(1.2f/dot(p,p),1.0f),0.0f,1.0f);
		p=p*scale*g+p0*off;
		s=s*_fabs(scale)*g+off;
	}
	return length(cross(p,normalize(to_float3_s(1))))/s-0.005f;
}

__DEVICE__ float map2(float3 p, float itime){
    float zoom=2.1f;
    p*=zoom;

	float2 pxy = mat2_multi_f2(rot(itime*0.1f), swixy(p) );
      p.x=pxy.x;p.y=pxy.y;

	float2 pyz = mat2_multi_f2(rot(itime*0.2f), swiyz(p) );
      p.y=pyz.x;p.z=pyz.y;

	float seed=dot(_floor((p+3.5f)/7.0f)+3.0f,to_float3(123.12f,234.56f,678.22f));
      p-=clamp(p,-8.0f,8.0f)*2.0f;


	pxy = mat2_multi_f2(rot(itime*0.3f), swixy(p) );
      p.x=pxy.x;p.y=pxy.y;

	pyz = mat2_multi_f2(rot(itime*0.4f), swiyz(p) );
	p.y=pyz.x;p.z=pyz.y;

	float s=3.0f*zoom;
	p=abs_f3(p);
	float3  p0 = p*1.6f;
	for (float i=0.0f; i<10.0f; i+=1){
          p=1.0f-abs_f3(abs_f3(p-2.0f)-1.0f);
          float g=-8.0f*clamp(0.43f*_fmaxf(1.2f/dot(p,p),0.8f),0.0f,1.3f);
          s*=_fabs(g);
	    p*=g;
          p+=p0;
       }
	 return length(cross(p,normalize(to_float3_s(1))))/s-0.005f;
}

__DEVICE__ float map(float3 p, float itime){
    if(fract_f(itime*0.2f)<0.5f)
        return map1(p, itime);
    else
        return map2(p, itime);
}


__DEVICE__ float3 calcNormal(float3 pos, float itime){
  float2 e = to_float2(1,-1) * 0.002f;

    float3 exyy = to_float3(e.x,e.y,e.y);
    float3 eyxy = to_float3(e.y,e.x,e.y);
    float3 eyyx = to_float3(e.y,e.y,e.x);

  return normalize(
    exyy*map(pos+exyy, itime)+eyyx*map(pos+eyyx, itime)+
    eyxy*map(pos+eyxy, itime)+e.x*map(pos+e.x, itime)
  );
}

__DEVICE__ float march(float3 ro, float3 rd, float near, float far, float itime)
{
    float t=near,d;
    for(int i=0;i<80;i++)
    {
        t+=d=map(ro+rd*t, itime);
        if (d<0.001f) return t;
        if (t>=far) return far;
    }
    return far;
}

__DEVICE__ float calcShadow( float3 light, float3 ld, float len, float itime ) {
	float depth = march( light, ld, 0.0f, len, itime );
	return step( len - depth, 0.01f );
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void FractalEngineKernel(__CONSTANTREF__ FractalEngineParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......

    float2 uv = (fragCoord* 2.0f - iResolution) / iResolution.y;

	// Standardparameter
    uv -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f); //*ratio*2.0f
    uv *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f); //*ratio
    uv = spin(uv, pivot, params->angle, 1.0f);

    float3 ro = to_float3(0,0,13.5f);
	ro+=to_float3_v(params->look);

    float3 rd = normalize(to_float3_aw(uv,-2.0f));
    float3 col = to_float3_s(0);
    const float maxd = 40.0f;
    float t = march(ro,rd,0.0f,maxd, itime);
    if(t<maxd)
    {
      float3 p=ro+rd*t;
      col=to_float3_v(params->color)+cos_f3(p*0.17f)*0.5f+0.5f;
      float3 n = calcNormal(p, itime);
      float3 lightPos=to_float3_s(20);
	  float3 li = lightPos - p;
	  float len = length( li );
	  li /= len;
	  float dif = clamp(dot(n, li), 0.5f, 1.0f);
      float sha = calcShadow( lightPos, -li, len, itime );
      col *= _fmaxf(sha*dif, 0.4f);
      float rimd = _powf(clamp(1.0f - dot(reflect(-li, n), -rd), 0.0f, 1.0f), 2.5f);
	  float frn = rimd+2.2f*(1.0f-rimd);
	  col *= frn*0.9f;
      col *= _fmaxf(0.5f+0.5f*n.y, 0.0f);
      col *= _exp2f(-2.0f*_powf(_fmaxf(0.0f, 1.0f-map(p+n*0.3f, itime)/0.3f),2.0f));
      col += to_float3_v(params->color2)*_powf(clamp(dot(reflect(rd, n), li), 0.0f, 1.0f), 50.0f);
      col = _mix(to_float3_s(0),col,_expf(-t*t*0.003f));
    }
    fragColor = to_float4_aw(col, 1.0f);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()

ShaderFuse.begin_create()

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- FractalEngine ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:BeginControlNest("Parameter", "Par", true, {})
  InLook = self:AddInput("Look","Look", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InLookZ = self:AddInput("LookZ", "LookZ", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Color1",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.3,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.3,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.6,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })

InRed2CH = self:AddInput("Red", "Red2CH", {
    ICS_Name            = "Color1",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.5,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2CH = self:AddInput("Green", "Green2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.4,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2CH = self:AddInput("Blue", "Blue2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.9,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })
self:EndControlNest()

if dctlfuse_author=='JiPi' then
	sw_visible = true
else
	sw_visible = false
end
	-- InLogoSw = self:AddInput("Logo", "LogoSw", {
	--   LINKID_DataType = "Number",
	--   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
	--   INP_DoNotifyChanged = true,
	--   INP_Default         = 1,
	--   IC_Visible          = sw_visible,
	--   INP_External        = false,
	--   INP_Passive         = true,
	-- })
--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

	-- if inp == InLogoSw then
	--   if param.Value == 1 then
	-- 	 authorlogo:SetAttrs({IC_Visible = true})
	--   else
	-- 	 authorlogo:SetAttrs({IC_Visible = false})
	--   end
	-- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________FractalEngine______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "FractalEngineKernel", FractalEngineKernel, "FractalEngineParams", FractalEngineParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y,InLookZ:GetValue(req).Value}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(FractalEngineParams)

        params.center[0] = center.X
        params.center[1] = center.Y
        params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y,InLookZ:GetValue(req).Value}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

     node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
	collectgarbage();
end

-- **/ "End of LUA CODE"

