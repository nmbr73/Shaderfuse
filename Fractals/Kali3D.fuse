--[[--
Kali3D

Based on https://www.shadertoy.com/view/MdB3DK Erstellt von guil am 2014-02-27


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })
-----------------------------------
-- Description of kernel parameters

----------------Kali3D---------------
Kali3DParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float rotation[2];
  float fog;
  float ambient;
  float ao;
  float construction;
  float modus;
  int colorsel;
  float optiontex;
  float color[3];
  float color2[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
Kali3DKernel =
    [[
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.

//Based on https://www.shadertoy.com/view/4ds3zn by IQ
#define igt  itime


__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
__DEVICE__ float4 min_f4(float4 v, float4 i) {return to_float4(_fminf(v.x,i.x),_fminf(v.y,i.y),_fminf(v.z,i.z),_fminf(v.w,i.w));}
__DEVICE__ float3 sin_f3(float3 i) {float3 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); return r;}



__DEVICE__ float map( float3 p, float4 *ot ,__CONSTANTREF__ Kali3DParams *params)
{
	float g=params->construction;//g=1.564f; //Org:1.94f
// float g=uF[1];//g=1.564f; //Org:1.94f

	float3 C =  to_float3_s(-1.42f);
	const int MaxIter = 12;
	float dr = 1.0f;

	*ot = to_float4_s(1000.0f);

	for( int i=0; i<MaxIter;i++ )
	{

        float r2 = dot(p,p);
        if(r2>100.0f)  continue;

        *ot = min_f4( *ot, to_float4_aw(abs_f3(p),r2) );

		//Scaling, inversion and translation


		dr= dr/r2*g;
		p=abs_f3(p)/r2*g+C;
	}
    if ( params->modus == 1.0f )
	    return 0.16f*_fabs(p.x)*length(to_float2(p.y,p.z))/dr;  //Try this
	else
        return 0.25f*length(p)/dr*_logf(length(p));

}

__DEVICE__ float trace( float3 ro, float3 rd , float4 *ot, __CONSTANTREF__ Kali3DParams *params)
{
    float maxd = 20.0f;
    float precis = 0.001f;

    float h=precis*2.0f;
    float t = 0.0f;
    for( int i=0; i<150; i++ )
    {
	if( t>maxd ||  h<precis*(0.1f+t)) continue;//break;//

        t += h;
		h = map( ro+rd*t, ot, params );
    }

   if( t>maxd ) t=-1.0f;
    return t;
}

__DEVICE__ float3 calcNormal( float3 pos ,float4 *ot, __CONSTANTREF__ Kali3DParams *params)
{
	float3 e = to_float3(0.0001f,0.0f,0.0f);
	float3 nor;
    float3 exyy = to_float3(e.x,e.y,e.y);
    float3 eyxy = to_float3(e.y,e.x,e.y);
    float3 eyyx = to_float3(e.y,e.y,e.x);


	nor.x = map(pos+exyy, ot, params) - map(pos-exyy, ot, params);
	nor.y = map(pos+eyxy, ot, params) - map(pos-eyxy, ot, params);
	nor.z = map(pos+eyyx, ot, params) - map(pos-eyyx, ot, params);
	return normalize(nor);
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

  return uv;
}

//############################################################################################################################
__KERNEL__ void Kali3DKernel(__CONSTANTREF__ Kali3DParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

     //Functionality.......

	float4 ot;

    float2 uv = fragCoord/iResolution;

	float zoom=1.6f;//+0.3f*_sinf(0.1f*igt);


	float2 p = -1.0f + 2.0f*fragCoord / iResolution;
	//p.x *= iResolution.x/iResolution.y;
      p.x *= ratio;

	// Standardparameter
    p -=  to_float2( (params->center[0]-0.5f)*2.0f*ratio, (params->center[1]-0.5f)*2.0f);
    p *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*2.0f*ratio),(params->pivot[1]-0.5f)*2.0f);
    p = spin(p, pivot, params->angle, 1.0f);


	float2 m = to_float2_s(-0.5f)*6.28f;
	//if( iMouse.z>0.0f ) m = (to_float2(iMouse.x, iMouse.y)/iResolution-0.5f)*6.28f;
    m += (to_float2(params->rotation[0], params->rotation[1])-0.0f)*6.28f;
	m += 0.5f*to_float2(_cosf(0.15f*igt),_cosf(0.09f*igt))+0.3f;

	// camera
	float3 ta = to_float3(0.0f,0.2f*_sinf(0.12f*igt),0.0f);
	float3 ro = ta- zoom*to_float3( _cosf(m.x)*_cosf(m.y), _sinf(m.y), _sinf(m.x)*_cosf(m.y));

	float3 cw = normalize(ta-ro);
	float3 cp = to_float3(0.0f,1.0f,0.0f);
	float3 cu = normalize(cross(cw,cp));
	float3 cv = normalize(cross(cu,cw));
	float3 rd = normalize( p.x*cu + p.y*cv + 2.0f*cw );


    // trace
    float3 col = to_float3(0.8f,0.8f,1.0f);
	float alpha = 1.0f;
	if (params->optiontex == 1)
	{
	   float4 tex = _tex2DVecN(iChannel0, uv.x, uv.y,15);
       col = to_float3(tex.x,tex.y,tex.z);
	   alpha = tex.w;
    }

	float t = trace( ro, rd , &ot, params);

	if( t>0.0f )
	{

		float3 pos = ro + t*rd;
		float3 nor = calcNormal( pos, &ot, params);

		// lighting
        float3  light1 = to_float3(  0.577f, 0.577f, -0.577f )*1.0f;
        float3  light2 = to_float3( -0.707f, 0.707f, 0.0f  )*1.0f;
		float key = _clampf( dot( light1, nor ), 0.0f, 1.0f );
		float bac = _clampf( 0.2f + 0.8f*dot( light2, nor ), 0.0f, 1.0f );
		float amb = (params->ambient+0.3f*nor.y);
		float ao = _powf( _clampf(ot.w*2.0f,0.2f,1.0f), params->ao );
        float3 brdf = to_float3_s(ao)*(0.4f*amb+key+0.2f*bac);

        // material
		float3 rgb = to_float3_s(1.0f);

		rgb =(0.4f*abs_f3(sin_f3(2.5f+(to_float3(01.5f*ot.w,ot.y*ot.y,2.0f-5.0f*ot.w))))+0.6f*sin_f3(to_float3(params->color[0],params->color[1],params->color[2])+2.3f+ot.x*22.5f))*0.85f + 0.15f;
		float3 rgb_gbr=_mix(rgb,to_float3(rgb.z,rgb.y,rgb.x)+to_float3(params->color2[0],params->color2[1],params->color2[2]),0.5f+0.5f*_sinf(4.5f*ot.w));

        switch (params->colorsel)
		{
			case 0: rgb.x = rgb_gbr.y; rgb.y = rgb_gbr.z; rgb.z = rgb_gbr.x; break;
			case 1: rgb.x = rgb_gbr.y; rgb.y = rgb_gbr.x; rgb.z = rgb_gbr.z; break;
			case 2: rgb.x = rgb_gbr.z; rgb.y = rgb_gbr.x; rgb.z = rgb_gbr.y; break;
			case 3: rgb.x = rgb_gbr.z; rgb.y = rgb_gbr.y; rgb.z = rgb_gbr.x; break;
			case 4: rgb.x = rgb_gbr.x; rgb.y = rgb_gbr.z; rgb.z = rgb_gbr.y; break;
			case 5: rgb.x = rgb_gbr.x; rgb.y = rgb_gbr.y; rgb.z = rgb_gbr.z; break;
            default:rgb.x = rgb_gbr.y; rgb.y = rgb_gbr.z; rgb.z = rgb_gbr.x;
        }

		//color
		//col = _mix(to_float3(0.8f,0.8f,1.0f),rgb*brdf,_expf(-0.08f*t));
        col = _mix(col,rgb*brdf,_expf(-params->fog*t));
        alpha = 1.0f;
	}

    fragColor=to_float4_aw(col, alpha);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- Kali3D ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    PC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})
  InRotation = self:AddInput("Rotation","Rotation", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })

   InFog = self:AddInput("Fog", "Fog", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.008,
	  --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

   InAmbient = self:AddInput("Ambient", "Ambient", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.7,
	  --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InAmbientOcclusion = self:AddInput("Ambient Occlusion", "AmbientOcclusion", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.2,
	  --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

   InConstruction = self:AddInput("Construction", "Construction", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.94,
	  --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    INP_MinAllowed = 1.564,
    INP_MaxAllowed = 2.3,
    })
   InModus = self:AddInput("Modus", "Modus", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
	  INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Colorfactor1",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = -0.2,
    INP_MinScale        = -1.0,
	  INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = -0.6,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.8,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })

 InRed2CH = self:AddInput("Red2", "Red2CH", {
    ICS_Name            = "Colorfactor2",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.3,
	  INP_MinScale        = -1.0,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2CH = self:AddInput("Green2", "Green2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.1,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2CH = self:AddInput("Blue2", "Blue2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = -0.2,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })

  InColorSel = self:AddInput("Color select", "ColorSel", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "YZX", },
	  { CCS_AddString = "YXZ", },
    { CCS_AddString = "XYZ", },
    { CCS_AddString = "XZY", },
    { CCS_AddString = "ZXY", },
	  { CCS_AddString = "ZYX", },
    CC_LabelPosition = "Horizontal",
  })

self:EndControlNest()

--------------------------------------------

  --  InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })



--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Ground", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	--LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end


    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences

	local optiontex = 0

    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
		 optiontex = 1
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end

    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    Sep1:SetAttrs({LINKS_Name = "____________Kali3D______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "Kali3DKernel", Kali3DKernel, "Kali3DParams", Kali3DParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.rotation     = {InRotation:GetValue(req).X,InRotation:GetValue(req).Y}
		    params.fog          = InFog:GetValue(req).Value
		    params.ambient      = InAmbient:GetValue(req).Value
		    params.ao           = InAmbientOcclusion:GetValue(req).Value
		    params.construction = InConstruction:GetValue(req).Value
		    params.modus        = InModus:GetValue(req).Value
		    params.colorsel     = InColorSel:GetValue(req).Value
		    params.optiontex    = optiontex
        params.color        = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		    params.color2       = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(Kali3DParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.rotation     = {InRotation:GetValue(req).X,InRotation:GetValue(req).Y}
		    params.fog          = InFog:GetValue(req).Value
		    params.ambient      = InAmbient:GetValue(req).Value
		    params.ao           = InAmbientOcclusion:GetValue(req).Value
		    params.construction = InConstruction:GetValue(req).Value
		    params.modus        = InModus:GetValue(req).Value
		    params.colorsel     = InColorSel:GetValue(req).Value
		    params.optiontex    = optiontex
        params.color        = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		    params.color2       = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
     node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR, TEX_ADDRESS_MODE_CLAMP, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end


