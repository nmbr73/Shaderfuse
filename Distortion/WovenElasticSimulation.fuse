--[[--/*

  WovenElasticSimulation.fuse

  Based on https://www.shadertoy.com/view/3cSSRh a WebGL shader created by wyatt.
  Converted to DCTL and embeddet into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT).
  Place this file in your Fusion's and/or DaVinci Resolve's 'Fuses/' folder to use it.

*/--]]--




-- /*
local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()



-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

-- */
ShaderParameters =
[[

  float  iResolution[2];
  float  iTime;
  float  iMouse[4];
  int    iFrame;
  bool   Reset;
  bool   StartTex;
  float  Shader;
  float  Blend1;
  float  Blend1Off;
  float  Blend1Mul;
  float  Modus;
  float  Par1[2];
  float  MouseSize;

  float  Color1[4];
  float  Color2[4];
  float  Level0;
  float  Level1;
  float  Level2;
  float  Level3;
  float  ColorOut[4];
  float  ColSeaHair1[4];
  float  ColSeaHair2[4];
  
  float  Brightness;

  int    width,height;
  int    compOrder;

]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel compatibility code
-- // ------------------------------------------------------------------------

-- */
ShaderCompatibilityCode =
[[


#if defined(DEVICE_IS_METAL)
  #define in
  #define out thread
  #define inout thread
#else
  #define in
  #define out
  #define inout
#endif

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

  // 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

  #if 1
    #if defined(DEVICE_IS_METAL)
      #define USE_NATIVE_METAL_IMPL   1
    #elif defined(DEVICE_IS_CUDA)
      #define USE_NATIVE_CUDA_IMPL    1
    #elif defined(DEVICE_IS_OPENCL)
      #define USE_NATIVE_OPENCL_IMPL  1
    #endif
  #endif

  #if defined(USE_NATIVE_METAL_IMPL)

    #define swi2(A,a,b)     (A).a##b
    #define swi3(A,a,b,c)   (A).a##b##c
    #define swi4(A,a,b,c,d) (A).a##b##c##d

    #define swi2S(a,b,c,d)   a.b##c = d
    #define swi3S(a,b,c,d,e) a.b##c##d = e

  #else

    #define swi2(A,a,b)     to_float2((A).a,(A).b)
    #define swi3(A,a,b,c)   to_float3((A).a,(A).b,(A).c)
    #define swi4(A,a,b,c,d) to_float4((A).a,(A).b,(A).c,(A).d)

    #define swi2S(a,b,c,d)   {float2 tmp = d; (a).b = tmp.x; (a).c = tmp.y;}
    #define swi3S(a,b,c,d,e) {float3 tmp = e; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z;}
    #define swi4S(a,b,c,d,e,f) {float4 tmp = f; (a).b = tmp.x; (a).c = tmp.y; (a).d = tmp.z; (a).e = tmp.w;}

  #endif

// ----------------------------------------------------------------------------------------------------------
// mat2 implementation
// ----------------------------------------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  #define to_mat2(A,B,C,D)   mat2((A),(B),(C),(D))

  #define mul_f2_mat2(A,B)   ((A)*(B))

#else

  typedef struct { float2 r0; float2 r1; } mat2;

  __DEVICE__ inline mat2 to_mat2      ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }

  __DEVICE__ inline float2 mul_f2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
  }

#endif // end of mat2 implementation

#if defined(USE_NATIVE_METAL_IMPL)

 #define fract_f3(A) fract(A)
 #define fract_f4(A) fract(A)

 #define abs_f3(a) _fabs(a)
 #define exp_f4(a) _expf((a))
 #define ceil_f3(a) ceil(a)
 #define sign_f(a) sign(a)
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

#else

  #if defined(USE_NATIVE_OPENCL_IMPL)

    #define reflect(I,N) (I-2.0f*dot(N,I)*N)

    #define fract(a) ((a)-_floor(a))  // oder Pointer bauen: gentype fract(gentype x, gentype *itpr)

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define abs_f3(a) fabs(a)
 #define exp_f4(a) _expf((a))
 #define ceil_f3(a) ceil(a)
 #define sign_f(a) sign(a)
 #define distance_f2( p1, p2) distance(p1, p2)

 #else // Generic

    #define fract(a) ((a)-_floor(a))

 #define fract_f3(A) to_float3(fract((A).x),fract((A).y),fract((A).z))
 #define fract_f4(A) to_float4(fract((A).x),fract((A).y),fract((A).z),fract((A).w))
 #define abs_f3(a) to_float3(_fabs((a).x), _fabs((a).y),_fabs((a).z))
 #define exp_f4(a) to_float4(_expf((a).x), _expf((a).y),_expf((a).z),_expf((a).w))
 #define ceil_f3(a) to_float3(_ceil((a).x), _ceil((a).y), _ceil((a).z))
 #define sign_f(a) (a==0.0f?0.0f:a>0.0f?1.0f:-1.0f)
 #define distance_f2(pt1,pt2) _sqrtf(dot(pt2 - pt1,pt2 - pt1))

  #endif

#endif


]]
-- /*



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

-- */
ShaderKernelCode =
[[

// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------
#define texture(ch,uv) _tex2DVecN(ch, (uv).x, (uv).y, 15)

#define N 10
#define R iResolution
#define A(U) texture(iChannel0,(U)/R)
#define B(U) texture(iChannel1,(U)/R)
#define C(U) texture(iChannel2,(U)/R)
#define D(U) texture(iChannel3,(U)/R)
#define ei(a) to_mat2(_cosf(a),_sinf(a),-_sinf(a),_cosf(a))

__DEVICE__ float4 hash(float4 p4)
{
    p4 = fract_f4(p4  * to_float4(0.1031f, 0.1030f, 0.0973f, 0.1099f));
    p4 += dot(p4, swi4(p4,w,z,x,y)+33.33f);
    return fract_f4((swi4(p4,x,x,y,z)+swi4(p4,y,z,z,w))*swi4(p4,z,y,w,x));
}

__DEVICE__ float4 noise (float3 U) {
    float3 c = ceil_f3(U);
    float3 f = _floor(U);
    float3 r = fract_f3(U);
    float4 _00 = _mix(hash(to_float4_aw(f,1)),hash(to_float4(f.x,f.y,c.z,1)),r.z);
    float4 _01 = _mix(hash(to_float4(f.x,c.y,f.z,1)),hash(to_float4(f.x,c.y,c.z,1)),r.z);
    float4 _10 = _mix(hash(to_float4(c.x,f.y,f.z,1)),hash(to_float4(c.x,f.y,c.z,1)),r.z);
    float4 _11 = _mix(hash(to_float4(c.x,c.y,f.z,1)),hash(to_float4(c.x,c.y,c.z,1)),r.z);
    return _mix(_mix(_00,_01,r.y),_mix(_10,_11,r.y),r.x);
}

__DEVICE__ float4 fbm (float3 U) {
   float4 o = to_float4_s(0);
   for (float i = 0.0f; i < 7.0f; i++) {
       U -= 0.5f;
       o += 0.5f*_expf(-0.5f*i)*(noise(U)*2.0f-1.0f);
       swi2S(U,x,y, mul_f2_mat2(swi2(U,x,y) , ei(0.5f)));
       swi2S(U,x,z, mul_f2_mat2(swi2(U,x,z) , ei(0.5f)));
       U *= 2.0f;
   }
   return o;
}

__DEVICE__ float box( float3 p, float3 b )
{
  float3 q = abs_f3(p) - b;
  return length(_fmaxf(q, to_float3_s(0.0f))) + _fminf(_fmaxf(q.x,_fmaxf(q.y,q.z)),0.0f);
}
__DEVICE__ float line (float2 U, float4 a) {
    return length(U-swi2(a,x,y)-(swi2(a,z,w)-swi2(a,x,y))*clamp(dot(U-swi2(a,x,y),swi2(a,z,w)-swi2(a,x,y))/dot(swi2(a,x,y)-swi2(a,z,w),swi2(a,x,y)-swi2(a,z,w)),0.0f,1.0f));
}
__DEVICE__ float triangle(float2 p, float2 d, float r, out float2 *no,float angle) {
    // p + dx . n = 0
    // p.n +dx.n = 0
    // x = -d.n/p.n
    p = mul_f2_mat2(p, ei(angle));
    d = mul_f2_mat2(d, ei(angle));

    float o = -1.0f;
    float2 n = to_float2(0,-1);
    float a = -dot(p-r*n,n)/dot(d,n);

    float2 q = p + d*a;
    if (length(q-r*n) < r*_sqrtf(3.0f) && a > 0.0f) o = a, *no = n;

    n = to_float2(_sqrtf(3.0f)/2.0f,0.5f);
    float b = -dot(p-r*n,n)/dot(d,n);

    q = p + d*b;
    if (length(q-r*n) < r*_sqrtf(3.0f) && (b < o||o < 0.0f) && b>0.0f) o = b, *no = n;

    n = to_float2(-_sqrtf(3.0f)/2.0f,0.5f);
    float c = -dot(p-r*n,n)/dot(d,n);

    q = p + d*c;
    if (length(q-r*n) < r*_sqrtf(3.0f) && (c < o||o < 0.0f) && c>0.0f) o = c, *no = n;

    *no = mul_f2_mat2(*no, ei(-angle));
    return o;
}

__DEVICE__ float polygon(float2 p, float2 d, float r, out float2 *no, float angle, int sides) {
    p = mul_f2_mat2(p, ei(angle));
    d = mul_f2_mat2(d, ei(angle));

    float o = -1.0f;
    float theta = 2.0f * 3.14159265359f / (float)(sides);

    for (int i = 0; i < sides; i++) {
        float ang = theta * (float)(i);
        float2 n = to_float2(_cosf(ang), _sinf(ang));
        float a = -dot(p - r * n, n) / dot(d, n);

        float2 q = p + d * a;
        if (length(q - r * n) < r * _tanf(theta / 2.0f) && a > 0.0f && (a < o || o < 0.0f)) {
            o = a;
            *no = n;
        }
    }

    *no = mul_f2_mat2(*no, ei(-angle));
    return o;
}


__DEVICE__ float intersectCube(float3 p, float3 d, float3 lo, float3 hi, out float3 *no) {
    float3 tLo = (lo - p) / d;
    float3 tHi = (hi - p) / d;
    float3 tMin = _fminf(tLo, tHi);
    float3 tMax = _fmaxf(tLo, tHi);
    float tEntry = _fmaxf(tMin.x, _fmaxf(tMin.y, tMin.z));
    float tExit = _fminf(tMax.x, _fminf(tMax.y, tMax.z));

    if (tEntry > tExit || tExit < 0.0f) {
        return -1.0f; // No intersection
    }

    // Determine the normal of the intersecting face
    if (tEntry > 0.0f) {
        if (tEntry == tMin.x)      *no = to_float3(-sign_f(d.x), 0.0f, 0.0f);
        else if (tEntry == tMin.y) *no = to_float3(0.0f, -sign_f(d.y), 0.0f);
        else if (tEntry == tMin.z) *no = to_float3(0.0f, 0.0f, -sign_f(d.z));
        return tEntry;
    } else {
        if (tExit == tMax.x)      *no = to_float3(sign_f(d.x), 0.0f, 0.0f);
        else if (tExit == tMax.y) *no = to_float3(0.0f, sign_f(d.y), 0.0f);
        else if (tExit == tMax.z) *no = to_float3(0.0f, 0.0f, sign_f(d.z));
        return tExit;
    }
}

__DEVICE__ float4 Blending( __TEXTURE2D__ channel, float2 uv, float4 Q, float Blend, float2 Par, float2 MulOff, int Modus, float2 U, float2 R)
{
    Modus *= 2; // for Fusination

    if (Blend > 0.0f)
    {
      //float2 tuv = U/R;
      float4 tex = texture(channel,uv);

      if (tex.w > 0.0f)
      {
        if ((int)Modus&2)
          //swi2S(Q,x,y, _mix(swi2(Q,x,y),(swi2(tex,x,y)+MulOff.y)*MulOff.x,Blend));
          Q = _mix(Q,(tex+MulOff.y)*MulOff.x,Blend);
          //swi3S(Q,x,y,w, _mix(swi3(Q,x,y,w),(swi3(tex,x,y,z)+MulOff.y)*MulOff.x,Blend));

        if ((int)Modus&4)
          //swi2S(Q,x,y, _mix( swi2(Q,x,y), Par , Blend));
          //swi2S(Q,x,y, _mix( swi2(Q,x,y),  Par, Blend));
          //swi3S(Q,x,y,z, _mix(swi3(Q,x,y,z), (swi3(tex,x,y,z)+MulOff.y)*MulOff.x, Blend));
          Q = _mix(Q,to_float4(Par.x,Par.y,(tex.x+MulOff.y)*MulOff.x,(tex.y+MulOff.y)*MulOff.x),Blend);


        if ((int)Modus&8)
          //swi2S(Q,x,y, _mix( swi2(Q,x,y), Par, Blend));
          Q = _mix(Q,to_float4((tex.x+MulOff.y)*MulOff.x,(tex.y+MulOff.y)*MulOff.x,Par.x,Par.y),Blend);
          //Q.z = _mix( Q.z,  (tex.x+MulOff.y)*MulOff.x, Blend);
          //swi2S(Q,z,w, _mix( swi2(Q,z,w), swi2(tex,x,y)*Par, Blend));

        if ((int)Modus&16)
          //swi2S(Q,z,w, _mix(swi2(Q,z,w),  swi2(tex,x,y)*Par, Blend));
          Q = _mix(Q,to_float4(Par.x,Par.y,MulOff.x,MulOff.y),Blend);
      }
      else
        if ((int)Modus&32) //Special
          //swi2S(Q,x,y, _mix(swi2(Q,x,y),(swi2(tex,x,y)+MulOff.y)*MulOff.x,Blend));
          Q = _mix(Q,(tex+MulOff.y)*MulOff.x,Blend);
    }

  return Q;
}




// ----------------------------------------------------------------------------------
// - Buffer A                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer A 'Previsualization: Buffer A' to iChannel0
// Connect Buffer A 'Texture: Blending' to iChannel1
// Connect Buffer A 'Previsualization: Buffer D' to iChannel3


__DEVICE__ float3 init(float2 U, float2 R) {
    return to_float3(_sinf(U.x/R.x*3.14159f*2.0f),1.5f*(U.y/R.y*2.0f-1.0f),_cosf(U.x/R.x*3.14159f*2.0f));
}

__DEVICE__ float3 init2(float2 U, float2 R) {
    return swi3(to_float3(U.x/R.x*2.0f-1.0f,U.y/R.y*2.0f-1.0f,0.7f+0.01f*_sinf(dot(U,U))),x,z,y);
}

__DEVICE__ float3 init3(float2 U, float2 R) {
    return to_float3(U.x/R.x*2.0f-1.0f, U.y/R.y*2.0f-1.0f, 0.01f*_sinf(dot(U,U)));
}

__KERNEL__ void WovenElasticSimulationFuse__Buffer_A(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2,  __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 Q   = to_float4_s(0.0f);
  float2 U   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   StartTex = params->StartTex;
  float  Shader = params->Shader;
  float  Blend1 = params->Blend1;
  float  Blend1Off = params->Blend1Off;
  float  Blend1Mul = params->Blend1Mul;
  float  Modus = params->Modus;
  float2 Par1 = to_float2(params->Par1[0], params->Par1[1]);
  float  MouseSize = params->MouseSize;

  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float4 ColSeaHair1 = to_float4(params->ColSeaHair1[0], params->ColSeaHair1[1], params->ColSeaHair1[2], params->ColSeaHair1[3]);
  float4 ColSeaHair2 = to_float4(params->ColSeaHair2[0], params->ColSeaHair2[1], params->ColSeaHair2[2], params->ColSeaHair2[3]);

  float  Brightness = params->Brightness;

  // --------

    U+=0.5f;

    if (Shader == 0) // Woven1
    {
      Q = A(U);
      float3 Q0 = init(U,R);
      float3 f = to_float3_s(0);
      for (float x = -40.0f; x <= 40.0f;x++){
      {
              float4 q = A(U+to_float2(x,0));
              float3 q0 = init(U+to_float2(x,0),R);
              float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
              float3 r0 = q0-Q0;
              float l = R.y*length(r);
              float L = R.y*length(r0);
              if (l>0.0f)
              f += 0.1f*r/l*(l-L)/L + 0.5f*r/l*_expf(-0.1f*l) - 0.5f*r/l*_expf(-0.1f*l*0.1f*l);
      }
      {
              float4 q = A(U+to_float2(0,x));
              float3 q0 = init(U+to_float2(0,x),R);
              float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
              float3 r0 = q0-Q0;
              float l = R.y*length(r);
              float L = R.y*length(r0);
              if (l>0.0f)
              f += 0.1f*r/l*(l-L)/L + 0.5f*r/l*_expf(-0.1f*l) - 0.5f*r/l*_expf(-0.1f*l*0.1f*l);}
      }
      swi3S(Q,x,y,z, swi3(Q,x,y,z) + f);

      if (iFrame < 1 || Reset) {
          Q = to_float4(U.x/R.x*2.0f-1.0f, U.y/R.y*2.0f-1.0f,10.0f*_sinf(dot(U,U))/R.y,1);
      }

     // if (iMouse.z>0.0f && length(U-swi2(iMouse,x,y)) < MouseSize) {
     //    Q = to_float4(U.x/R.x*2.0f-1.0f, U.y/R.y*2.0f-1.0f,10.0f*_sinf(dot(U,U))/R.y,1);
     // }
    }

    if (Shader == 1) // Woven2
    {
        Q = A(U);
        swi3S(Q,x,y,z, swi3(Q,x,y,z) + 0.25f*swi3(D(U),x,y,z));
        if (iFrame < 1 || Reset) {
          swi3S(Q,x,y,z, init2(U,R));
        }
        if (A(0.5f*R).y<-2.0f) swi3S(Q,x,y,z, init2(U,R));
    }

    if (Shader == 2 || Shader == 3) // Woven3 and SeaHairs
    {
        Q = A(U);
        swi3S(Q,x,y,z, swi3(Q,x,y,z) + 0.1f*swi3(D(U),x,y,z));
        if (iFrame < 1 || Reset) {
            swi3S(Q,x,y,z, init3(U,R));
        }
        if (A(0.5f*R).y<-2.0f) swi3S(Q,x,y,z, init3(U,R));
    }


    //----------------------------------------------------------------------------------------

    if (iMouse.z>0.0f && length(U-swi2(iMouse,x,y)) < MouseSize) {
        Q = to_float4(U.x/R.x*2.0f-1.0f, U.y/R.y*2.0f-1.0f,10.0f*_sinf(dot(U,U))/R.y,1);
    }

    if(StartTex)
    {
      if(B(U).w == 0.0f)
      {
        Q = to_float4(U.x/R.x*2.0f-1.0f, U.y/R.y*2.0f-1.0f,10.0f*_sinf(dot(U,U))/R.y,1);
      }
      else
        Q = to_float4_s(0.0f);
    }

    //if (Blend1>0.0f) Q = Blending(iChannel1, U/R, Q, Blend1, Par1, to_float2(Blend1Mul,Blend1Off), Modus, U, R);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
}


// ----------------------------------------------------------------------------------
// - Buffer B                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer B 'Previsualization: Buffer A' to iChannel0
// Connect Buffer B 'Previsualization: Buffer B' to iChannel1
// Connect Buffer B 'Texture: Blending' to iChannel2

__KERNEL__ void WovenElasticSimulationFuse__Buffer_B(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 Q   = to_float4_s(0.0f);
  float2 U   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   StartTex = params->StartTex;
  float  Shader = params->Shader;
  float  Blend1 = params->Blend1;
  float  Blend1Off = params->Blend1Off;
  float  Blend1Mul = params->Blend1Mul;
  float  Modus = params->Modus;
  float2 Par1 = to_float2(params->Par1[0], params->Par1[1]);
  float  MouseSize = params->MouseSize;
  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float4 ColSeaHair1 = to_float4(params->ColSeaHair1[0], params->ColSeaHair1[1], params->ColSeaHair1[2], params->ColSeaHair1[3]);
  float4 ColSeaHair2 = to_float4(params->ColSeaHair2[0], params->ColSeaHair2[1], params->ColSeaHair2[2], params->ColSeaHair2[3]);

  float  Brightness = params->Brightness;

  // --------

    U+=0.5f;

    if (iFrame%N>0) {
      Q = B(U);
      _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
      return;
    }

    if (Shader == 0) // Woven1
    {
      float4 h0 = hash(to_float4(U.x,U.y,iFrame/N,1));
      float4 h3 = hash(to_float4(U.x,U.y,iFrame/N,2));
      float3 V = swi3(texture(iChannel0,swi2(h0,x,y)),x,y,z);
      Q = (to_float4(V.x,V.y,0,0)*R.y*0.5f+0.5f*swi4(R,x,y,x,y));
      Q.z = 1.0f;
      Q.w = 1.0f;
    }

    if (Shader == 1) // Woven2
    {
      float4 h0 = hash(to_float4(U.x,U.y,iFrame/N,1));
      float4 h3 = hash(to_float4(U.x,U.y,iFrame/N,2));
      float3 V = swi3(texture(iChannel0,swi2(h0,x,y)),x,y,z);
      swi2S(V,x,y, swi2(V,x,y) * 4.0f/(5.0f+V.z));
      V.y += 0.2f;
      Q = (to_float4(V.x,V.y,0,0)*R.y*0.5f+0.5f*swi4(R,x,y,x,y));
      Q.z = 1.0f;
      Q.w = 1.0f;
    }

    if (Shader == 2) // Woven3
    {
      float4 h0 = hash(to_float4(U.x,U.y,iFrame/N,1));
      float4 h3 = hash(to_float4(U.x,U.y,iFrame/N,2));
      float3 V = swi3(texture(iChannel0,swi2(h0,x,y)),x,y,z);
      swi2S(V,x,y, swi2(V,x,y) * 5.0f/(5.0f+V.z));
      Q = (to_float4(V.x,V.y,0,0)*R.y*0.5f+0.5f*swi4(R,x,y,x,y));
      Q.z = 1.0f;
      Q.w = 1.0f;
    }

    if (Shader == 3) // SeaHairs
    {
      float4 h0 = hash(to_float4(U.x,U.y,iFrame/N,1));
      float4 h3 = hash(to_float4(U.x,U.y,iFrame/N,2));
      float3 V = swi3(A(swi2(h0,x,y)*R),x,y,z);//texture(iChannel0,swi2(h0,x,y)).xyz;
      swi2S(V,x,y, swi2(V,x,y) * 5.0f/(5.0f+V.z));
      Q = (to_float4(V.x,V.y,0,0)*R.y*0.5f+0.5f*swi4(R,x,y,x,y));
      Q.z = 1.0f;
      Q.w = 1.0f;
    }

    if(iFrame < 1 || Reset) Q = to_float4_s(0.0f);


    if (Blend1>0.0f) Q = Blending(iChannel2, U/R, Q, Blend1, Par1, to_float2(Blend1Mul,Blend1Off), Modus, U, R);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
}


// ----------------------------------------------------------------------------------
// - Buffer C                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer C 'Previsualization: Buffer B' to iChannel0
// Connect Buffer C 'Previsualization: Buffer C' to iChannel1
// Connect Buffer C 'Texture: Blending' to iChannel2

__DEVICE__ void Y (inout float4 *Q, in float2 U, float2 v, float2 R, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1) {
    float2 x = swi2(B(U+v),x,y);
    if (distance_f2(U,swi2(A(x),x,y))<distance_f2(U,swi2(A(swi2(*Q,x,y)),x,y)))
        swi2S(*Q,x,y, x);
}


__KERNEL__ void WovenElasticSimulationFuse__Buffer_C(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 Q   = to_float4_s(0.0f);
  float2 U   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   StartTex = params->StartTex;
  float  Shader = params->Shader;
  float  Blend1 = params->Blend1;
  float  Blend1Off = params->Blend1Off;
  float  Blend1Mul = params->Blend1Mul;
  float  Modus = params->Modus;
  float2 Par1 = to_float2(params->Par1[0], params->Par1[1]);
  float  MouseSize = params->MouseSize;

  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float4 ColSeaHair1 = to_float4(params->ColSeaHair1[0], params->ColSeaHair1[1], params->ColSeaHair1[2], params->ColSeaHair1[3]);
  float4 ColSeaHair2 = to_float4(params->ColSeaHair2[0], params->ColSeaHair2[1], params->ColSeaHair2[2], params->ColSeaHair2[3]);

  float  Brightness = params->Brightness;

  // --------

    U+=0.5f;

    if (Shader == 0 || Shader == 1 || Shader == 2 || Shader == 3) // Woven1 und Woven2 und Woven3 and SeaHairs
    {
      Q = B(U);
      if (iFrame%N==0){
          Q = to_float4(U.x,U.y,0,1);
      } else {
        float k = _exp2f((float)(N-1-(iFrame%N)));
        Y(&Q,U,to_float2(0,k), R, iChannel0, iChannel1);
        Y(&Q,U,to_float2(k,0), R, iChannel0, iChannel1);
        Y(&Q,U,to_float2(0,-k), R, iChannel0, iChannel1);
        Y(&Q,U,to_float2(-k,0), R, iChannel0, iChannel1);
      }
    }

    if(iFrame < 1 || Reset) Q = to_float4_s(0.0f);

    //if (Blend1>0.0f) Q = Blending(iChannel2, U/R, Q, Blend1, Par1, to_float2(Blend1Mul,Blend1Off), Modus, U, R);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
}
// ----------------------------------------------------------------------------------
// - Buffer D                                                                       -
// ----------------------------------------------------------------------------------
// Connect Buffer D 'Previsualization: Buffer B' to iChannel0
// Connect Buffer D 'Previsualization: Buffer C' to iChannel1
// Connect Buffer D 'Previsualization: Buffer D' to iChannel2
// Connect Buffer D 'Previsualization: Buffer A' to iChannel3
// Connect Buffer D 'Texture: Blending' to iChannel4


__DEVICE__ float3 initD(float2 U, float2 R) {
    return 2.0f*to_float3((U.x/R.x*2.0f-1.0f), _cosf(5.0f*length((U-0.5f*R)/R)), U.y/R.y*2.0f-1.0f);
}

__DEVICE__ float3 initD3(float2 U, float2 R) {
    return to_float3((U.x/R.x*2.0f-1.0f), U.y/R.y*2.0f-1.0f, 2.0f*_cosf(6.0f*length((U-0.5f*R)/R)));
}

__DEVICE__ float3 initDSH(float2 U, float2 R) {
    return to_float3(U.x/R.x*2.0f-1.0f, -0.75f+0.25f*(U.y/R.y*2.0f-1.0f), 0);
}

__DEVICE__ float map (float3 p) {
    float3 q = p;
    q.y += 0.25f;
    swi2S(q,x,y, mul_f2_mat2(swi2(q,x,y) ,ei(0.5f)));
    swi2S(q,x,z, mul_f2_mat2(swi2(q,x,z) ,ei(0.5f)));
    return _fminf(length(to_float2(length(swi2(p,x,z))-0.9f,p.y-0.5f))-0.05f,box(q,to_float3_s(0.4f)));
}

__DEVICE__ float3 normal (float3 p) {
    float m = map(p);
    float2 e = to_float2(1e-4,0);
    return normalize(to_float3(
                                  map(p+swi3(e,x,y,y))-m,
                                  map(p+swi3(e,y,x,y))-m,
                                  map(p+swi3(e,y,y,x))-m
                              ));
}



__KERNEL__ void WovenElasticSimulationFuse__Buffer_D(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2,  __TEXTURE2D__ iChannel3,  __TEXTURE2D__ iChannel4, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 Q   = to_float4_s(0.0f);
  float2 U   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   StartTex = params->StartTex;
  float  Shader = params->Shader;
  float  Blend1 = params->Blend1;
  float  Blend1Off = params->Blend1Off;
  float  Blend1Mul = params->Blend1Mul;
  float  Modus = params->Modus;
  float2 Par1 = to_float2(params->Par1[0], params->Par1[1]);
  float  MouseSize = params->MouseSize;

  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float4 ColSeaHair1 = to_float4(params->ColSeaHair1[0], params->ColSeaHair1[1], params->ColSeaHair1[2], params->ColSeaHair1[3]);
  float4 ColSeaHair2 = to_float4(params->ColSeaHair2[0], params->ColSeaHair2[1], params->ColSeaHair2[2], params->ColSeaHair2[3]);

  float  Brightness = params->Brightness;

  // --------

    U+=0.5f;

    float ratio = R.y/R.x;

    Q = C(U);
    float4 a = A(swi2(B(U),x,y));//*to_float2(ratio,1.0f));
    if (iFrame%N==N-1)
      //Q = Q*0.9f + 0.1f*exp_f4(-0.1f*a.w*to_float4(1,2,3,4))*a.z*_exp2f(-0.5f*a.z)*length(_expf(-distance_f2(U,swi2(a,x,y))))*to_float4_s(1);
      //Q = Q*0.9f + 0.1f*exp_f4(-0.1f*a.w*Color1)*a.z*_exp2f(-0.5f*a.z)*_fabs(_expf(-distance_f2(U,swi2(a,x,y))))*Color2;//to_float4_s(1);
      Q = Q*Level0 + Level1*exp_f4(-Level2*a.w*Color1)*a.z*_exp2f(-Level3*a.z)*_fabs(_expf(-distance_f2(U,swi2(a,x,y))))*Color2;//to_float4_s(1);

    if (Shader == 1) // Woven2
    {
        swi3S(Q,x,y,z, swi3(D(U),x,y,z));
        float3 Q0 = initD(U,R);
        float3 f = to_float3(0,-0.000001f,0);
        for (float x = -10.0f; x <= 10.0f;x++){
        if (_fabs(U.x+x-0.5f*R.x)<0.5f*R.x) {
                float4 q = D(U+to_float2(x,0));
                float3 q0 = initD(U+to_float2(x,0),R);
                float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                float3 r0 = q0-Q0;
                float l = R.y*length(r);
                float L = R.y*length(r0);
                if (l>0.0f)
                f += r/l*(l-L)/L ;
        }
        if (_fabs(U.y+x-0.5f*R.y)<0.5f*R.y) {
                float4 q = D(U+to_float2(0,x));
                float3 q0 = initD(U+to_float2(0,x),R);
                float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                float3 r0 = q0-Q0;
                float l = R.y*length(r);
                float L = R.y*length(r0);
                if (l>0.0f)
                f += r/l*(l-L)/L;}
        }
        float3 fn = normal(swi3(Q,x,y,z))*_fmaxf(-map(swi3(Q,x,y,z)),0.0f);
        f += fn;
        swi3S(Q,x,y,z, 0.999f*swi3(C(U),x,y,z) + f);
        float3 df = cross(cross(fn,normalize(swi3(Q,x,y,z))),normalize(fn));
        if (length(swi3(Q,x,y,z))>0.0f&&length(fn)>0.0f)
          swi3S(Q,x,y,z, swi3(Q,x,y,z) - 0.25f*df);
    }

    if (Shader == 2) // Woven3
    {
        swi3S(Q,x,y,z, swi3(D(U),x,y,z));
        float3 Q0 = initD3(U,R);
        float3 f = to_float3(0,0,0);
        for (float x = -10.0f; x <= 10.0f;x++){
        if (_fabs(U.x+x-0.5f*R.x)<0.5f*R.x) {
                float4 q = D(U+to_float2(x,0));
                float3 q0 = initD3(U+to_float2(x,0),R);
                float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                float3 r0 = q0-Q0;
                float l = R.y*length(r);
                float L = R.y*length(r0);
                if (l>0.0f)
                f += r/l*(l-L)/L ;
        }
        if (_fabs(U.y+x-0.5f*R.y)<0.5f*R.y) {
                float4 q = D(U+to_float2(0,x));
                float3 q0 = initD3(U+to_float2(0,x),R);
                float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                float3 r0 = q0-Q0;
                float l = R.y*length(r);
                float L = R.y*length(r0);
                if (l>0.0f&&L-l<1.0f/R.x)
                f += r/l*(l-L)/L;}
        }
        //vec3 fn = normal(swi3(Q,x,y,z))*_fmaxf(-map(swi3(Q,x,y,z)),0.0f);
        //f += fn;
        swi3S(Q,x,y,z, 0.99f*swi3(C(U),x,y,z) + f);
        //vec3 df = cross(cross(fn,normalize(swi3(Q,x,y,z))),normalize(fn));
        //if (length(swi3(Q,x,y,z))>0.&&length(fn)>0.0f)
        //swi3(Q,x,y,z) -= 0.1f*df;
    }

    if (Shader == 3) // SeaHairs
    {
        swi3S(Q,x,y,z, swi3(D(U),x,y,z));
        float3 Q0 = initDSH(U,R);
        float3 f = to_float3(0,0.0001f,0);
        for (float x = -10.0f; x <= 10.0f;x++){
        if (_fabs(U.x+x-0.5f*R.x)<0.5f*R.x) {
                  float4 q = D(U+to_float2(x,0));
                  float3 q0 = initDSH(U+to_float2(x,0),R);
                  float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                  float3 r0 = q0-Q0;
                  float l = R.y*length(r);
                  float L = R.y*length(r0);
                  if (l>0.0f)
                  f += (_expf(-l)+_expf(-_fmaxf(20.0f*(U.y/R.y),0.0f)))*r/l*(l-L)/L ;
          }
          if (_fabs(U.y+x-0.5f*R.y)<0.5f*R.y) {
                  float4 q = D(U+to_float2(0,x));
                  float3 q0 = initDSH(U+to_float2(0,x),R);
                  float3 r = swi3(q,x,y,z)-swi3(Q,x,y,z);
                  float3 r0 = q0-Q0;
                  float l = R.y*length(r);
                  float L = R.y*length(r0);
                  if (l>0.&&L-l<1.0f/R.x)
                  f += 0.1f*r/l*(l-L)/_sqrtf(L);
          }
        }
        f += 0.001f*swi3(fbm(10.0f*swi3(Q,x,y,z)+0.1f*iTime),x,y,z);
        if (U.y < 10.0f) f -= (swi3(Q,x,y,z)-initDSH(U,R));
        //vec3 fn = normal(swi3(Q,x,y,z))*_fmaxf(-map(swi3(Q,x,y,z)),0.0f);
        //f += fn;
        swi3S(Q,x,y,z, 0.99f*swi3(C(U),x,y,z) + f);
        //vec3 df = cross(cross(fn,normalize(swi3(Q,x,y,z))),normalize(fn));
        //if (length(swi3(Q,x,y,z))>0.&&length(fn)>0.0f)
        //swi3(Q,x,y,z) -= 0.1f*df;
    }

    if(iFrame < 1 || Reset) Q = to_float4_s(0.0f);

    //if (Blend1>0.0f) Q = Blending(iChannel3, U/R, Q, Blend1, Par1, to_float2(Blend1Mul,Blend1Off), Modus, U, R);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
}
// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------
// Connect Image 'Previsualization: Buffer B' to iChannel0
// Connect Image 'Previsualization: Buffer C' to iChannel1
// Connect Image 'Previsualization: Buffer D' to iChannel2
// Connect Image 'Texture: Blending' to iChannel3

// Fork of "Cloud painting 3" by wyatt. https://shadertoy.com/view/wcjXzz
// 2025-03-09 19:41:55

// Fork of "Cloud painting 2" by wyatt. https://shadertoy.com/view/wfjSRR
// 2025-03-09 19:26:49

// Fork of "Cloud painting" by wyatt. https://shadertoy.com/view/3fSSRz
// 2025-03-09 16:04:24

// Fork of "phantom" by wyatt. https://shadertoy.com/view/3cBXRR
// 2025-03-08 23:42:08
// Fork of "JFA 3D Path tracing 5" by None. https://shadertoy.com/view/-1
// 2025-03-08 21:48:05

// Fork of "JFA 3D Path tracing 5" by wyatt. https://shadertoy.com/view/3clXDs
// 2025-03-08 21:47:53

// Fork of "JFA 3D Path tracing 4" by wyatt. https://shadertoy.com/view/WfXXWl
// 2025-03-08 16:23:08

// Fork of "JFA 3D Path tracing 3" by wyatt. https://shadertoy.com/view/3ffXDf
// 2025-03-08 04:03:09

// Fork of "JFA 3D Path tracing 2" by wyatt. https://shadertoy.com/view/WcXXWf
// 2025-03-07 15:56:53

// Fork of "JFA 3D Path tracing" by wyatt. https://shadertoy.com/view/tcXXDj
// 2025-03-07 15:13:58

// Fork of "JFA Iris" by wyatt. https://shadertoy.com/view/tclXDS
// 2025-03-07 02:56:31

// Fork of "JFA B hole" by wyatt. https://shadertoy.com/view/WcsSWB
// 2025-03-06 18:00:25

// Fork of "JFA Art 3" by wyatt. https://shadertoy.com/view/wfXXzs
// 2025-03-06 14:31:50

// Fork of "JFA Art 2" by wyatt. https://shadertoy.com/view/wcfSzs
// 2025-03-05 20:01:44

// Fork of "JFA Art" by wyatt. https://shadertoy.com/view/tfXSzs
// 2025-03-05 19:23:52

// Fork of " Bird" by wyatt. https://shadertoy.com/view/tcXSRX
// 2025-03-05 19:17:06

// Fork of "JFA Lightning" by wyatt. https://shadertoy.com/view/3cfSD4
// 2025-03-04 23:47:14

// Fork of "JFA Fractal 2" by wyatt. https://shadertoy.com/view/WcfSW4
// 2025-03-02 00:44:45

// Fork of "JFA Fractal" by wyatt. https://shadertoy.com/view/WfXSW4
// 2025-03-02 00:17:46

// Fork of "JFA Graph" by wyatt. https://shadertoy.com/view/tclXDH
// 2025-03-01 23:56:42

// Fork of "JFA Path tracing" by wyatt. https://shadertoy.com/view/tcsXWH
// 2025-03-01 23:08:48

// Fork of "JFA Particle Drawing 4" by wyatt. https://shadertoy.com/view/3csSz4
// 2025-03-01 22:24:26

// Fork of "JFA Particle Drawing 3" by wyatt. https://shadertoy.com/view/WcfSRN
// 2025-02-27 17:50:34

// Fork of "JFA Particle Drawing" by wyatt. https://shadertoy.com/view/tcXXR8
// 2025-02-27 13:51:51



__KERNEL__ void WovenElasticSimulationFuse(__CONSTANTREF__ Params*  params,  __TEXTURE2D__ iChannel0,  __TEXTURE2D__ iChannel1,  __TEXTURE2D__ iChannel2,  __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ destinationTexture)
{
   DEFINE_KERNEL_ITERATORS_XY(fusion_x, fusion_y);

   if (fusion_x >= params->width || fusion_y >= params->height)
     return;

  float2 iResolution = to_float2(params->iResolution[0], params->iResolution[1]);
  float  iTime       = params->iTime;
  float4 iMouse      = to_float4(params->iMouse[0],params->iMouse[1],params->iMouse[2],params->iMouse[3]);
  int    iFrame      = params->iFrame;
  float4 Q   = to_float4_s(0.0f);
  float2 U   = to_float2(fusion_x,fusion_y);


  bool   Reset = params->Reset;
  bool   StartTex = params->StartTex;
  float  Shader = params->Shader;
  float  Blend1 = params->Blend1;
  float  Blend1Off = params->Blend1Off;
  float  Blend1Mul = params->Blend1Mul;
  float  Modus = params->Modus;
  float2 Par1 = to_float2(params->Par1[0], params->Par1[1]);
  float  MouseSize = params->MouseSize;

  float4 Color1 = to_float4(params->Color1[0], params->Color1[1], params->Color1[2], params->Color1[3]);
  float4 Color2 = to_float4(params->Color2[0], params->Color2[1], params->Color2[2], params->Color2[3]);
  float  Level0 = params->Level0;
  float  Level1 = params->Level1;
  float  Level2 = params->Level2;
  float  Level3 = params->Level3;
  float4 ColorOut = to_float4(params->ColorOut[0], params->ColorOut[1], params->ColorOut[2], params->ColorOut[3]);
  float4 ColSeaHair1 = to_float4(params->ColSeaHair1[0], params->ColSeaHair1[1], params->ColSeaHair1[2], params->ColSeaHair1[3]);
  float4 ColSeaHair2 = to_float4(params->ColSeaHair2[0], params->ColSeaHair2[1], params->ColSeaHair2[2], params->ColSeaHair2[3]);

  float  Brightness = params->Brightness;

  // --------

    mat2 dummy;

    if (Shader == 0) // Woven1
      Q = Brightness*C(U);///float((iFrame+1)/N);

    if (Shader == 1 || Shader == 2) // Woven2
      Q = Brightness*to_float4_s(C(U).w);///float((iFrame+1)/N);

    if (Shader == 3) //SeaHairs
    {
      Q = 0.05f*ColSeaHair1;//to_float4(1,2,3,4);
      Q += ColSeaHair2 * to_float4_s(C(U).w);///float((iFrame+1)/N);
    }

    Q = to_float4_aw(swi3(Q,x,y,z) * (swi3(ColorOut,x,y,z) + 0.5f), ColorOut.w == 0.0 ? Q.w : ColorOut.w);

  _tex2DVec4Write(destinationTexture, fusion_x, fusion_y, Q);
}

]]
-- /*



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

  
  -- Speed Slider
  
  InFrequency = self:AddInput("Speedup", "speed", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 1.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
    SLCS_LowName       = "stop",
    SLCS_HighName      = "5x",
  })
  
  -- iMouse Controls
  
  InMouseXY = self:AddInput("iMouse.xy", "iMouseXY", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
  })
  
  InMouseZW = self:AddInput("iMouse.zw", "iMouseZW", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged  = false,
    INPID_PreviewControl = "CrosshairControl",
    INP_Disabled = true,
  })
  
  InMouseDrag = self:AddInput("Mouse Button Pressed", "iMouseClick", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_DoNotifyChanged  = false,
    INP_MinScale = 0,
    INP_MaxScale = 1,
    INP_Default = 0,
  })
  InResetCheckbox = self:AddInput("Reset", "Reset", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InStartTexCheckbox = self:AddInput("StartTex", "StartTex", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
    INP_Integer         = true,
    INP_Default         = 0,
  })

  InShaderButton = self:AddInput("Shader", "Shader", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "MultiButtonControl",
      MBTNC_ForceButtons = true,
      MBTNC_ShowName     = false,
      { MBTNC_AddButton  = " Woven1", },  { MBTNC_AddButton  = "  Woven2", },  { MBTNC_AddButton  = " Woven3", },  { MBTNC_AddButton  = " SeaHairs", },  { MBTNC_AddButton  = " None", }, 
      MBTNC_StretchToFit = true,
      IC_NoLabel         = true,
	    INP_Default        = 0,
      IC_Visible         = true,
  })

  InBlend1Slider = self:AddInput("Blend1", "Blend1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = 0.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.0,
      })

  InBlend1OffSlider = self:AddInput("Blend1Off", "Blend1Off", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 0.0,
      })

  InBlend1MulSlider = self:AddInput("Blend1Mul", "Blend1Mul", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 1.0,
      })

  InModusButton = self:AddInput("Modus", "Modus", {
      LINKID_DataType    = "Number",
      INPID_InputControl = "MultiButtonControl",
      MBTNC_ForceButtons = true,
      MBTNC_Type         = "Toggle", 
      MBTNC_ShowName     = false,
      { MBTNC_AddButton  = " Start", },  { MBTNC_AddButton  = "  Velo", },  { MBTNC_AddButton  = " Mass", },  { MBTNC_AddButton  = " InvMass", },  { MBTNC_AddButton  = " Special", }, 
		  MBTNC_StretchToFit = true,
      IC_NoLabel         = true,
		  INP_Default        = 0,
      IC_Visible         = true,
  })

  InPar1Point = self:AddInput("Par1", "Par1", {
      LINKID_DataType    = "Point",
      INPID_InputControl = "OffsetControl",
      INPID_PreviewControl  = "CrosshairControl",
      INP_DefaultX          = 0.0,
      INP_DefaultY          = 0.0,
  })

  InMouseSizeSlider = self:AddInput("MouseSize", "MouseSize", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -10.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 4.0,
      })


  self:BeginControlNest("Colors", "Colors", false, {})
  self:BeginControlNest("Color1", "Color1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor1ColorR = self:AddInput("Red",   "Color1Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColor1ColorG = self:AddInput("Green", "Color1Green", { INP_Default  = 2.0, IC_ControlID = 1, attrs})
    InColor1ColorB = self:AddInput("Blue",  "Color1Blue",  { INP_Default  = 3.0, IC_ControlID = 2, attrs})
    InColor1ColorA = self:AddInput("Alpha", "Color1Alpha", { INP_Default  = 4.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("Color2", "Color2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "Color2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColor2ColorR = self:AddInput("Red",   "Color2Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColor2ColorG = self:AddInput("Green", "Color2Green", { INP_Default  = 1.0, IC_ControlID = 1, attrs})
    InColor2ColorB = self:AddInput("Blue",  "Color2Blue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InColor2ColorA = self:AddInput("Alpha", "Color2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColorOut", "ColorOut", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColorOut",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColorOutColorR = self:AddInput("Red",   "ColorOutRed",   { INP_Default  = 0.5, IC_ControlID = 0, attrs})
    InColorOutColorG = self:AddInput("Green", "ColorOutGreen", { INP_Default  = 0.5, IC_ControlID = 1, attrs})
    InColorOutColorB = self:AddInput("Blue",  "ColorOutBlue",  { INP_Default  = 0.5, IC_ControlID = 2, attrs})
    InColorOutColorA = self:AddInput("Alpha", "ColorOutAlpha", { INP_Default  = 0.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColSeaHair1", "ColSeaHair1", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColSeaHair1",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColSeaHair1ColorR = self:AddInput("Red",   "ColSeaHair1Red",   { INP_Default  = 1.0, IC_ControlID = 0, attrs})
    InColSeaHair1ColorG = self:AddInput("Green", "ColSeaHair1Green", { INP_Default  = 2.0, IC_ControlID = 1, attrs})
    InColSeaHair1ColorB = self:AddInput("Blue",  "ColSeaHair1Blue",  { INP_Default  = 3.0, IC_ControlID = 2, attrs})
    InColSeaHair1ColorA = self:AddInput("Alpha", "ColSeaHair1Alpha", { INP_Default  = 4.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:BeginControlNest("ColSeaHair2", "ColSeaHair2", true, {})

    ctrl_grp_cnt = (ctrl_grp_cnt==nil) and 1 or (ctrl_grp_cnt+1)

    attrs = {
      ICS_Name = "ColSeaHair2",
      LINKID_DataType = "Number",
      INPID_InputControl = "ColorControl",
      INP_MinScale = 0.0,
      INP_MaxScale = 1.0,
      IC_ControlGroup = ctrl_grp_cnt,
    }

    InColSeaHair2ColorR = self:AddInput("Red",   "ColSeaHair2Red",   { INP_Default  = 2.0, IC_ControlID = 0, attrs})
    InColSeaHair2ColorG = self:AddInput("Green", "ColSeaHair2Green", { INP_Default  = 3.0, IC_ControlID = 1, attrs})
    InColSeaHair2ColorB = self:AddInput("Blue",  "ColSeaHair2Blue",  { INP_Default  = 1.0, IC_ControlID = 2, attrs})
    InColSeaHair2ColorA = self:AddInput("Alpha", "ColSeaHair2Alpha", { INP_Default  = 1.0, IC_ControlID = 3, attrs})

  self:EndControlNest()

  self:EndControlNest()

  InLevel0Slider = self:AddInput("Level0", "Level0", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.9,
      })

  InLevel1Slider = self:AddInput("Level1", "Level1", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.1,
      })

  InLevel2Slider = self:AddInput("Level2", "Level2", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 1.0,
          INP_Default        = 0.1,
      })

  InLevel3Slider = self:AddInput("Level3", "Level3", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 2.0,
          INP_Default        = 0.5,
      })




  InBrightnessSlider = self:AddInput("Brightness", "Brightness", {
          LINKID_DataType    = "Number",
          INPID_InputControl = "SliderControl",
          INP_MinScale       = -1.0,
          INP_MaxScale       = 10.0,
          INP_Default        = 3.0,
      })

  Sep3 = self:AddInput(string.rep("_", 152), "Separator3", {
    LINKID_DataType     = "Text",
    INPID_InputControl  = "LabelControl",
    INP_External        = false,
    INP_Passive         = true,
    IC_Visible          = true,
    INP_DoNotifyChanged = true,
    IC_NoLabel          = true,
  })
  
  
  InEdges = self:AddInput("Edges", "Edges", {
    LINKID_DataType = "Number",
    INPID_InputControl  = "MultiButtonControl",
    INP_Default         = 3.0,
    INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_External        = false,
    MBTNC_ForceButtons  = true,
    INP_MinScale        = 0,
    INP_MaxScale        = 3,
    INP_MinAllowed      = 0,
    INP_MaxAllowed      = 3,
    MBTNC_ShowBasicButton = true,
    MBTNC_StretchToFit  = false, --true,
    MBTNC_ShowToolTip   = true,
    { MBTNC_AddButton = "Canvas", MBTNCD_ButtonWidth = 4/16, },
    { MBTNC_AddButton = "Wrap",MBTNCD_ButtonWidth = 3/16, },
    { MBTNC_AddButton = "Duplicate", MBTNCD_ButtonWidth = 5/16, },
    { MBTNC_AddButton = "Mirror", MBTNCD_ButtonWidth = 4/16, }, 
   }) 

  InDebugImage = self:AddInput("DebugImage", "DebugImage", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ComboControl",
    INP_Default = 0.0,
    INP_Integer = true,
    ICD_Width = 1,
    { CCS_AddString = "Final", },
    { CCS_AddString = "BufferA", },
    { CCS_AddString = "BufferB", },
    { CCS_AddString = "BufferC", },
    { CCS_AddString = "BufferD", },
    CC_LabelPosition = "Horizontal",
  })

  ----- Size & Depth
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default        = 0,
    INP_Integer        = true,
    ICD_Width          = 1,
	  { CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	  { CCS_AddString  = "Image0", },
    { CCS_AddString  = "1920x1080", },
	  { CCS_AddString  = "1200x675", },
	  { CCS_AddString  = "800x450", },
	  { CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer     = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
  
  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	  INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "Default", },
	  { CCS_AddString  = "int8", },
	  { CCS_AddString  = "int16", },
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	  ICS_ControlPage  = "Image",
  })
  
  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false }) 

  ----- In/Out

  InChannel0 = self:AddInput( "iChannel0",  "iChannel0",  { LINKID_DataType = "Image", LINK_Main = 1, INP_Required = false  })
  InChannel1 = self:AddInput( "iChannel1",  "iChannel1",  { LINKID_DataType = "Image", LINK_Visible = false, LINK_Main = 2, INP_Required = false  })
  InChannel2 = self:AddInput( "iChannel2",  "iChannel2",  { LINKID_DataType = "Image", LINK_Visible = false, LINK_Main = 3, INP_Required = false  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main       = 1,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------
function DefineEdges(edges, nodeX)

    --This gets the value of our input image for us to modify inside the kernel
    if edges == 0 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 1 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_WRAP, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 2 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_DUPLICATE, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 3 then
      nodeX:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    elseif edges == 4 then
      --print("Sampler 4")
    end
end



MULTIBUFFER = true
if MULTIBUFFER then   -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  ImgAttrs_Global = {
          { IMG_Channel = "Red", },
          { IMG_Channel = "Green", },
          { IMG_Channel = "Blue", },
          { IMG_Channel = "Alpha", },
          IMG_Width = Width,
          IMG_Height = Height,
          IMG_DeferAlloc = false,
          }

  Image_Buff_GlobalA = Image(ImgAttrs_Global)
  Image_Buff_GlobalB = Image(ImgAttrs_Global)
  Image_Buff_GlobalC = Image(ImgAttrs_Global)
  Image_Buff_GlobalD = Image(ImgAttrs_Global)
end


function Process(req)

	-- Imagesize and Depth
  if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InChannel0:GetValue(req) ~= nil) then
			   Width = InChannel0:GetValue(req).Width
			   Height = InChannel0:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value 
		end
	end	
  
  -- Alle ( int und float )
  if (InDepth:GetValue(req).Value > 0) then
	  if InDepth:GetValue(req).Value == 1 then 
	    SourceDepth = 5 
    else 
	    if InDepth:GetValue(req).Value == 2 then 
	        SourceDepth = 6 
	    else 
	        if InDepth:GetValue(req).Value == 3 then 
 		        SourceDepth = 7 
		    	else
			      SourceDepth = 8
	        end
		  end
	  end
	end

  local imgattrs = {
    IMG_Document = self.Comp,
    { IMG_Channel = "Red", },
    { IMG_Channel = "Green", },
    { IMG_Channel = "Blue", },
    { IMG_Channel = "Alpha", },
    IMG_Width  = Width,
    IMG_Height = Height,
    IMG_XScale = XAspect,
    IMG_YScale = YAspect,
    IMAT_OriginalWidth  = realwidth, -- nil !?!
    IMAT_OriginalHeight = realheight, -- nil !?!
    IMG_Quality = not req:IsQuick(),
    IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    IMG_DeferAlloc = true,
    IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  }

  local dst   = Image(imgattrs)
  local black = Pixel({R=0,G=0,B=0,A=0})
  dst:Fill(black)

if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  dstA = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstB = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstC = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstD = Image {IMG_Like = dst, IMG_DeferAlloc = true}
	dstI = Image {IMG_Like = dst, IMG_DeferAlloc = true}
end

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end


if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA = DVIPComputeNode(req,
    "WovenElasticSimulationFuse__Buffer_A", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
else
    node = DVIPComputeNode(req,
    "WovenElasticSimulationFuse", ShaderCompatibilityCode..ShaderKernelCode,
    "Params", ShaderParameters
  )
end
  -- Extern texture or create a new one

  iChannel0 = InChannel0:GetValue(req)

  if iChannel0==nil then
    iChannel0 = Image(imgattrs)
    iChannel0:Fill(black)
  end

  iChannel1 = InChannel1:GetValue(req)

  if iChannel1==nil then
    iChannel1 = Image(imgattrs)
    iChannel1:Fill(black)
  end

  iChannel2 = InChannel2:GetValue(req)

  if iChannel2==nil then
    iChannel2 = Image(imgattrs)
    iChannel2:Fill(black)
  end

  -- DCTL parameters

  local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate")

  local params = {}

  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    params = nodeA:GetParamBlock(ShaderParameters)
  else  
    params = node:GetParamBlock(ShaderParameters)
  end  

  params.iResolution[0] = dst.Width
  params.iResolution[1] = dst.Height
  params.iTime = (req.Time / framerate) * InFrequency:GetValue(req).Value
  
  -- iMouse
  
  local mouse_xy  = InMouseXY:GetValue(req)
  local mouse_zw  = InMouseZW:GetValue(req)
  
  params.iMouse[0] = mouse_xy.X
  params.iMouse[1] = mouse_xy.Y
  params.iMouse[2] = mouse_zw.X
  params.iMouse[3] = mouse_zw.Y
  
  if InMouseDrag:GetValue(req).Value ~= 0 then
    if params.iMouse[2]==-1 and params.iMouse[3]==-1 then
      params.iMouse[2]=params.iMouse[0]
      params.iMouse[3]=params.iMouse[1]
    end
  else
    params.iMouse[2] = -1
    params.iMouse[3] = -1
  end
  
  if mouse_zw.X ~= params.iMouse[2] or mouse_zw.Y ~= params.iMouse[3] then
    InMouseZW:SetAttrs({INP_Disabled=false})
    InMouseZW:SetSource(Point(params.iMouse[2],params.iMouse[3]),0,0)
    InMouseZW:SetAttrs({INP_Disabled=true})
  end
  
  params.iMouse[0] = params.iMouse[0] * Width
  params.iMouse[1] = params.iMouse[1] * Height
  if params.iMouse[2] == -1 and params.iMouse[3] == -1 then
    params.iMouse[2] = 0
    params.iMouse[3] = 0
  else
    params.iMouse[2] = params.iMouse[2] * Width
    params.iMouse[3] = params.iMouse[3] * Height
  end
  params.iFrame = req.Time

  params.Reset = InResetCheckbox:GetValue(req).Value
  params.StartTex = InStartTexCheckbox:GetValue(req).Value
  params.Shader = InShaderButton:GetValue(req).Value
  params.Blend1 = InBlend1Slider:GetValue(req).Value
  params.Blend1Off = InBlend1OffSlider:GetValue(req).Value
  params.Blend1Mul = InBlend1MulSlider:GetValue(req).Value
  params.Modus = InModusButton:GetValue(req).Value
  params.Par1 = {InPar1Point:GetValue(req).X,InPar1Point:GetValue(req).Y}
  params.MouseSize = InMouseSizeSlider:GetValue(req).Value

  params.Color1 = {
    InColor1ColorR:GetValue(req).Value,
    InColor1ColorG:GetValue(req).Value,
    InColor1ColorB:GetValue(req).Value,InColor1ColorA:GetValue(req).Value
  }
  params.Color2 = {
    InColor2ColorR:GetValue(req).Value,
    InColor2ColorG:GetValue(req).Value,
    InColor2ColorB:GetValue(req).Value,InColor2ColorA:GetValue(req).Value
  }
  params.Level0 = InLevel0Slider:GetValue(req).Value
  params.Level1 = InLevel1Slider:GetValue(req).Value
  params.Level2 = InLevel2Slider:GetValue(req).Value
  params.Level3 = InLevel3Slider:GetValue(req).Value
  params.ColorOut = {
    InColorOutColorR:GetValue(req).Value,
    InColorOutColorG:GetValue(req).Value,
    InColorOutColorB:GetValue(req).Value,InColorOutColorA:GetValue(req).Value
  }
  params.ColSeaHair1 = {
    InColSeaHair1ColorR:GetValue(req).Value,
    InColSeaHair1ColorG:GetValue(req).Value,
    InColSeaHair1ColorB:GetValue(req).Value,InColSeaHair1ColorA:GetValue(req).Value
  }
  params.ColSeaHair2 = {
    InColSeaHair2ColorR:GetValue(req).Value,
    InColSeaHair2ColorG:GetValue(req).Value,
    InColSeaHair2ColorB:GetValue(req).Value,InColSeaHair2ColorA:GetValue(req).Value
  }

  params.Brightness = InBrightnessSlider:GetValue(req).Value
  -- Resolution

  params.width  = dst.Width
  params.height = dst.Height

  -- Per channel time and resolution


    local edges = InEdges:GetValue(req).Value

  -- Set parameters and add I/O
  if MULTIBUFFER then -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:SetParamBlock(params)
    --nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeA)
    
  else   
    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)
    
      node:AddInput("iChannel0",iChannel0) -- TODO: add a better channel name
      node:AddInput("iChannel1",iChannel1) -- TODO: add a better channel name
      node:AddInput("iChannel2",iChannel2) -- TODO: add a better channel name
      node:AddInput("iChannel3",iChannel2) -- TODO: add a better channel name
      node:AddOutput("dst", dst)
  end
  
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
    nodeA:AddInput("iChannel0",Image_Buff_GlobalA)  -- Anpassen !!
    nodeA:AddInput("iChannel1",iChannel0)  -- Anpassen !!
    nodeA:AddInput("iChannel2",iChannel0)  -- Anpassen !!
    nodeA:AddInput("iChannel3",Image_Buff_GlobalD)  -- Anpassen !!
    nodeA:AddOutput("dst", dstA)

    local ok = nodeA:RunSession(req)

    if (not ok) then
      dstA = nil
      dump(nodeA:GetErrorLog())
    end
    
    Image_Buff_GlobalA = dstA

  -------------------------- BufferB-Kernel----------------------------------------
    local nodeB = DVIPComputeNode(req,
      "WovenElasticSimulationFuse__Buffer_B", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )
    
    nodeB:SetParamBlock(params)

    --nodeB:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeB)
    
    nodeB:AddInput("iChannel0", Image_Buff_GlobalA)  -- Anpassen !!
    nodeB:AddInput("iChannel1", Image_Buff_GlobalB)  -- Anpassen !!
    nodeB:AddInput("iChannel2", iChannel0)  -- Anpassen !!
    nodeB:AddOutput("dst", dstB)

    local success = nodeB:RunSession(req)
    if not success then
      dstB = nil
      dump(nodeB:GetErrorLog())
    end
    
    Image_Buff_GlobalB = dstB --Recursiv Image	
    

    -------------------------- BufferC-Kernel----------------------------------------
    local nodeC = DVIPComputeNode(req,
      "WovenElasticSimulationFuse__Buffer_C", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )
    
    nodeC:SetParamBlock(params)

    --nodeC:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeC)

    nodeC:AddInput("iChannel0", Image_Buff_GlobalB)  -- Anpassen !!
    nodeC:AddInput("iChannel1", Image_Buff_GlobalC)  -- Anpassen !!
    nodeC:AddInput("iChannel2", iChannel0)  -- Anpassen !!
    nodeC:AddOutput("dst", dstC)

    local success = nodeC:RunSession(req)
    if not success then
      dstC = nil
      dump(nodeC:GetErrorLog())
    end
    
    Image_Buff_GlobalC = dstC --Recursiv Image	


    -------------------------- BufferD-Kernel----------------------------------------
    local nodeD = DVIPComputeNode(req,
      "WovenElasticSimulationFuse__Buffer_D", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )
    
    nodeD:SetParamBlock(params)

    --nodeD:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, nodeD)

    nodeD:AddInput("iChannel0", Image_Buff_GlobalB)  -- Anpassen !!
    nodeD:AddInput("iChannel1", Image_Buff_GlobalC)  -- Anpassen !!
    nodeD:AddInput("iChannel2", Image_Buff_GlobalD)  -- Anpassen !!
    nodeD:AddInput("iChannel3", Image_Buff_GlobalA)  -- Anpassen !!
    nodeD:AddInput("iChannel4", iChannel0)  -- Anpassen !!
    nodeD:AddOutput("dst", dstD)

    local success = nodeD:RunSession(req)
    if not success then
      dstD = nil
      dump(nodeD:GetErrorLog())
    end
    
    Image_Buff_GlobalD = dstD --Recursiv Image	


    -------------------------- ImageKernel----------------------------------------
    node = DVIPComputeNode(req,
      "WovenElasticSimulationFuse", ShaderCompatibilityCode..ShaderKernelCode,
      "Params", ShaderParameters
    )

    node:SetParamBlock(params)
    --node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)
    DefineEdges(edges, node)

    node:AddInput("iChannel0", Image_Buff_GlobalB)  -- Anpassen !!
    node:AddInput("iChannel1", Image_Buff_GlobalC)  -- Anpassen !!
    node:AddInput("iChannel2", Image_Buff_GlobalD)  -- Anpassen !!
    node:AddInput("iChannel3", iChannel0)           -- Anpassen !!
    node:AddOutput("dst", dst)
 
  end -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER 
  

  local ok = node:RunSession(req)

	if (not ok) then
		dst = nil
    dump(node:GetErrorLog())
	end

  OutImage:Set(req,dst)
  
  
    --Debugging
  if MULTIBUFFER then  -- MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER MULTIBUFFER
    InDebugImage:SetAttrs({ IC_Visible = true })
    
    if (InDebugImage:GetValue(req).Value == 1) then OutImage:Set(req, Image_Buff_GlobalA) end
    if (InDebugImage:GetValue(req).Value == 2) then OutImage:Set(req, Image_Buff_GlobalB) end
    if (InDebugImage:GetValue(req).Value == 3) then OutImage:Set(req, Image_Buff_GlobalC) end
    if (InDebugImage:GetValue(req).Value == 4) then OutImage:Set(req, Image_Buff_GlobalD) end
  else
    InDebugImage:SetAttrs({ IC_Visible = false })
  end
    
  
  collectgarbage();
end



-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

function NotifyChanged(inp, param, time)
 	if (param ~= nil) then

		if inp == InSize then
		  if param.Value == 1 then
			  InWidth:SetAttrs({ IC_Visible = true })
			  InHeight:SetAttrs({ IC_Visible = true })
		  else
			  InWidth:SetAttrs({ IC_Visible = false })
			  InHeight:SetAttrs({ IC_Visible = false })
		  end
		  
		  if param.Value == 3 then --1920x1080
			  InWidth:SetSource(Number(1920),0,0)
			  InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			  InWidth:SetSource(Number(1200),0,0)
			  InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			  InWidth:SetSource(Number(800),0,0)
			  InHeight:SetSource(Number(450),0,0)
		  end
 	    if param.Value == 6 then --640x360
		    InWidth:SetSource(Number(640),0,0)
		    InHeight:SetSource(Number(360),0,0)
		  end
		end 

 	end
end


-- */
