--[[--/*

    HappyBouncing.fuse ... and Variations


    Based on https://www.shadertoy.com/view/flyXRh Erstellt von leon am 2021-12-21
    Based on https://www.shadertoy.com/view/ftGXR1 Erstellt von leon am 2021-12-22
    Based on https://www.shadertoy.com/view/NlGXR1 Erstellt von leon am 2021-12-22

    V1 JiPi Shadertoy


*/--]]--

-- "LUA CODE..." /**


local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()





-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-----------------------------------

-- **/ "End of LUA CODE"
-- // ------------------------------------------------------------------------
-- // DCTL kernel
-- // ------------------------------------------------------------------------

GlobalParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  int width;
  int height;
  float itime;
  int iframe;
  bool startpicture;
  bool noise;
  bool reset;
  bool bump;
  int modus;
  bool stereographic;

  bool autolook;
  float look[2];

	bool  defaultparameter;
	float desaturation;
	float contrast;
	float vignette;
	float fog;
	float trees;

	bool tex;

  float slayers;
	float sdepth;
	float swidth;
	float sspeed;

	float brightness;

	bool Alpha_Apply;
	float alpha;
	float color[3];
	float color2[3];
  float col1;
	float col2;

]]


----------------Image---------------
-- source of kernel
ImageKernel =
    [[
// ----------------------------------------------------------------------------------
// - Common                                                                         -
// ----------------------------------------------------------------------------------

#define in

// ---------------------------------------------------------------------------
// 2x2 matrix
// ---------------------------------------------------------------------------
#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

  __DEVICE__ inline mat2 make_mat2( float  a, float  b, float c, float d) { return mat2(a,b,c,d);}
  __DEVICE__ inline float2  f2_multi_mat2( float2 v, mat2   m )  { return v*m; }
  __DEVICE__ inline float2  mat2_multi_f2(  mat2  m, float2 v )  { return m*v; }

#else
typedef struct
  {
    float2 r0, r1;
  } mat2;

__DEVICE__ inline mat2 make_mat2( float A, float B, float C, float D)
  {
    mat2 E;
    E.r0 = to_float2(A,B);
    E.r1 = to_float2(C,D);
    return E;
  }

__DEVICE__ inline float2 f2_multi_mat2( float2 A, mat2 B )
  {
	float2 C;
	C.x = A.x * B.r0.x + A.y * B.r0.y;
	C.y = A.x * B.r1.x + A.y * B.r1.y;
	return C;
  }

#endif

__DEVICE__ float fract_f(float A){return A - _floor(A);}
__DEVICE__ float3 fract_f3(float3 A){return make_float3(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.z));}
__DEVICE__ float3 cos_f3(float3 i) {float3 r; r.x = _cosf(i.x); r.y = _cosf(i.y); r.z = _cosf(i.z); return r;}

#define swiyzx(V) to_float3((V).y,(V).z,(V).x)

#define swixyz(V) to_float3((V).x,(V).y,(V).z)
#define swiyzz(V) to_float3((V).y,(V).z,(V).z)
#define swizyx(V) to_float3((V).z,(V).y,(V).x)
#define swixxy(V) to_float3((V).x,(V).x,(V).y)


// Inigo Quilez
// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
__DEVICE__ float sdArc( in float2 p, in float ta, in float tb, in float ra, float rb )
{
    float2 sca = to_float2(_sinf(ta),_cosf(ta));
    float2 scb = to_float2(_sinf(tb),_cosf(tb));
    p = f2_multi_mat2(p,make_mat2(sca.x,sca.y,-sca.y,sca.x));
    p.x = _fabs(p.x);
    float k = (scb.y*p.x>scb.x*p.y) ? dot(p,scb) : length(p);
    return _sqrtf( dot(p,p) + ra*ra - 2.0f*ra*k ) - rb;
}

// snippets
#define fill(sdf) (smoothstep(0.001f, 0.0f, sdf))
#define repeat(p,r) (mod_f(p,r)-r/2.0f)

__DEVICE__ mat2 rot(float a) { float c=_cosf(a),s=_sinf(a); return make_mat2(c,-s,s,c); }
__DEVICE__ float circle (float2 p, float size)
{
    return length(p)-size;
}

// Dave Hoskins
// https://www.shadertoy.com/view/4djSRW
__DEVICE__ float hash11(float p)
{
    p = fract_f(p * 0.1031f);
    p *= p + 33.33f;
    p *= p + p;
    return fract_f(p);
}
__DEVICE__ float3 hash31(float p)
{
   float3 p3 = fract_f3(to_float3_s(p) * to_float3(0.1031f, 0.1030f, 0.0973f));
   p3 += dot(p3, swiyzx(p3)+33.33f);
   return fract_f3((swixxy(p3)+swiyzz(p3))*swizyx(p3));
}


// ----------------------------------------------------------------------------------
// - Image                                                                          -
// ----------------------------------------------------------------------------------

// Fork of "happy bouncing variation 1" by leon. https://shadertoy.com/view/ftGXR1
// 2021-12-22 00:28:04

// Fork of "happy bouncing" by leon. https://shadertoy.com/view/flyXRh
// 2021-12-22 00:11:16

// "happy bouncing"
// shader about boucing animation, space transformation, easing functions,
// funny shape and colorful vibes.
// by leon denise (2021-12-21)
// licensed under hippie love conspiracy

// using Inigo Quilez works:
// arc sdf from https://www.shadertoy.com/view/wl23RK
// color palette https://iquilezles.org/www/articles/palettes/palettes.htm



// easing curves (not easy to tweak)
// affect timing of transformations;

__DEVICE__ float jump (float t, int modus)
{
    t = _fminf(1.0f, t*4.0f);
    t = _fabs(_sinf(t*3.1415f));
    return _powf(_sinf(t*3.14/2.), (modus==2?0.5f:1.9f));
}

__DEVICE__ float walk (float t)
{
    t = _mix(_powf(t,0.5f), _powf(t, 2.0f), t);
    return (_cosf(t*3.1415f*2.0f));
}

__DEVICE__ float swing (float t, int modus)
{
    if((!modus)==2)
    {
      if (modus==0) t = t*2.0f;
      t = _powf(t, 0.5f);
    }
    t = _sinf(t*3.14f*2.0f);
    return t;
}

__DEVICE__ float stretch (float t, int modus)
{
    float tt;
    if (modus==2)
      tt = _sinf(_powf(t, 2.0f)*10.0f);
    else
      tt = _cosf(_powf(t, 0.2f)*30.0f);
    if (modus==1)  tt = _sinf(_powf(t, 0.2f)*10.0f);

    return tt;
}

__DEVICE__ float bounce (float t, int modus)
{
  float tt;
  if (modus==2)
    tt = _cosf(_powf(t, 0.5f)*3.14f);
  else
    tt = _cosf(_powf(t, 0.2f)*(modus==1?6.38f:10.0f));
  return tt;
}

// list of transformation (fun to tweak)
__DEVICE__ float2 animation(float2 p, float t, float bodySize, int modus)
{
    t = fract_f(t);

    p.y -= bodySize-(modus==2?0.0f:0.5f);
    //sidebar
    if(modus==2)     p.y -= 0.1f;

    p.y -= jump(t,modus)*0.5f;

    if(modus==2) return p;

    if (modus==0) p.x += walk(t)*0.1f;
    p.x *= stretch(t, modus)*-0.2f+1.0f;

    // bounce stretch with collision
    float b = bounce(t,modus)*-0.2f;
    p.y *= b+1.0f;
    p.y += _fabs(b)*bodySize;

    return p;
}

__DEVICE__ float4 sdEyes (float2 p, float t, float3 tint, float sens, float bodySize, int modus, float2 size, float divergence)
{
    float3 col = to_float3_s(0);
    float shape = 100.0f;

    // eyes positions
    p = animation(p, t,bodySize, modus);
    p = f2_multi_mat2(p,rot(swing(t,modus)*-0.5f));
    p -= to_float2(0.03f, bodySize+size.x*0.2f);
    p.x -= divergence*sens;

    // globe shape
    float eyes = circle(p, size.x);
    col = _mix(col, tint, fill(eyes));
    shape = _fminf(shape, eyes);

    // white eye shape
    eyes = circle(p, size.y);
    col = _mix(col, to_float3_s(1), fill(eyes));

    // black dot shape
    eyes = circle(p, 0.02f);
    col = _mix(col, to_float3_s(0), fill(eyes));

    return to_float4_aw(col, shape);
}


//************************************************************************
__KERNEL__ void ImageKernel(__CONSTANTREF__ GlobalParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  if (x < params->width && y < params->height)
  {
    //-----------------------
     float2 pixel = to_float2(x+0.5f, y+0.5f);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float iTime = params->itime * params->freq;
     float4 color = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......

    int modus = 0;    // Varianten 0:Original
    if (params->modus == 1) modus = 1;
    if (params->modus == 2) modus = 2;

    // global variable
    float bodySize = 0.2f;

    // shape eyes
    float2 size = to_float2(0.07f, 0.05f);
    float divergence = 0.06f;


    float2 uv = pixel/iResolution;

    color = to_float4(0,0,0,1);

    // ground
    //color.rgb += _mix(to_float3(0.945f,0.945f,0.792f), to_float3(0.820f,0.482f,0.694f), smoothstep(0.0f,0.2f,uv.y-0.2f));
    if(modus==2) color = to_float4_aw(swixyz(color) + to_float3_s(0.25f)*step(uv.y,0.1f), color.w);

    // number of friends
    float buddies = 5.0f;

    if (modus == 1) buddies = 3.0f;
    if (modus == 2) buddies = 6.0f;

    for (float i = 0.0f; i < buddies; i+=1.0f)
    {
        // usefull to dissociate instances
        float ii = i/(buddies-(modus==2?0.0f:1.0f));
        float iii = 1.0f-ii;

        float iy = i/(buddies-1.0f); //Modus2


        // translate instances
        float2 pp;
        if (modus == 2)
        {
          pp = (pixel-to_float2(0.5f,0)*iResolution)/iResolution.y;
          pp.x += (iy*2.0f-1.0f)*0.5f;
          pp *= 2.0f;
        }
        else
        {
          pp = (pixel-0.5f*iResolution)/iResolution.y;
          pp.x += (ii*2.0f-1.0f)*0.4f;
        }

        if (modus == 1) pp.y -= 0.1f;

        // time
        float t = fract_f(iTime*0.5f + ii * 0.5f);

        // there will be sdf shapes
        float shape = 1000.0f;
        float2 p;

        // there will be layers
        float3 col = to_float3_s(0);


        if (modus == 2)
        {
          // color palette
          // Inigo Quilez (https://iquilezles.org/www/articles/palettes/palettes.htm)
          float3 tint = 0.5f+0.5f*cos_f3(to_float3(0.0f,0.3f,0.6f)*6.28f+i-length(animation(pp-to_float2(0,0.1f),t,bodySize,modus))*3.0f);

          // body shape
          p = animation(pp, t,bodySize,modus);
          p.x *= stretch(t,modus)*-0.2f+1.0f;
          float body = circle(p, bodySize);
          col += tint*fill(body);
          shape = _fminf(shape, body);

          float4 eyes = sdEyes(pp, t-0.03f, tint, -1.0f,bodySize,modus,size,divergence);
          col = _mix(col, swixyz(eyes), step(eyes.w,0.0f));
          shape = _fminf(shape, eyes.w);
          eyes = sdEyes(pp, t-0.01f, tint, 1.0f,bodySize,modus,size,divergence);
          col = _mix(col, swixyz(eyes), step(eyes.w,0.0f));
          shape = _fminf(shape, eyes.w);

          // smile animation
          float anim = _cosf(_powf(t, 2.0f)*6.28f)*0.5f+0.5f;

          // smile position
          p = animation(pp, t-0.01f,bodySize,modus);
          p -= bodySize*to_float2(0.1f, 0.6f-1.0f*anim);
          float2 q = p;

          // arc (fun to tweak)
          float smile = _mix(0.0f, 1.0f, anim);//+(0.5f+0.5f*_sinf(ii*12.0f+iTime*12.0f*ii));
          float thin = _mix(0.05f, 0.01f, anim);//+0.04f*(0.5f+0.5f*_sinf(ii*12.0f+iTime*22.0f*ii));
          float d = sdArc(p,-3.14/2.0f, smile, 0.1f, thin);

          // black line
          col = _mix(col, tint*(fract_f(q.y*5.0f)*0.7f+0.3f), fill(d));

          // add buddy to frame
          float ao = clamp(shape+0.9f,0.0f,1.0f);

          color = to_float4_aw(_mix(swixyz(color) * ao, col, step(shape, 0.0f)),color.w);
        }
        else
        {
          // color palette
          // Inigo Quilez (https://iquilezles.org/www/articles/palettes/palettes.htm)
          float3 tint = 0.5f+0.5f*cos_f3(to_float3(0.0f,0.3f,0.6f)*6.28f+i-length(animation(pp,t,bodySize,modus))*3.0f);

          if (modus == 1) tint = 0.5f+0.5f*cos_f3(to_float3(0.0f,0.3f,0.6f)*6.28f+i-length(animation(pp-to_float2(0,0.1f),t,bodySize,modus))*3.0f);


          // body shape
          float body = circle(animation(pp, t, bodySize, modus), bodySize);
          col += tint*fill(body);
          shape = _fminf(shape, body);

          // eyes positions
          p = animation(pp, t+0.02f,bodySize, modus);
          p = f2_multi_mat2(p,rot(swing(t, modus)*-0.5f));
          p -= to_float2(0.03f, bodySize+size.x*0.2f);
          p.x = _fabs(p.x)-divergence;

          // globe shape
          float eyes = circle(p, size.x);
          shape = _fminf(shape, eyes);
          col = _mix(col, tint, fill(eyes));

          // white eye shape
          eyes = circle(p, size.y);
          col = _mix(col, to_float3_s(1), fill(eyes));
          shape = _fminf(shape, eyes);

          // black dot shape
          eyes = circle(p, 0.02f);
          col = _mix(col, to_float3_s(0), fill(eyes));

          // smile animation
          float anim = _cosf(_powf(t, 0.5f)*6.28f)*0.5f+0.5f;

          // smile position
          p = animation(pp, t-0.02f, bodySize, modus);
          p = f2_multi_mat2(p,rot(swing(t, modus)*- (modus==1?0.5f:0.9f)));
          p -= bodySize*to_float2(0.5f, 0.5f+anim*0.5f);
          if (modus==1)   p -= bodySize*to_float2(0.4f, 1.0f-1.5f*anim);



          // arc (fun to tweak)
          float smile = _mix(0.0f, 1.0f, anim);//+(0.5f+0.5f*_sinf(ii*12.0f+iTime*12.0f*ii));
          float thin = _mix(0.1f, 0.02f, anim);//+0.04f*(0.5f+0.5f*_sinf(ii*12.0f+iTime*22.0f*ii));
          float d = sdArc(p,-3.14/2., smile, 0.1f, thin);

          // mouth shape
          d = d-_mix(0.01f, 0.04f, anim);
          shape = _fminf(shape, d);
          col = _mix(col, tint*(modus==1?(1.0f-p.x):1.2f), fill(d));

          // black line
          col = _mix(col, tint*0.5f, fill(d+0.05f));

          // add color to frame
          color = to_float4_aw(_mix(swixyz(color), col, step(shape, 0.0f)),color.w);
        }
    }

  color.w = params->alpha;

  _tex2DVec4Write(dst, x, y, color);
  }
}
]]

-- "LUA CODE..." /**

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- Inspector Panel Controls

--self:BeginControlNest("Standard", "StandardParameter", true, {})

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType    = "Text",
    INPID_InputControl = "LabelControl",
    INP_External       = false,
    INP_Passive        = true,
	IC_Visible         = false,
  })

  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
	IC_Visible         = false,
  })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "true",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
	IC_Visible         = false,
  })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    INP_MinScale = 0.0,
    INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible         = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
	IC_Visible         = false,
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
  })

  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
	IC_Visible         = false,
  })

  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 1,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
	IC_Visible          = false,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
  })

    InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = false,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	IC_Visible       = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default      = 0.0,
	IC_Visible       = false,
    INP_MinScale     = -10.0,
	INP_MaxScale     = 10.0,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

--self:EndControlNest()

  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType    = "Text",
    INPID_InputControl = "LabelControl",
    INP_External       = false,
    INP_Passive        = true,
	IC_Visible         = false,
  })


  Reset = self:AddInput("Reset", "_Reset", {
    INPID_InputControl  = "ButtonControl",
	INP_DoNotifyChanged = true,
    INP_External        = false,
    IC_Visible          = false,
    BTNCS_Execute       = "fusion.CacheManager:Purge()",
  })

  InResetclick = self:AddInput("Resetclick", "Resetclick", {
    LINKID_DataType     = "Number",
	--INPID_InputControl = "SliderControl",
    INPID_InputControl  = "CheckboxControl",
	INP_Integer         = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = false,
    INP_External        = false,
  })





  InModus = self:AddInput("", "Modus", {
    { MBTNC_AddButton    = "Origin", MBTNCID_AddID = "Origin", },
    { MBTNC_AddButton  = "Variation1", MBTNCID_AddID = "Variation1", },
	  { MBTNC_AddButton  = "Variation2", MBTNCID_AddID = "Variation2", },
    INPID_DefaultID      = "Origin",
    LINKID_DataType      = "FuID",
    INPID_InputControl   = "MultiButtonIDControl",
    ICD_Width            = 1.0,
    MBTNC_StretchToFit   = true,
    MBTNC_ForceButtons   = true,
    INP_DoNotifyChanged  = true,
    IC_NoLabel           = true,
    IC_Visible           = true,
    --INP_External         = false,
  })


	InAlpha = self:AddInput("Alpha", "Alpha", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1.0,
		INP_MinScale 		= 0.0,
		INP_MaxScale 		= 1.0,
	})


--self:BeginControlNest("Image "..dctlfuse_name, "ImageNest2", true, {ICS_ControlPage  = "Image",})
  InSize = self:AddInput("Size", "Size_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
	{ CCS_AddString  = "Default", },
    { CCS_AddString  = "Manually", },
	{ CCS_AddString  = "Image1", },
    { CCS_AddString  = "1920x1080", },
	{ CCS_AddString  = "1200x675", },
	{ CCS_AddString  = "800x450", },
	{ CCS_AddString  = "640x360", },
    CC_LabelPosition = "Horizontal",
	ICS_ControlPage  = "Image",
  })

  	InWidth = self:AddInput("Width", "_Width", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1920,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})
	InHeight = self:AddInput("Height", "_Height", {
		LINKID_DataType 	= "Number",
		INPID_InputControl 	= "SliderControl",
		INP_Default 		= 1080,
		INP_Integer         = true,
		INP_MinScale 		= 0,
		INP_MaxScale 		= 4096,
	})



  InDepth = self:AddInput("Depth_Fuse", "Depth_Fuse", {
    LINKID_DataType  = "Number",
    INPID_InputControl = "ComboControl",
	INP_DoNotifyChanged = true,
    INP_Default      = 0,
    INP_Integer      = true,
    ICD_Width        = 1,
    { CCS_AddString  = "float16", },
    { CCS_AddString  = "float32", },
    CC_LabelPosition = "Horizontal",
	ICS_ControlPage  = "Image",
  })

  InMyWidth = self:FindInput("Width")
	InMyWidth:SetAttrs({ IC_Visible = false })
	InMyHeight = self:FindInput("Height")
	InMyHeight:SetAttrs({ IC_Visible = false })
	InMyDepth = self:FindInput("Depth")
	InMyDepth:SetAttrs({ IC_Visible = false })


--self:EndControlNest()


self:AddControlPage("Image")
InGlobalIn = self:AddInput("Global In", "GlobalIn", {
  LINKID_DataType     = "Number",
})
InGlobalOut = self:AddInput("Global Out", "GlobalOut", {
  LINKID_DataType     = "Number",
})

  ShaderFuse.end_create()

------------------- In/Out -----------------

  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
	LINK_Visible = false,
    LINK_Main = 1,
    INP_Required = false
  })


  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end

function NotifyChanged(inp, param, time)
	if inp ~= nil and param ~= nil then

		if inp == InCenter then
			-- the center moved, reposition the axis according to the current offset
			nCenterX = param.X
			nCenterY = param.Y

			InPivot:SetAttrs({
			PCD_OffsetX = nCenterX - 0.5,
			PCD_OffsetY = nCenterY - 0.5,
			})

			InAngle:SetAttrs({
			PCD_OffsetX = (nCenterX - 0.5)/100,
			PCD_OffsetY = (nCenterY - 0.5)/100,
			})


		end
		if inp == InWidgets then
		  if param.Value == 1.0 then
			 InCenter:SetAttrs({ PC_Visible = false })
			 InAngle:SetAttrs({ PC_Visible = false })
			 InPivot:SetAttrs({ PC_Visible = false })
			 InScale:SetAttrs({ PC_Visible = false })
		  else
			 InCenter:SetAttrs({ PC_Visible = true })
			 InAngle:SetAttrs({ PC_Visible = true })
			 InPivot:SetAttrs({ PC_Visible = true })
			 InScale:SetAttrs({ PC_Visible = true })
		  end
		end


		if (inp == InDefaultParameter) then
          if param.Value == 0 then
		  else
		  end
		end


		if inp == InSize then
		  if param.Value == 1 then
			 InWidth:SetAttrs({ IC_Visible = true })
			 InHeight:SetAttrs({ IC_Visible = true })
		  else
			 InWidth:SetAttrs({ IC_Visible = false })
			 InHeight:SetAttrs({ IC_Visible = false })
		  end

		  if param.Value == 3 then --1920x1080
			 InWidth:SetSource(Number(1920),0,0)
			 InHeight:SetSource(Number(1080),0,0)
		  end
		  if param.Value == 4 then --1200x675
			 InWidth:SetSource(Number(1200),0,0)
			 InHeight:SetSource(Number(675),0,0)
		  end
		  if param.Value == 5 then --800x450
			 InWidth:SetSource(Number(800),0,0)
			 InHeight:SetSource(Number(450),0,0)
		  end
 	      if param.Value == 6 then --640x360
		     InWidth:SetSource(Number(640),0,0)
			 InHeight:SetSource(Number(360),0,0)
		  end
		end

		if inp == InStop then
		  if param.Value == 1 then
			 InActtime:SetAttrs({IC_Visible = true})
		  else
			 InActtime:SetAttrs({IC_Visible = false})
		  end
		end


		if inp == Reset then
		  if param.Value == 1 then
			InResetclick:SetSource(Number(1),0,0)
		  end
			end

		if inp == InLogoSw then
		  if param.Value == 1 then
			 --authorlogo:SetAttrs({IC_Visible = true})
		  else
			 --authorlogo:SetAttrs({IC_Visible = false})
		  end
		end

	end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
ImgAttrs_Global = {
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
	    IMG_DeferAlloc = false,
        }


timestamp = 0
--------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle  = -InAngle:GetValue(req).Value/360*3.1415*2
    local scale  = InScale:GetValue(req).Value
    local freq   = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences

	-- Imagesize and Depth
    if (InSize:GetValue(req).Value >= 1) then
		if (InSize:GetValue(req).Value == 2) then
			if (InImage2:GetValue(req) ~= nil) then
			   Width = InImage2:GetValue(req).Width
			   Height = InImage2:GetValue(req).Height
			end
		else
			Width = InWidth:GetValue(req).Value
			Height = InHeight:GetValue(req).Value
		end
	end
	if InDepth:GetValue(req).Value == 0 then
		SourceDepth = 7
	else
	    SourceDepth = 8
	end


  local modus = 0
  if InModus:GetValue(req).Value == "Origin"     then modus = 0 end
	if InModus:GetValue(req).Value == "Variation1" then modus = 1 end
	if InModus:GetValue(req).Value == "Variation2" then modus = 2 end

    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})
    src1 = Image(imgattrs)
    src1:Fill(p)



	local dstI = Image {IMG_Like = src1, IMG_DeferAlloc = true}


	if req:IsPreCalc() then
		 --print("\n######################### Precalc ##############################\n")
		 local out = Image({IMG_Like = dstI, IMG_NoData = true})
		 OutImage:Set(req, out)
		 return
	end

	    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    -------------------------- Image-Kernel----------------------------------------
    local nodeName = self.Name
    ImageKernel = string.gsub(ImageKernel, "ImageKernel", "IK"..nodeName)
    node = DVIPComputeNode(req, "IK"..nodeName, ImageKernel, "GlobalParams", GlobalParams)

	local params = {}
	if not pcall(function ()

		params.center = {center.X,center.Y}
		params.scale  = 1/scale
		params.debug  = InDebug:GetValue(req).Value
		params.angle  = angle
		params.pivot  = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
		params.freq   = freq
		params.width  = src1.DataWindow:Width()
		params.height = src1.DataWindow:Height()
		params.itime         = acttime --req.Time / framerate
		params.iframe        = req.Time
		params.reset         = InResetclick:GetValue(req).Value
		params.modus         = modus
    params.alpha         = InAlpha:GetValue(req).Value

		node:SetParamBlock(params)
    end) then

		params = node:GetParamBlock(GlobalParams)

		params.center = {center.X,center.Y}
		params.scale  = 1/scale
		params.debug  = InDebug:GetValue(req).Value
		params.angle  = angle
		params.pivot  = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
		params.freq   = freq
		params.width  = src1.DataWindow:Width()
		params.height = src1.DataWindow:Height()
		params.itime         = acttime --req.Time / framerate
		params.iframe        = req.Time
		params.reset         = InResetclick:GetValue(req).Value
		params.modus         = modus
    params.alpha         = InAlpha:GetValue(req).Value

		node:SetParamBlock(params)
	end

  node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


  node:AddInput("iChannel0", src1)
  node:AddInput("iChannel1", src1)
  node:AddInput("iChannel2", src1)
  node:AddInput("iChannel3", src1)
  node:AddOutput("dst", dstI)

  local success = node:RunSession(req)
  if not success then
      dstI = nil
      dump(node:GetErrorLog())
  end

  OutImage:Set(req, dstI)
	collectgarbage();
end


-- **/ "End of LUA CODE"

