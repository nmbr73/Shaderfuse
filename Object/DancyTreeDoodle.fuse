--[[--
DancyTreeDoodle

Based on https://www.shadertoy.com/view/wslGz7 Erstellt von wyatt am 2018-12-25


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_Fuse_NoEdit        = false,
  REG_Fuse_NoReload      = false,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess    = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-----------------------------------
-- Description of kernel parameters
----------------DancyTreeDoodle---------------
DancyTreeDoodleParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float details;
  float treeanimation;
  float ramification;
  float treetop;
  float color[4];
  float colorchange;
  float colorfrequency;
  float trunk;
  float trunkint;
  float trunkfrequency;
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
DancyTreeDoodleKernel =
    [[
__DEVICE__ float4 sin4f(float4 i) {float4 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); r.w = _sinf(i.w); return r;}

__DEVICE__ float2 po(float2 v) {
	return to_float2(length(v),_atan2f(v.y,v.x));
}
__DEVICE__ float2 ca(float2 u) {
	return u.x*to_float2(_cosf(u.y),_sinf(u.y));
}
__DEVICE__ float ln(float2 p, float2 a, float2 b, float itime, __CONSTANTREF__ DancyTreeDoodleParams *params) {
    float r = dot(p-a,b-a)/dot(b-a,b-a);
    r = clamp(r,0.0f,1.0f);
    p.x+=(0.7f*params->trunk+0.5f*_sinf(0.1f*itime))*0.2f*params->trunkint*smoothstep(1.0f,0.0f,_fabs(r*2.0f-1.0f))*_sinf(3.14159f*(r-4.0f*itime*params->trunkfrequency));
    return (1.0f+0.5f*r)*length(p-a-(b-a)*r);
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void DancyTreeDoodleKernel(__CONSTANTREF__ DancyTreeDoodleParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {
     //-----------------------
     float2 U = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime*params->freq;
     float4 Q = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......
    float2 R = iResolution;
 	float r = 1e9;
 	U = 4.0f*(U-0.5f*R)/R.y;
 	U.y += 1.5f;

	// Standardparameter
    U -=  to_float2( (params->center[0]-0.5f)*ratio*4.0f, (params->center[1]-0.1f)*4.0f);
    U *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*ratio*4.0f),(params->pivot[1]-0.1f)*4.0*params->debug);
    U = spin(U, pivot, params->angle, 1.0f);

 	Q = to_float4_s(0);
 	for (int i = 1; i < params->details; i+=1) {
        U = ca(po(U)+params->treeanimation*(0.3f*(_sinf(2.0f*itime)+0.5f*_sinf(4.53f*itime)+0.1f*_cosf(12.2f*itime))*to_float2(0,1)));
        r = _fminf(r, ln(U, to_float2_s(0), to_float2(0,1.0f), itime, params) );
        U.y-=1.0f;

        U.x=_fabs(U.x);
        U*=1.4f+params->ramification*(0.1f*_sinf(itime)+0.05f*_sinf(0.2455f*itime)*(float)(i));
        U = po(U);
        U.y += 1.0f+ params->treetop*(0.5f*_sinf(0.553f*itime)*_sinf(_sinf(itime)*(float)(i))+0.1f*_sinf(0.4f*itime)+0.05f*_sinf(0.554f*itime));
        U = ca(U);

        Q+=sin4f(params->colorchange*1.5f*_expf((float)(-1e2*r*r))*1.4f*to_float4(params->color[0],params->color[1],params->color[2],params->color[3])+itime*params->colorfrequency);
 	}
 	Q/=18.0f;

    _tex2DVec4Write(dst, x, y, Q);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  ------------------------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DefaultX = 0.5,
    INP_DefaultY = 0.1,
	  INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
 	  INP_DefaultX = 0.5,
    INP_DefaultY = 0.1,
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible       = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})

  InDetails = self:AddInput("Details", "Details", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 20.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTreeAnimation = self:AddInput("Tree Animation", "TreeAnimation", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InRamification = self:AddInput("Ramifikation", "Ramifikation", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTreetopAnimation = self:AddInput("Treetop Animation", "TreetopAnimation", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InRedA = self:AddInput("Red", "RedA", {
    ICS_Name            = "Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    INP_MaxScale        = 1.0,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenA = self:AddInput("Green", "GreenA", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = -1.8,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueA = self:AddInput("Blue", "BlueA", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.9,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })
  InAlpha = self:AddInput("Alpha", "Alpha", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 4.0,
    IC_ControlGroup     = 1,
    IC_ControlID        = 3,
  })

  InColorchange = self:AddInput("Colorchange", "Colorchange", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InColorchangefreq = self:AddInput("Colorfrequency", "Colorfrequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTrunk = self:AddInput("Trunk", "Trunk", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTrunkInt = self:AddInput("Trunk Intensity", "TrunkInt", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InTrunkFreq = self:AddInput("Trunk Frequency", "TrunkFreq", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:EndControlNest()


-------------------------------------------

--   InLogoSw = self:AddInput("Logo", "LogoSw", {
--    LINKID_DataType = "Number",
--    INPID_InputControl = "CheckboxControl",
--    INP_Integer = true,
--    INP_DoNotifyChanged = true,
--    INP_Default         = 1,
--    IC_Visible          = true,
--    INP_External        = false,
--  INP_Passive         = true,
--  })


--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Ground", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
 	LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.1,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.1)/100,
            })
    end

	if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end


    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    --   if inp == InLogoSw then
    --     if param.Value == 1 then
    --       authorlogo:SetAttrs({IC_Visible = true})
    --     else
	  --       authorlogo:SetAttrs({IC_Visible = false})
	  --   end
	  -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      stoptime = req.Time
	      startstopsema = 0
	   end
	   _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________DancyTreeDoodle______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "DancyTreeDoodleKernel", DancyTreeDoodleKernel, "DancyTreeDoodleParams", DancyTreeDoodleParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
		params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.details         = InDetails:GetValue(req).Value
        params.treeanimation   = InTreeAnimation:GetValue(req).Value
		params.ramification    = InRamification:GetValue(req).Value
		params.treetop         = InTreetopAnimation:GetValue(req).Value
		params.color           = {InRedA:GetValue(req).Value,InGreenA:GetValue(req).Value, InBlueA:GetValue(req).Value, InAlpha:GetValue(req).Value}
        params.colorchange     = InColorchange:GetValue(req).Value
		params.colorfrequency  = InColorchangefreq:GetValue(req).Value
		params.trunk           = InTrunk:GetValue(req).Value
		params.trunkint        = InTrunkInt:GetValue(req).Value
		params.trunkfrequency  = InTrunkFreq:GetValue(req).Value

        params.compOrder = 15                   -- params.srcCompOrder = src:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(DancyTreeDoodleParams)

        params.center[0] = center.X
        params.center[1] = center.Y
		params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.details         = InDetails:GetValue(req).Value
        params.treeanimation   = InTreeAnimation:GetValue(req).Value
		params.ramification    = InRamification:GetValue(req).Value
		params.treetop         = InTreetopAnimation:GetValue(req).Value
		params.color           = {InRedA:GetValue(req).Value,InGreenA:GetValue(req).Value, InBlueA:GetValue(req).Value, InAlpha:GetValue(req).Value}
        params.colorchange     = InColorchange:GetValue(req).Value
		params.colorfrequency  = InColorchangefreq:GetValue(req).Value
		params.trunk           = InTrunk:GetValue(req).Value
		params.trunkint        = InTrunkInt:GetValue(req).Value
		params.trunkfrequency  = InTrunkFreq:GetValue(req).Value

        params.compOrder = 15                   -- params.srcCompOrder = src:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR, TEX_ADDRESS_MODE_CLAMP, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("src", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end

