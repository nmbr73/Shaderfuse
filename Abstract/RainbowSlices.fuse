--[[--/*

    Rainbow Slices.fuse

    Based on https://www.shadertoy.com/view/XdsGD4 a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by nmbr73 (https://www.youtube.com/c/nmbr73)
    for use in DaFusion. With a lot of help by JiPi and base on
    his work (see: https://youtu.be/dbrPWRldmbs).

    There was no licence provided on shadertoy.com. So if you
    have the feeling that with this port your copyrights are
    violated then please just let me know (no need for your lawyer
    to inform me) and I will directly remove the code.

V.03 Corrected for OpenCL, rename Kernel

*/--]]--



local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass( ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,

})



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameter description
-- // ------------------------------------------------------------------------

RainbowSlicesParams =
[[
  float freq;
  int   width;
  int   height;
  float iTime;
  int   compOrder;
]]



-- // ------------------------------------------------------------------------
-- DCTL kernel implementation
-- // ------------------------------------------------------------------------

RainbowSlicesKernel =
    [[

//############################################################################


__DEVICE__ float2 max2f(float2 v, float2 i) {return to_float2(_fmaxf(v.x,i.x),_fmaxf(v.y,i.y));}
__DEVICE__ float sign1f(float value) {
  if (value == 0.0f) return 0.0f;
  return value > 0.0f ? 1.0f : -1.0f;
}
__DEVICE__ float2 abs2f(float2 a) {return (to_float2(_fabs(a.x), _fabs(a.y)));}
__DEVICE__ float2 cos2f(float2 i) {float2 r; r.x = _cosf(i.x); r.y = _cosf(i.y); return r;}
__DEVICE__ float3 cos3f(float3 i) {float3 r; r.x = _cosf(i.x); r.y = _cosf(i.y); r.z = _cosf(i.z); return r;}

#define EPS to_float2(1e-4, 0.0)


__DEVICE__ float3 rotateX(float a, float3 v)
{
   return to_float3(v.x, _cosf(a) * v.y + _sinf(a) * v.z, _cosf(a) * v.z - _sinf(a) * v.y);
}

__DEVICE__ float3 rotateY(float a, float3 v)
{
   return to_float3(_cosf(a) * v.x + _sinf(a) * v.z, v.y, _cosf(a) * v.z - _sinf(a) * v.x);
}

__DEVICE__ float sphere(float3 p, float r)
{
   return length(p) - r;
}

__DEVICE__ float plane(float3 p, float4 n)
{
   return dot(p, to_float3(n.x,n.y,n.z)) - n.w;
}

__DEVICE__ float sceneDist(float3 p, float time)
{
   const int num_spheres = 32;

   float sd = 1e3f;


   for(int i = 0; i < num_spheres; ++i)
   {
      float r = 0.22f * sqrt((float)i);
      float3 p2 = rotateX(_cosf(time + (float)i * 0.2f) * 0.15f, p);
      float cd = -sphere(p2 + to_float3(0.0f, -0.9f, 0.0f), 1.3f);
      sd = _fminf(sd, _fmaxf(_fabs(sphere(p2, r)), cd) - 1e-3f);
   }

   return sd;
}

__DEVICE__ float3 sceneNorm(float3 p, float time)
{
   float d = sceneDist(p,time);

   float3 exyy = to_float3(EPS.x,EPS.y,EPS.y);
   float3 eyxy = to_float3(EPS.y,EPS.x,EPS.y);
   float3 eyyx = to_float3(EPS.y,EPS.y,EPS.x);
   return normalize(to_float3(sceneDist(p + exyy,time) - d, sceneDist(p + eyxy,time) - d,
                              sceneDist(p + eyyx, time) - d));
}

__DEVICE__ float3 col(float3 p)
{
   float a = length(p) * 20.0f;
   return to_float3_s(0.5f) + 0.5f * cos3f(to_float3(a, a * 1.1f, a * 1.2f));
}

// ambient occlusion approximation (thanks to simesgreen)
__DEVICE__ float ambientOcclusion(float3 p, float3 n, float time)
{
    const int steps = 4;
    const float delta = 0.5f;

    float a = 0.0f;
    float weight = 3.0f;
    for(int i=1; i<=steps; i++) {
        float d = ((float)i / (float)steps) * delta;
        a += weight*(d - sceneDist(p + n*d, time ));
        weight *= 0.5f;
    }
    return clamp(1.0f - a, 0.0f, 1.0f);
}

//############################################################################

__KERNEL__ void RainbowSlicesKernel(
    __CONSTANTREF__ RainbowSlicesParams*  params,
    __TEXTURE2D__                 iChannel0,
    __TEXTURE2D_WRITE__           dst
    )
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);

  if (x >= params->width || y >= params->height)
    return;

  // ----- Standard parameters
  float2 fragCoord   = to_float2(x, y);
  float2 iResolution = to_float2(params->width, params->height);
  float  iTime       = params->iTime * params->freq;
  float4 fragColor   = to_float4_s(0.0f);

  //##########################################################################

  float2 uv = fragCoord / iResolution;
  float2 t = uv * 2.0f - to_float2_s(1.0f);
  t.x *= iResolution.x / iResolution.y;

  float time = iTime;

  float3 ro = to_float3(-0.4f, _sinf(time * 2.0f) * 0.05f, 0.7f), rd = rotateX(1.1f, rotateY(0.5f, normalize(to_float3_aw(to_float2(t.x,t.y), -0.8f))));
  float f = 0.0f;
  float3 rp, n;

  for(int i = 0; i < 100; ++i)
  {
      rp = ro + rd * f;
      float d = sceneDist(rp,time);

      if(_fabs(d) < 1e-4)
          break;

      f += d;
  }

  n = sceneNorm(rp,time);

  float3 l = normalize(to_float3(1.0f, 1.0f, -1.0f));

  float ao = ambientOcclusion(rp, n, time);


  fragColor = to_float4_aw(to_float3_s(0.5f + 0.5f * clamp(dot(n, l), 0.0f, 1.0f)) * col(rp) * _mix(0.1f, 1.0f, ao) * 1.6f, 1.0f);
  //fragColor.a = 1.0f;


  //fragColor = to_float4_aw(r, g, b, 1.0f);

  //##########################################################################

  _tex2DVec4Write(dst, x, y, fragColor);

}

]]



-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })

  ----- Inspector Panle Controls

   InFreq = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 2.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
  })


  ShaderFuse.end_create()

end



-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences

    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end


    -- Extern Texture or create a new one
    if (InImage1:GetValue(req) ~= nil) then
        src1 = InImage1:GetValue(req)
    else
        src1 = Image(imgattrs)
        local p = Pixel({R=0,G=0,B=0,A=0}) -- Initial black Image to avoid see random picture from Memory
        src1:Fill(p)
    end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true} -- create an Output Image


    -- Interface for running DCTL-Code
    node = DVIPComputeNode(req, "RainbowSlicesKernel", RainbowSlicesKernel, "RainbowSlicesParams", RainbowSlicesParams)

    params = node:GetParamBlock(RainbowSlicesParams)
    params.freq         = InFreq:GetValue(req).Value
    params.compOrder    = src1:IsMask() and 1 or 15
    params.width        = src1.DataWindow:Width()
    params.height       = src1.DataWindow:Height()
    params.iTime        = req.Time / framerate
    node:SetParamBlock(params)

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Errormessages from DCTL-Compiler
    end

    OutImage:Set(req, dst)
end
