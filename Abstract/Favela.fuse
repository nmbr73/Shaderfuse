--[[--/*

    Favela.fuse

    Based on https://www.shadertoy.com/view/ldGcDh a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by nmbr73 (https://www.youtube.com/c/nmbr73)
    for use in DaFusion.

    Shader created by duvengar

    Favela by Julien Vergnaud @duvengar-2018
    License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
    Based on the Minimal Hexagonal Grid example from @Shane.
    Minimal Hexagonal Grid - Shane
    https://www.shadertoy.com/view/Xljczw

*/--]]--

-- "LUA CODE..." /**


local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()


-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------

FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,
  REG_Source_GlobalCtrls = false,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,
  REG_TimeVariant        = true,
  })



-- // ------------------------------------------------------------------------
-- // DCTL general compability code
-- // ------------------------------------------------------------------------

-- **/ "End of LUA CODE"

local GLSL_CompabilityCode=[[


// -----

#undef USE_NATIVE_METAL_IMPL
#undef USE_NATIVE_CUDA_IMPL
#undef USE_NATIVE_OPENCL_IMPL

// 0 to use the generic implementations; 1 for Metal, OpenCL, Cuda specific code if existing

#if 1
  #if defined(DEVICE_IS_METAL)
    #define USE_NATIVE_METAL_IMPL   1
  #elif defined(DEVICE_IS_CUDA)
    #define USE_NATIVE_CUDA_IMPL    1
  #elif defined(DEVICE_IS_OPENCL)
    #define USE_NATIVE_OPENCL_IMPL  1
  #endif
#endif





// ---------------------------------------------------------------------------
// Macros to resolve Open GL szwizzling
// ---------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  #define swixy(V) (V).xy
//#define swixx(V) (V).xx
  #define swiyx(V) (V).yx
//#define swiyy(V) (V).yx
  #define swizw(V) (V).zw
  #define swixyx(V) (V).xyx
  #define swiyzx(V) (V).yzx
  #define swixyxy(V) (V).xyxy

#else

  #define swixy(V) to_float2((V).x,(V).y)
//#define swixx(V) to_float2((V).x,(V).x)
  #define swiyx(V) to_float2((V).y,(V).x)
//#define swiyy(V) to_float2((V).y,(V).y)
  #define swizw(V) to_float2((V).z,(V).w)
  #define swixyx(V) to_float3((V).x,(V).y,(V).x)
  #define swiyzx(V) to_float3((V).y,(V).z,(V).x)
  #define swixyxy(V) to_float4((V).x,(V).y,(V).x,(V).y)

#endif


// ---------------------------------------------------------------------------
// Fraction
// ---------------------------------------------------------------------------

// In Cuda the fract function is missing
// Does fract exist in OpenCL? And if so, what's its name then?

#if defined(USE_NATIVE_METAL_IMPL)

  __DEVICE__ inline float  fract1f(float f) {return fract(f);}
  __DEVICE__ inline float2 fract_float2(float2 v) { return fract(v); }
  __DEVICE__ inline float3 fract_float3(float3 v) { return fract(v); }
  __DEVICE__ inline float4 fract_float4(float4 v) { return fract(v); }

#else

  __DEVICE__ float  fract1f(float f) {return f - _floor(f);}
  __DEVICE__ float2 fract_float2(float2 v) { return to_float2(v.x - _floor(v.x), v.y - _floor(v.y)                                      ); }
  __DEVICE__ float3 fract_float3(float3 v) { return to_float3(v.x - _floor(v.x), v.y - _floor(v.y), v.z - _floor(v.z)                   ); }
  __DEVICE__ float4 fract_float4(float4 v) { return to_float4(v.x - _floor(v.x), v.y - _floor(v.y), v.z - _floor(v.z), v.w - _floor(v.w)); }


#endif

// Workaround to run cuda (JiPi)
__DEVICE__ float2 abs2f(float2 a) {return (to_float2(_fabs(a.x), _fabs(a.y)));}
#define lpowf _powf
__DEVICE__ float3 pow3f(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}



// ---------------------------------------------------------------------------
// Euclidean norm vector length
// ---------------------------------------------------------------------------
// @tida : did you finf out if you need to build a function for length?!?
// See https://www.steakunderwater.com/wesuckless/viewtopic.php?p=35549&sid=c4b440f6caff5fb5e24d0318a0a36bdb#p35549
// However, I need length and don't know if there is a differently named implementation in DCTL:

#if defined(USE_NATIVE_METAL_IMPL)

// In GLSL length(float) exists as well as length(vec2|3|4).
// In Metal length(float) does not exist, but length(half|float2|3|4) exists.

  __DEVICE__ inline float length1f      ( float  x ) { return abs(x);    }
  __DEVICE__ inline float length_float2 ( float2 v ) { return length(v); }
  __DEVICE__ inline float length_float3 ( float3 v ) { return length(v); }
  __DEVICE__ inline float length_float4 ( float4 v ) { return length(v); }

#else

  __DEVICE__ inline float length1f      ( float  x ) { return _fabs(x);                                 }
  __DEVICE__ inline float length_float2 ( float2 v ) { return _sqrtf(v.x*v.x+v.y*v.y);                  }
  __DEVICE__ inline float length_float3 ( float3 v ) { return _sqrtf(v.x*v.x+v.y*v.y+v.z*v.z);          }
  __DEVICE__ inline float length_float4 ( float4 v ) { return _sqrtf(v.x*v.x+v.y*v.y+v.z*v.z+v.w*v.w);  }

#endif


// ---------------------------------------------------------------------------



#if defined(USE_NATIVE_METAL_IMPL)

//__DEVICE__ inline float3 to_float3_12( float  x, float2 v ) { return to_float3(x,v.x,v.y);    }
//__DEVICE__ inline float3 to_float3_21( float2 v, float  x ) { return to_float3_aw(v,x);       }
//__DEVICE__ inline float4 to_float4_31( float3 a, float  b ) { return to_float4_aw(a,b);       }
//__DEVICE__ inline float4 to_float4_13( float  a, float3 b ) { return float4(a,b.x,b.y,b.z  ); }
  __DEVICE__ inline float4 to_float4_22( float2 a, float2 b ) { return float4(a.x,a.y,b.x,b.y); }

#else

  __DEVICE__ inline float4 to_float4_22( float2 a, float2 b ) { return to_float4(a.x,a.y,b.x,b.y); }

#endif



// ---------------------------------------------------------------------------
// 2x2 matrix
// ---------------------------------------------------------------------------

#if defined(USE_NATIVE_METAL_IMPL)

  typedef float2x2 mat2;

    __DEVICE__ inline mat2 to_mat2    ( float  a, float  b, float c, float d) { return mat2(a,b,c,d);       }
  //__DEVICE__ inline mat2 to_mat2_1f ( float  a                            ) { return mat2(a,a,a,a);       }
  //__DEVICE__ inline mat2 to_mat2_s  ( float  a                            ) { return mat2(a);             }
  //__DEVICE__ inline mat2 to_mat2_22 ( float2 a, float2 b                  ) { return mat2(a,b);           }
  //__DEVICE__ inline mat2 to_mat2_13 ( float  a, float3 b                  ) { return mat2(a,b.x,b.y,b.z); }
  //__DEVICE__ inline mat2 to_mat2_31 ( float3 a, float  b                  ) { return mat2(a.x,a.y,a.z,b); }

    __DEVICE__ inline mat2    prod_mat2_mat2  ( mat2   a, mat2   b )  { return a*b; }
    __DEVICE__ inline float2  prod_float2_mat2( float2 v, mat2   m )  { return v*m; }
    __DEVICE__ inline float2  prod_mat2_float2( mat2   m, float2 v )  { return m*v; }
    __DEVICE__ inline mat2    prod_mat2_1f    ( mat2   m, float  s )  { return m*s; }
  //__DEVICE__ inline mat2    prod_1f_mat2    ( float  s, mat2   m )  { return s*m; }

#else

  typedef struct
  {
    float2 r0;
    float2 r1;

  } mat2;

    __DEVICE__ inline mat2 to_mat2    ( float  a, float  b, float c, float d)  { mat2 t; t.r0.x = a; t.r0.y = b; t.r1.x = c; t.r1.y = d;         return t; }
  //__DEVICE__ inline mat2 to_mat2_1f ( float  a                            )  { mat2 t; t.r0.x = a; t.r0.y = a; t.r1.x = a; t.r1.y = a;         return t; }
  //__DEVICE__ inline mat2 to_mat2_s  ( float  a                            )  { mat2 t; t.r0.x = a;  t.r0.y = 0.0f; t.r1.x = 0.0f; t.r1.y = a;  return t; }
  //__DEVICE__ inline mat2 to_mat2_22 ( float2 a, float2 b                  )  { mat2 t; t.r0 = a; t.r1 = b;                                     return t; }
  //__DEVICE__ inline mat2 to_mat2_13 ( float  a, float3 b                  )  { mat2 t; t.r0.x = a; t.r0.y = b.x; t.r1.x = b.y; t.r1.y = b.z;   return t; }
  //__DEVICE__ inline mat2 to_mat2_31 ( float3 a, float  b                  )  { mat2 t; t.r0.x = a.x; t.r0.y = a.y; t.r1.x = a.z; t.r1.y = b;   return t; }


  __DEVICE__ inline mat2 prod_mat2_mat2( mat2 a, mat2 b)
  {
    mat2 t;
    t.r0.x = a.r0.x * b.r0.x + a.r0.y * b.r1.x;   t.r0.y = a.r0.x * b.r0.y + a.r0.y * b.r1.y;
    t.r1.x = a.r1.x * b.r0.x + a.r1.y * b.r1.x;   t.r1.y = a.r1.x * b.r0.y + a.r1.y * b.r1.y;
    return t;
  }


  __DEVICE__ inline float2 prod_float2_mat2( float2 v, mat2 m )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r0.y; t.y = v.x*m.r1.x + v.y*m.r1.y; return t;
    //return float2(v.x*m.r0.x + v.y*m.r0.y, v.x*m.r1.x + v.y*m.r1.y);
  }


  __DEVICE__ inline float2 prod_mat2_float2( mat2 m, float2 v )
  {
    float2 t; t.x = v.x*m.r0.x + v.y*m.r1.x; t.y = v.x*m.r0.y + v.y*m.r1.y; return t;
    //return float2(v.x*m.r0.x + v.y*m.r1.x, v.x*m.r0.y + v.y*m.r1.y);
  }


  __DEVICE__ inline mat2 prod_mat2_1f( mat2 m, float s)
  {
    mat2 t;
    t.r0.x = s * m.r0.x;
    t.r0.y = s * m.r0.y;
    t.r1.x = s * m.r1.x;
    t.r1.y = s * m.r1.y;
    return t;
  }

  //__DEVICE__ inline mat2 prod_1f_mat2( float s, mat2 m) { return prod_mat2_1f(m,s); }

#endif // end of mat2 implementation

]]



-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------

ST_FavelaParams =
[[
  int   compOrder;
  int   width;
  int   height;
  float iTime;

  float freq;
  float SIZE;
  int   Suntime;
  float Sunshine;
]]



-- // ------------------------------------------------------------------------
-- // DCTL kernel implementation
-- // ------------------------------------------------------------------------

ST_FavelaKernel =
    [[

///////////////////////////////////////////////////////////////////////////////////////////////////


__DEVICE__ float hash2(float2 p)
{
  // hash2 taken from Dave Hoskins
  // https://www.shadertoy.com/view/4djSRW

  float3 p3  = fract_float3(swixyx(p) * 0.2831f);
  p3 += dot(p3, swiyzx(p3) + 19.19f);
  return fract1f((p3.x + p3.y) * p3.z);
}


__DEVICE__ float hash(float n)
{
  return fract1f(_sinf(n)*43758.5453123f);
}


__DEVICE__ float noise(float2 x)
{
  float2 p = _floor(x);
  float2 f = fract_float2(x);
  f = f * f * (3.0f - 2.0f * f);
  float n = p.x + p.y * 57.0f;
  return _mix(_mix(hash(n + 0.0f), hash(n + 1.0f), f.x), _mix(hash(n + 57.0f), hash(n + 58.0f), f.x), f.y);
}


__DEVICE__ float fbm(float2 p)
{
  // see iq
  // https://www.shadertoy.com/view/lsfGRr
float var;
  const mat2 m = to_mat2( 0.6f, 0.6f, -0.6f, 0.8f);

  float f = 0.0f;
  f += 0.5000f * noise(p); p = prod_float2_mat2(p,prod_mat2_1f(m, 2.02f));
  f += 0.2500f * noise(p); p = prod_float2_mat2(p,prod_mat2_1f(m, 2.03f));
  f += 0.1250f * noise(p); p = prod_float2_mat2(p,prod_mat2_1f(m, 2.01f));
  f += 0.0625f * noise(p); p = prod_float2_mat2(p,prod_mat2_1f(m, 2.04f));
  f /= 0.9375f;
  return f;
}

///////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(DEVICE_IS_METAL)

  constant float2 s = to_float2(1.0f, 1.7320508f); // das geht in Metal

#elif defined(DEVICE_IS_OPENCL)

  #define s (to_float2(1.0f, 1.7320508f)) // okay, das ist hart, aber was will man machen?!?

#else

 __DEVICE__ const float2 s = {1.0f, 1.7320508f}; // geht das in Cuda?

#endif




__DEVICE__ float hex(float2 p)
{
  p = abs2f(p); // Change for Cuda (JiPi)
  return _fmaxf(dot(p, s *0.5f), p.x );
}


__DEVICE__ float4 getHex(float2 p)
{

  float4 hC = _floor(to_float4_22(p, p - to_float2(0.5f, 1.0f)) / swixyxy(s)) + 0.5f;
  float4 h = to_float4_22(p - swixy(hC)*s, p - (swizw(hC) + 0.5f)*s);
  return dot(swixy(h), swixy(h))<dot(swizw(h), swizw(h)) ? to_float4_22( swixy(h), swixy(hC)) : to_float4_22( swizw(h), swizw(hC) + to_float2(0.5f, 1.0f));
}



/////////////////////////////////////////////////////////////////////////////////////////////////////


#define M(a)        to_mat2(_cosf(a), -_sinf(a), _sinf(a), _cosf(a))
#define S(a, b, c)  smoothstep(a, b, c)
#define SAT(a)      _clampf(a, 0.0f, 1.0f)
#define T           iTime

#define PI M_PI                 // do all systems use math.h?
//#define PI 3.14159265358979f  // we could do this, if we don't have M_PI
//#define PI _acosf(-1.0f)      // that's what had been used in the shadertoy

#define TWO_PI (PI * 2.0f)

//#define SIZE 0.4f
#define BLUR 0.02f


__DEVICE__ float rem(float2 iR)
{
    float slices = 10.0f * _floor(iR.y / 50.0f); // 50.0f = LOWRES
    return  _sqrtf(slices);
}


__DEVICE__ float stripes( float2 uv, mat2 rot, float num, float amp, float blr)
{
    uv = prod_float2_mat2(uv,rot); // uv *= rot;
    // uv *= M(.02);
    float h =  smoothstep(amp+blr, amp - blr,  length1f(fract1f(uv.x * num )-0.5f));
    return h;
}

__DEVICE__ float dfDiamond(float2 h)
{
    h *= s; // rescale diamond verticaly with the helper vector
    float2 p =  to_float2(_fabs(h.x), _fabs(h.y));
    float d = (p.x+p.y)/0.5f;
    //return S(.2,.9,length(d));
    return d;
}


__DEVICE__ float rect(float2 uv,float2 p, float w, float h, float b)
{
    uv += p;
    float rv = S(h, h + b, length1f(uv.x));
    float rh = S(w, w + b, length1f(uv.y));
    return rv + rh;
}

#ifdef DEVICE_IS_OPENCL
  #undef s
#endif


//############################################################################

__KERNEL__ void ST_FavelaKernel(
    __CONSTANTREF__ ST_FavelaParams*  params,
    __TEXTURE2D__                     iChannel0,
    __TEXTURE2D_WRITE__               dst
    )
{

  DEFINE_KERNEL_ITERATORS_XY(x, y);

  if (x >= params->width || y >= params->height)
    return;

  // ----- Standard parameters
  float2 fragCoord   = to_float2(x, y);
  float2 iResolution = to_float2(params->width, params->height);
  float  iTime       = params->iTime * params->freq;
  float4 fragColor   = to_float4_s(0.0f);

  // ----- Additional parameters
  float SIZE        = params->SIZE;
  float Sunshine    = params->Sunshine;
  int   Suntime     = params->Suntime;

  //##########################################################################

  //  set up pixel coord
  //  ------------------
  float2 uv = (2.0f * fragCoord - swixy(iResolution)) / iResolution.y;
  uv = prod_float2_mat2(uv,M(0.25f * _cosf(PI) * 0.5f * length_float2(uv)));  // twist the pixels domain
  uv *= 1.1f;                                                                 // scale up the pixels domain
  uv = prod_float2_mat2(uv,M(PI));                                            // rotate the pixels domain
  uv *= 0.8f+dot(uv*0.3f,uv*0.3f);                                            // length distortion

#ifdef DEVICE_IS_OPENCL
  float2 s  = to_float2(1.0f, 1.7320508f);
#endif

  //  ------------------------------------------------------------------------------------------------
  //  variables
  //  ------------------------------------------------------------------------------------------------
  float   motion  = 325.543f + T * 0.5f;		            // speed
  float   SCALE   = rem(swixy(iResolution))*SIZE;           // screen rescaling ratio

  // three options for the initialisation of the blur value were given
  // in the original shadertoy. But the one actually used there does not
  // work in DCTL without further changes to substitute fwidth() ...
  //float   blr     = BLUR;
  //float   blr     = fwidth(uv.x)*length(uv)*8.0f;     // blur value
  float   blr     = S(0.0f,1.0f,length_float2(uv)*0.13f);
  float2  pos     = uv - motion;                        // position
  float3  lights  = to_float3_s(0.0f);
  float3  blights = to_float3_s(0.0f);
//float   sun     = _cosf(T*0.3f);
  float   sun = _cosf( (Suntime?T:PI)   * Sunshine);

  //  Hexagons grid
  //  -------------

  float4  h       = getHex( pos + SCALE * uv + swiyx(s));   // hexagons center
  float   eDist   = hex(swixy(h));                          // hexagone Edge distance.
  float   eDist2  = hex(swixy(h) + to_float2(0.0f,0.25f));
  //float   cDist   = length_float2(swixy(h));                // @Shane: cDist = dot(h.xy, h.xy);

  // AB HIER PROBLEM IN OPENCL !!!!!!!!!!!!
  float   tilt    = hash2(swizw(h)*2376.345791f); // random value depending on cel ids

  //  ------------------------------------------------------------------------------------------------
  //  sorting the hexagons
  //  ------------------------------------------------------------------------------------------------

  //  hexagons states booleans
  //  ------------------------
  float hills = 0.0f;
  //float red   = 0.0f;
  float flip  = 0.0f;
  float empty = 0.0f;
  //float tex   = 0.0f;
  //float wnds  = 0.0f;
  float tree  = 0.0f;
  float doors = 0.0f;

  //  wich tile are flipped?
  //  ----------------------
  float ff = _cosf(5.0f * _sinf(h.z - h.w)*tilt);
  if (ff > 0.0f)
  {
    flip = 1.0f;

    float2 tmp= prod_float2_mat2(swixy(h),M(PI));;
    h.x = tmp.x;
    h.y = tmp.y;

    empty = ff > 0.99f ? 1.0f : 0.0f;
  }


  //  polar coordinates + cubes faces angles
  //  --------------------------------------
  float2 pol = to_float2(_atan2f(h.x, h.y) / TWO_PI + 0.5f, length_float2(uv));
  float2 ang = to_float2(0.333333f, 0.666666f);

  if (pol.x <=  ang.x || tilt >= 0.7f)
  {
    //wnds = 1.0f;

    if(tilt >=0.9f)
      doors = 1.0f;
  }

  //  wich tiles are hills?
  //  ---------------------


  // AUCH HIER PROBLEM IN OPENCL !!!!!!!!!!!!

  if (flip == 0.0f && noise(swizw(h))*0.5f > 0.3f)
  {
    hills = 1.0f;
    tree = tilt > 0.5f ? 1.0f : 0.0f;
  }


  //  ------------------------------------------------------------------------------------------------
  //  create the windows elements
  //  ------------------------------------------------------------------------------------------------

  float2 pat  = swixy(h);                                                                             // original position (up lozenge in the hexagon)
  float2 pat2 = swixy(h)-(to_float2(flip == 1.0f ? 0.05f : -0.05, flip == 1.0f ? 0.03f : - 0.03f));   // offseted and rotated position on the right side
  float2 pat3 = swixy(h)-(to_float2(flip == 0.0f ? 0.05f : -0.05, flip == 1.0f ? 0.05f : - 0.05f));   // offseted and rotated position on the left side


  float s1  = stripes(pat,  prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 2.0f: 4.0f, 0.3f, blr );  // vertical stripes
  float s2  = stripes(pat,  prod_mat2_mat2(M(TWO_PI*0.666f),  M(0.02f)), 4.0f, 0.3f, blr );                       // oriented stripes

  float s3  = stripes(pat,  prod_mat2_mat2(M(TWO_PI*0.333f),  M(0.02f)), 4.0f, 0.3f, blr );
  float s4  = stripes(pat,  prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 4.0f: 2.0f, 0.3f, blr );

  float m1  = stripes(pat2, prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 2.0f: 4.0f, 0.3f, blr );
  float m2  = stripes(pat2, prod_mat2_mat2(M(TWO_PI*0.333f ), M(0.02f)), 4.0f, 0.3f, blr );

  float ml1 = stripes(pat3, prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 4.0f: 4.0f, 0.3, blr );
  float ml2 = stripes(pat3, prod_mat2_mat2(M(TWO_PI*0.666f),  M(0.02f)), 4.0f, 0.3f, blr );

  float windowsR  = min(s1,s3);                     // windows on the Right side
  float windowsL  = min(s4,s2);                     // windows on the Left side

  float maskR     = min(m1,m2);                     // offseted Right windows
  float maskL     = min(ml1,ml2);                   // offseted Left windows

  float winnerR   = min(windowsR, maskR);           // cuted Right inner windows
  float winnerL   = min(windowsL, maskL);           // cuted Left inner windows

  float wbevelR   = min(windowsR,windowsR-winnerR); // cuted Right bevel
  float wbevelL   = min(windowsL,windowsL-winnerL); // cuted Left bevels


  //  blured windows
  //  --------------

  float blr2  = BLUR * 8.;

  float bs1   = stripes(pat,  prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 2.0f: 4.0f, 0.3f, blr2 );   // vertical stripes
  float bs2   = stripes(pat,  prod_mat2_mat2(M(TWO_PI*0.666f),  M(0.02f)), 4.0f, 0.3f, blr2 );                        // oriented stripes

  float bs3   = stripes(pat,  prod_mat2_mat2(M(TWO_PI*0.333f ), M(0.02f)), 4.0f, 0.3f, blr2 );
  float bs4   = stripes(pat,  prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 4.0f: 2.0f, 0.3f, blr2 );

  float bm1   = stripes(pat2, prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 2.0f: 4.0f, 0.3f, blr2 );
  float bm2   = stripes(pat2, prod_mat2_mat2(M(TWO_PI*0.333f ), M(0.02f)), 4.0f, 0.3f, blr2 );

  float bml1  = stripes(pat3, prod_mat2_mat2(M(0.0f),           M(0.02f)), flip == 1.0f ? 4.0f: 4.0f, 0.3f, blr2 );
  float bml2  = stripes(pat3, prod_mat2_mat2(M(TWO_PI*0.666f),  M(0.02f)), 4.0f, 0.3f, blr2 );

  float bwindowsR = min(bs1,bs3);             // windows on the Right side
  float bwindowsL = min(bs4,bs2);             // windows on the Left side

  float bmaskR    = min(bm1,bm2);             // offseted Right windows
  float bmaskL    = min(bml1,bml2);           // offseted Left windows

  float bwinnerR  = min(bwindowsR, bmaskR);   // cuted Right inner windows
  float bwinnerL  = min(bwindowsL, bmaskL);   // cuted Left inner windows

  //  ------------------------------------------------------------------------------------------------
  //  shading the cubes faces
  //  ------------------------------------------------------------------------------------------------

  //  noise texture
  //  -------------
  float3 col = to_float3_s(1.0f);
  float n1 = 0.5f-(fbm(((uv -motion*0.24f)* 20.0f)));
  float n2 = 0.5f-(fbm(((uv -motion*0.31f)* 5.0f)));
  col += 0.4f * (max(n1,n2));


  //  painting
  //  --------
  float3 paint = to_float3(_cosf(h.z + h.w *0.2f),_cosf(tilt)*0.3f,noise(swizw(h)));

  //  lightning
  //  ---------
  float2 facespos = swixy(h);
  facespos = prod_float2_mat2(facespos, M(TWO_PI*ang.x));

  float2 fa = facespos;
  float shw = 0.7f * S(1.1f+ blr, 1.0f-blr, dfDiamond(facespos - (to_float2(0.0f, 0.3f))));
  facespos = prod_float2_mat2(facespos,M(TWO_PI*ang.x));

  float2 fb = facespos;
  shw += 0.2f * S(1.1f+blr, 1.0f-blr, dfDiamond(facespos - (to_float2(0.0f, 0.3f))));
  col -= shw;


  float fao = _clampf(smoothstep(1.0f,0.0f,eDist), 0.0f, 1.0f);               // Fake lightning gradient
  //fao = hills == 1. ? fao * 1.5 : fao;
  fao = flip == 0.0f || empty == 0.1f ?  0.65f * fao :  0.65f * (1.0f-fao);   // apply it as a shadow or light on the cubes
  col -= fao;
  col = _mix(col,to_float3(0.7f,0.3f,0.0f),0.45f);


  //  face 01 (right)
  //  --------------
  if(pol.x <=  ang.x )
  {
    if ( hills == 0.0f)
    {
              col      = tilt > 0.2f  ? col :  col +0.3f * paint ;
      float2  dir      = cos(T + h.z) > 0.0f ? prod_mat2_float2(M(PI/3.0f),swixy(h)) : -1.0f*prod_mat2_float2(M(PI/3.0f),swixy(h));
      float   blink    = S(1.0f,0.9f,fract1f(dir.x*2.0f)* 3.333f -0.5f)-0.5f;

      float   on       = S(-1.0f,1.0f,sun);
      float   light    = (-1.0f + tilt * _floor(on*10.0f) > 0.0f ? blink : -1.0f);
              light    = empty == 1.0f ? -0.5f : light;
      float   lum      = light > 0.0f ? -0.1f : 0.3f;

              col     -= tilt > 0.0f ? lum * wbevelR : 0.0f;
              col     += tilt > 0.0f ? light * winnerR : 0.0f;

              lights  += tilt > 0.0f ? light * winnerR : 0.0f;
              blights += tilt > 0.8f && flip == 1.0f ? light * bwinnerR : 0.0f;

      float t1 = stripes(pat - to_float2(0.01f,0.0f), prod_mat2_mat2(M(0.0f),M(0.02f)), 8.0f, 0.05f, blr*2.0f );
      float tt = stripes(pat - to_float2(fract_float2( prod_mat2_float2(M(-PI*0.666f),pat)*8.0f).x >0.5f ? 0.20f : 0.01f,0.00f), prod_mat2_mat2(M(0.0f),M(0.02f)), 8.0f, 0.05f, blr*2.0f );

      float t2 = stripes(pat - to_float2(-0.19f,0.01f), prod_mat2_mat2(M(TWO_PI*0.333f),M(0.02f)),   16.0f  , 0.05f, blr*2.0f );

      col += hills == 0.0f ? 0.1f*(t2+tt)* pow(noise((uv-motion*0.15f)*20.0f),1.5f) : 0.0f;

    } else
    {
      col = _mix(col, to_float3(0.52f,0.13f,0.01f), 0.5f);
      col = _mix(col, to_float3(0.5f,0.45f,0.1f), 1.0f-S(0.1f,0.3f,length1f(h.y - fb.y)));
    }
  }

  //  face 02 (left)
  //  ---------------
  if(pol.x >= ang.y)
  {
            col     += tilt > 0.2 ? to_float3_s(0.0f) : 0.3f * paint ;
    float2  dir      =  _cosf(T + h.z) > 0.0f ? prod_mat2_float2(M(PI),swixy(h)) : -1.0f*prod_mat2_float2(M(PI),swixy(h));
    float   blink    = S(1.0f,0.9f,fract1f(dir.x*2.0f)* 3.333f -0.5f)-0.5f;
    float   on       = S(-1.0f,1.0f,sun);
    float   light    = 0.5f*(-1.0f + tilt * _floor(on*10.0f) > 0.0f ? blink : -1.0f);
            col      = hills == 1.0f ? _mix(col,to_float3(0.52f,0.13f,0.01f), 0.5f) : col;
            col      = hills == 1.0f ? _mix(col, to_float3(0.5f,0.45f,0.1f), 1.0f-S(0.1f,0.3f,length1f(h.y - fa.y))) : col;
            col     += tilt > 0.8f && flip == 1.0f ? light * winnerL : 0.0f;
            col     += tilt > 0.8f && flip == 1.0f ? light*0.3f * wbevelL : 0.0f;
            lights  += tilt > 0.8f && flip == 1.0f? light * winnerL : 0.0f;
            blights += tilt > 0.8f && flip == 1.0f? light * bwinnerL : 0.0f;

    // walls texture
    float t1 = stripes(pat - to_float2(0.01f,0.0f), prod_mat2_mat2(M(0.0f),M(0.02f)), 8.0f, 0.05f, blr*2.0f );
    float tt = stripes(pat - to_float2(fract_float2(prod_mat2_float2(M(-PI*0.333f),pat)*8.0f).x >0.5f ? 0.20f : 0.01f,0.00f), prod_mat2_mat2(M(0.0f),M(0.02f)), 8.0f, 0.05f, blr*2.0f );
    float t2 = stripes(pat - to_float2(-0.19f,0.01f), prod_mat2_mat2(M(TWO_PI*0.666f),M(0.02f)),   16.0f  , 0.05f, blr*2.0f );
    col += hills == 0.0f ? 0.15f*(t2+tt)* pow(noise((uv-motion*0.15f)*20.0f),1.5f) : 0.0f;

    // doors
    float2  pos1    = to_float2(0.25f,0.0f);
    float2  pos2    = to_float2(0.215f,0.0f);
    float   door    = stripes(pat + pos1 , prod_mat2_mat2(M(0.0f),M(0.02f)), 1.0f, 0.05f, blr);
    float   doorcut = 1.0f-stripes(pat + pos1 , prod_mat2_mat2(M(TWO_PI*0.666f),M(0.02f)), 1.0f, 0.18f, blr);
    float   maskcut = 1.0f-stripes(pat + pos2 , prod_mat2_mat2(M(TWO_PI*0.666f),M(0.02f)), 1.0f, 0.18f, blr);
    float   doormask= stripes(pat + pos2 , prod_mat2_mat2(M(0.0f),M(0.02f)), 1.0f, 0.05f, blr);
            door    = min(door,doorcut);
            doormask= min(doormask, maskcut);
    float   dbevel  = SAT(min(door,door-doormask));

    col += doors == 1.0f && flip == 0.0f && hills == 0.0f ? dbevel   * 0.2f : 0.0f;
    col += doors == 1.0f && flip == 0.0f && hills == 0.0f ? doormask * 0.4f : 0.0f;
  }


  //  face 03 (top)
  //  -------------
  if (pol.x > ang.x && pol.x < ang.y)
  {
    if (hills == 1.0f)
    {
      col += 0.1f * to_float3(0.5f,0.45f,0.1f);
      float grass = 1.0f-S(1.1f+blr, 0.5f-blr, dfDiamond(swixy(h) - to_float2(0.0f, 0.3f)));
      col = _mix(to_float3(0.5f,0.45f,0.1f),col,1.0f-grass);
    }
  }

  //  face 04 (inside)
  //  ----------------
  //float2 ang2 = ang + to_float2(-0.1665f,0.1665f);
  //if (pol.x  <= ang2.x  || pol.x >= ang2.y)
  //{
  //}

  //  trees
  //  -----

  if ( tree == 1.0f)
  {
    float tw = 0.07f;
    float crown = S(0.25f+blr,0.25f,eDist2);

    float trunk = S(tw+blr, tw, hex(swixy(h) - to_float2(0.0f, 0.0f)));
    trunk = max(trunk,S(tw+(blr*0.5f), tw, hex(swixy(h) - to_float2(0.0f, 0.5f*tw*2.5f))));
    trunk = max(trunk,S(tw+(blr*0.5f), tw, hex(swixy(h) - to_float2(0.0f, 0.5f*tw*5.0f))));
    trunk = max(trunk,S(tw+(blr*0.5f), tw, hex(swixy(h) - to_float2(0.0f, 0.5f*tw*7.5f))));

    float a = pol.x < 0.5f ? 2.5f : 0.5f ;
    col = _mix(col,to_float3(0.5f,0.3f,0.2f),trunk*a);
    col = _mix(col,to_float3(0.55f,0.6f,0.3f),crown);

    float shw = 0.2f * S(0.5f + (blr*3.0f), 0.5f - blr, dfDiamond(fb + (to_float2(0.22f, 0.02f))));
    shw += 0.35f * S(0.5f + (blr*3.0f), 0.5f - blr, dfDiamond(fa - (to_float2(0.22f, -0.02f))));

    col -= shw;
  }

  if(hills == 1.0f)
  {
    col -= fao*0.2f;
  }


  //  Roof top
  //  --------

  float2 frh = fract_float2(swixy(h) * 2.0f);
  float d1 = S(0.8f+blr, 0.8f-blr, dfDiamond(swixy(h) - to_float2(0.0f, flip*0.3f)));
  float d2 = S(0.8f+blr, 0.8f-blr, dfDiamond(swixy(h) - to_float2(0.0f, flip*0.2f)));

  if (hills == 1.0f)
  {
    col  += 0.08f*(0.6f-hash2(uv*34869.54334f));
  }

  if(hills == 0.0f && flip == 1.0f)
  {
    if (empty == 0.0f)
    {
      float shw = pol.x < 0.5f ? 0.33f : 0.15f ;
      col -= shw *(d1-min(d1,min(d1,d2))); // inner bevel
      if( tilt > 0.7f)
      {
        float2  wtp           = to_float2(0.0f,-0.2f);
        float2  wtp2          = to_float2(0.0f,-0.58f);
        float2  wtp3          = to_float2(0.0f,-0.25f);
        float   watertank     = S(0.02f,  0.02f  -(blr*0.5f),dot(swixy(h)*s + wtp,  swixy(h)*s + wtp));
        float   watertanktop  = S(0.02f,  0.02f  -(blr*0.5f),dot(swixy(h)*s + wtp2, swixy(h)*s + wtp2));
        float   watertanktop2 = S(0.016f, 0.016f -(blr*0.5f),dot(swixy(h)*s + wtp2, swixy(h)*s + wtp2));
        float   watertankside = 1.0f - rect(swixy(h), wtp3, 0.1f,0.125f, blr);
                watertank     = max(watertank,watertanktop);
                watertank     = min(d1,watertank);
                watertankside = SAT(watertankside);
        float   wtglobal      = max(watertank, min(d1,watertankside));

        col  = _mix(col,to_float3(0.2f,0.32f,0.45f),wtglobal);
        col -= watertanktop2 * 0.15f;
        col += max(watertank,watertankside) * S(0.0f,0.15f,length1f(h.x-0.05f))*0.15f;

      } else
      {
        if(tilt > 0.3f )
        {
          float2  fanpos   = to_float2(-0.1f,-0.35f);
          float   fan      = S(0.125f,0.125f-blr,hex(swixy(h) + fanpos));
          col  = _mix(col,to_float3_s(1.0f),fan);
          col  = _mix(col,0.95f*to_float3(0.9f,0.75f,0.6f),fan);

          float   ff1      = dfDiamond(swixy(fa) + to_float2(0.35f,0.015f));
          float   ff2      = dfDiamond(swixy(fb) - to_float2(0.255f,-0.19f));
          col -= to_float3_s(0.45f*S(0.26f,0.26f-(blr*2.0f),ff1));
          col -= to_float3_s(0.2f*S(0.26f,0.26f-(blr*2.0f),ff2));
        }
      }

    } else
    {
      float shw = pol.x < 0.5f ? 0.4f : 0.15f ;
      col -=  shw * d1; // empty houses
    }
  }

  // postprocessing

          col   /= 1.1f-0.2f;
          col   += _mix(0.15f * S(0.0f,6.0f,length_float2(uv*s)), -0.8f * S(0.0f,6.0f,length_float2(uv*s)), sun);
          col    = clamp(col,to_float3_s(0.15f), to_float3_s(1.0f));

  float3  day    = col;
  float3  night  = col;
          night  = _mix(day, to_float3(0.2f,0.5f,0.9f),0.5f);

          night  = pow3f(night, to_float3_s(3.0f)); // Change for Cuda (JiPi)

		  //#define SAT(a)      _clampf(a, 0.0f, 1.0f) // Error in Cuda - workaround: resolve define  (JiPi)
          night += clamp(lights, 0.0f, 1.0f);
          night += clamp(blights*4.0f, 0.0f, 1.0f);

  float3  final = _mix(day,night,S(-1.0f, 1.0f,sun));


  // color output
  fragColor = to_float4_aw(final,1.0f);

  //##########################################################################


  //fragColor = to_float4(1.0f,1.0f,0.0f,0.0f); // WECH!
  _tex2DVec4Write(dst, x, y, fragColor);

}

]]

-- "LUA CODE..." /**

-- // ------------------------------------------------------------------------
-- // Create
-- // ------------------------------------------------------------------------

function Create()

  ShaderFuse.begin_create()

  ----- In/Out

  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
    LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })

  ----- Inspector Panel Controls

   InFreq = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 2.0,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 5.0,
  })

  InSIZE = self:AddInput("SIZE", "SIZE", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 0.4,
    INP_MinScale 	     = 0.1,
    INP_MaxScale 	     = 1.5,
  })

  InSunshine = self:AddInput("Sunshine", "Sunshine", {
    LINKID_DataType    = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default        = 0.3,
    INP_MinScale 	     = 0.0,
    INP_MaxScale 	     = 2.0, -- 2*Pi
  })

  InSuntime = self:AddInput("Suntime", "Suntime", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "CheckboxControl",
	  INP_Integer         = true,
    INP_Default         = 1,
--    IC_Visible          = true,
  })

  ShaderFuse.end_create()

end


-- // ------------------------------------------------------------------------
-- // Process
-- // ------------------------------------------------------------------------

function Process(req)

    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences

    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end


    -- Extern Texture or create a new one
    if (InImage1:GetValue(req) ~= nil) then
        src1 = InImage1:GetValue(req)
    else
        src1 = Image(imgattrs)
        local p = Pixel({R=0,G=0,B=0,A=0}) -- Initial black Image to avoid see random picture from Memory
        src1:Fill(p)
    end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true} -- create an Output Image


    -- Interface for running DCTL-Code

    node = DVIPComputeNode(req, "ST_FavelaKernel", GLSL_CompabilityCode..ST_FavelaKernel, "ST_FavelaParams", ST_FavelaParams)


    if not pcall(function ()  -- necessary to avoid memory leakage
        params.freq         = InFreq:GetValue(req).Value
        params.SIZE         = InSIZE:GetValue(req).Value
        params.Sunshine     = InSunshine:GetValue(req).Value
        params.Suntime      = InSuntime:GetValue(req).Value
        params.compOrder    = src1:IsMask() and 1 or 15
        params.width        = src1.DataWindow:Width()
        params.height       = src1.DataWindow:Height()
        params.iTime        = req.Time / framerate
        node:SetParamBlock(params)
    end) then
        params              = node:GetParamBlock(ST_FavelaParams)
        params.freq         = InFreq:GetValue(req).Value
        params.SIZE         = InSIZE:GetValue(req).Value
        params.Sunshine     = InSunshine:GetValue(req).Value
        params.Suntime      = InSuntime:GetValue(req).Value
        params.compOrder    = src1:IsMask() and 1 or 15
        params.width        = src1.DataWindow:Width()
        params.height       = src1.DataWindow:Height()
        params.iTime        = req.Time / framerate
        node:SetParamBlock(params)
    end


    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", src1)
    node:AddOutput("dst",      dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Errormessages from DCTL-Compiler
    end
    OutImage:Set(req, dst)
end

-- **/ "End of LUA CODE"


-- // ------------------------------------------------------------------------
-- // Callback
-- // ------------------------------------------------------------------------

-- /**

function NotifyChanged(inp, param, time)
	-- if param ~= nil then
	-- 	if param.Value == 1 then
	-- 		if inp == DctlFuseInfoButton then
	-- 			bmd.openurl( dctlfuse_infourl~=nil and dctlfuse_infourl or  "https://nmbr73.github.io/Shaderfuse/"..dctlfuse_category.."Shader/"..dctlfuse_name..".html")
	-- 		end
	-- 	end
	-- end
end

-- **/


