--[[--
FlightThroughANebula

    Based on https://www.shadertoy.com/view/tsK3Rd a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/nmbr73)
    for use in DaFusion.

    Shader created by Delvar


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
FlightThroughANebulaParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float rainamount;
  float clump;
  float damp;
  float phase;
  float look[2];
  float color[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
FlightThroughANebulaKernel =
    [[
  //**** mat3 ****
 typedef struct
  {
  float3 r0, r1, r2;
  } mat3;

__DEVICE__ inline mat3 make_mat3_3( float3 A, float3 B, float3 C)
  {
  mat3 D;
  D.r0 = A;
  D.r1 = B;
  D.r2 = C;
  return D;
  }


__DEVICE__ inline mat3 make_mat3( float A1, float B1, float C1, float A2, float B2, float C2, float A3, float B3, float C3 )
  {
  mat3 D;
  D.r0 = to_float3(A1,B1,C1);
  D.r1 = to_float3(A2,B2,C2);
  D.r2 = to_float3(A3,B3,C3);
  return D;
  }

__DEVICE__ inline float3 mat3_multi_f3( mat3 B, float3 A) {
  float3 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z;
  C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z;
  C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
  return C;
  }

__DEVICE__ mat3 mat3_multi_mat3( mat3 A, mat3 B)   //  __DEVICE__ inline mat3 multi( mat3 A, mat3 B)
{
  float r[3][3];
  float a[3][3] = {{A.r0.x, A.r0.y, A.r0.z},
                   {A.r1.x, A.r1.y, A.r1.z},
                   {A.r2.x, A.r2.y, A.r2.z}};
  float b[3][3] = {{B.r0.x, B.r0.y, B.r0.z},
                   {B.r1.x, B.r1.y, B.r1.z},
                   {B.r2.x, B.r2.y, B.r2.z}};

  for( int i = 0; i < 3; ++i)
  {
	  for( int j = 0; j < 3; ++j)
	  {
		  r[i][j] = 0.0f;
		  for( int k = 0; k < 3; ++k)
		  {
			r[i][j] = r[i][j] + a[i][k] * b[k][j];
		  }
	  }
  }
  mat3 R = make_mat3_3(make_float3(r[0][0], r[0][1], r[0][2]),
  make_float3(r[1][0], r[1][1], r[1][2]), make_float3(r[2][0], r[2][1], r[2][2]));
  return R;
  //A = R;
}



#define fract_f(a) (a-_floor(a))


__DEVICE__ float3 sin_f3(float3 i) {float3 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); return r;}
#define lpowf _powf
__DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}


// also see
// voronoi  version, https://www.shadertoy.com/view/tdyGzK
// simplex version, https://www.shadertoy.com/view/WsG3zd
// box version, https://www.shadertoy.com/view/tsK3Rd

#define RAY_MAX_STEPS 100
#define RAY_MAX_DISTANCE 30.0f

#define PI 3.1415926535897932384626433832795f


// Flags to use tecture lookups instead of noise functions, should be faster but introduces repetiton.
//#define noiseTecture3d
#define noiseTecture2d

typedef struct  {
   float3 origin, forward, right, up;
   float zoom; // Distance from screen
} camera;

typedef struct  {
   float3 origin, direction;
} ray;

__DEVICE__ mat3 eulerToMatrix(float roll, float pitch, float yaw){
  float
      cPitch = _cosf(pitch),
      sPitch = _sinf(pitch),
      cYaw = _cosf(yaw),
      sYaw = _sinf(yaw),
      cRoll = _cosf(roll),
      sRoll = _sinf(roll);
 float var;
	mat3 mPitch = make_mat3(1.0f,0.0f,0.0f,
	                          0.0f,cPitch,sPitch,
	                          0.0f,-sPitch,cPitch);

	mat3 mYaw = make_mat3(cYaw,0.0f,sYaw,
	                        0.0f,1.0f,0.0f,
	                       -sYaw,0.0f,cYaw);

	mat3 mRoll = make_mat3(cRoll,-sRoll,0.0f,
	                         sRoll,cRoll,0.0f,
	                          0.0f,0.0f,1.0f);

    return mat3_multi_mat3(mat3_multi_mat3(mPitch , mYaw) , mRoll);
}

__DEVICE__ camera getCamera(float3 origin, float roll, float pitch, float yaw, float zoom) {
   camera camera;
   camera.origin = origin;
   mat3 rotationMatrix = eulerToMatrix( roll, pitch, yaw);

   camera.forward = mat3_multi_f3(rotationMatrix , to_float3(0.0f,0.0f,1.0f) );
   camera.right   = mat3_multi_f3(rotationMatrix , to_float3(1.0f,0.0f,0.0f) );
   camera.up      = mat3_multi_f3(rotationMatrix , to_float3(0.0f,1.0f,0.0f) );

   camera.zoom = zoom;
   return camera;
}

__DEVICE__ ray getRay(float2 uv, camera camera) {
    ray ray;
    ray.origin = camera.origin;
    float3 center = ray.origin + camera.forward * camera.zoom;
    float3 intersection = center + (uv.x * camera.right) + ( uv.y * camera.up );
    ray.direction = normalize(intersection - ray.origin);
    return ray;
}

__DEVICE__ float random(float st) {
   return fract_f(_sinf(st*139.181f)* 437.5453123f);
}

__DEVICE__ float random3(float3 st) {
   return fract_f(_sinf(dot(st,to_float3(12.9898f,79.233f,96.9723f)))* 437.5453123f);
}

__DEVICE__ float boxNoise(float3 samplePoint) {
    float3 pointI =_floor(samplePoint);
    float3 pointF = fract_f(samplePoint);


    float bbl = random3(pointI + to_float3(0.0f,0.0f,0.0f) );
    float bbr = random3(pointI + to_float3(1.0f,0.0f,0.0f) );
    float btl = random3(pointI + to_float3(0.0f,1.0f,0.0f) );
    float btr = random3(pointI + to_float3(1.0f,1.0f,0.0f) );

    float fbl = random3(pointI + to_float3(0.0f,0.0f,1.0f) );
    float fbr = random3(pointI + to_float3(1.0f,0.0f,1.0f) );
    float ftl = random3(pointI + to_float3(0.0f,1.0f,1.0f) );
    float ftr = random3(pointI + to_float3(1.0f,1.0f,1.0f) );

    float3 u =pointF;

    float bb = _mix(bbl,bbr,u.x);
    float bt = _mix(btl,btr,u.x);

    float b = _mix(bb,bt,u.y);

    float fb = _mix(fbl,fbr,u.x);
    float ft = _mix(ftl,ftr,u.x);

    float f = _mix(fb,ft,u.y);

    return _mix(b,f,u.z);
}

__DEVICE__ float3 RayMarch(ray ray, float maxDistance, int maxSteps, float itime)
{
    float maxStepsf = (float)(maxSteps);
    float stepSize = maxDistance/maxStepsf;
    float3 total = to_float3_s(0.0f);
    float currentDistance = 1.0f;

    for(float i=0.0f; i<maxStepsf; i+=1) {
        float3 project = (ray.direction* currentDistance);
        //Add some offsets to hide the aligned features the box noise.
        project.x +=_sinf(project.y*0.5f);
        project.y +=_sinf(project.z*0.2f);
        project.z +=_sinf(project.x*0.3f);
	    float3 currentPoint = ray.origin + project  ;

        float stepf = ((maxStepsf - i)/maxStepsf);
        float s = 1.0f-(_fabs(boxNoise(currentPoint)-0.5f)*2.0f);
        s=smoothstep(0.7f,1.1f, s);

        s *= stepf;
        float3 light = sin_f3((currentPoint+to_float3(itime/10.0f,itime/13.0f,itime/15.0f))/4.0f)*0.5f+1.0f; //Yes we blow out the colour a little.
        total += light*s;
        currentDistance += stepSize;
    }
    return (total*(3.0f/maxStepsf));
}
__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void FlightThroughANebulaKernel(__CONSTANTREF__ FlightThroughANebulaParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

   //Functionality.......

    // Normalized Pixel coordinates (from -0.5f to +0.5f, center at 0,0)
    float2 uv = (fragCoord-0.5f*iResolution)/iResolution.y;

	// Standardparameter
    uv -=  to_float2( (params->center[0]-0.5f)*ratio, (params->center[1]-0.5f)); //*ratio*2.0f
    uv *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*ratio),(params->pivot[1]-0.5f)); //*ratio
    uv = spin(uv, pivot, params->angle, 1.0f); //params->debug

    // Normalized Mouse coordinates (from -0.5f to +0.5f, center at 0,0)
    float2 mouse = to_float2_v(params->look);//-0.5f*iResolution)/iResolution.y);// - to_float2(0.5f,0.5f)*(iMouse.w*0.1f);
    //Snap to center on startup.
    //if(iMouse.x <= 1.0f && iMouse.y <= 1.0f) {
    //    mouse = to_float2(0.0f,0.0f);
    //}

    camera camera = getCamera(to_float3(0.0f,0.0f,itime), itime*0.1f, mouse.y*PI, mouse.x*2.0f*PI,  0.5f);
    ray ray = getRay(uv, camera);

    float3 cloudColour = RayMarch(ray, RAY_MAX_DISTANCE, RAY_MAX_STEPS, itime);

    //Stars
    float starBase = random3(_floor(ray.direction*iResolution.x*0.5f));
    float stars = starBase>0.05f?0.0f:starBase*20.0f;
    stars *= stars * stars * stars;
    float cloudColourLength = length(cloudColour);
    stars *= clamp(_powf(clamp(1.0f-smoothstep(0.1f,1.0f,_fabs(cloudColourLength)),0.01f,1.0f),1.0f),0.0f,1.0f)*0.6f;
    float3 starColour = to_float3_s(stars);

    //Sun
    float2 facing = to_float2(itime*0.01f+1.2f,itime*0.03f+0.3f);
    float3 sunDir = normalize(to_float3(
        _sinf(facing.x),
		_sinf(facing.y),
		_cosf(facing.x)
		));

    float sunBright = _clampf(dot(sunDir,ray.direction),0.0f,1.0f);
    sunBright = _powf(smoothstep(0.8f,1.0f,sunBright),2.0f)* 10.0f; //blow it right out
    sunBright*=(_clampf(1.0f-cloudColourLength*0.5f,0.1f,1.0f)); //obscure by nebula
    float3 suncolour = to_float3(0.9f, 0.7f, 0.6f); //nice orange/yellow

    //Lightning
    float strikeBright = _powf(_clampf(_sinf(ray.direction.x+itime*10.0f)*_sinf(ray.direction.y+itime*15.0f)*_cosf(ray.direction.z+itime*20.0f),0.0f,1.0f),15.0f+_sinf(itime*2.0f)*10.0f);
    strikeBright *= 8.0f*_clampf(1.0f-cloudColourLength,0.1f,1.0f)*smoothstep(0.7f,1.0f,random(_floor(itime*5.0f)));
    float3 strikeColour = to_float3(0.7f,0.9f,1.0f);

    //
    float3 colour = _fmaxf(starColour,suncolour*sunBright*(_clampf(1.0f-cloudColourLength*0.5f,0.1f,1.0f)) + cloudColour);
    colour+=strikeBright*strikeColour;

    //modualte expose, so the screen darkens when looking at the sun,
    //rewrite the UV to remove aspect ratio but still 0 > 1 range
    uv = fragCoord / iResolution;
    uv *=  1.0f - uv;
    float exposure = smoothstep(-0.7f,1.0f,( 1.0f-_powf(_clampf(dot(camera.forward, sunDir),0.0f,1.0f),4.0f)));
    colour *= exposure;

    //Harsh gamma gives it a nicer look.
    colour = pow_f3(colour, to_float3_s(1.0f/0.8f));
    //flatten the colours
    //colour = 1.35f*colour/(1.0f+colour);
    colour = clamp(colour,0.0f,1.0f);
    colour = colour*colour*(3.0f-2.0f*colour);

    float vignette = _clampf(_powf( uv.x*uv.y*5.0f,0.2f)+0.3f,0.0f,1.0f);
    colour*=vignette;
    fragColor = to_float4_aw(colour,1.0f);

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
	IC_Visible          = false,
  })

  --------------- FlightThroughANebula ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
	IC_Visible          = false,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
	  IC_Visible     = false,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	  IC_Visible     = false,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    PC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
    INP_MaxScale = 360.0,
    INP_Default = 0.0,
	  IC_Visible  = false,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
	  IC_Visible      = false,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
	  IC_Visible          = false,
    INP_Integer = true,
    INP_External        = false,
	  INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
	IC_Visible          = false,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
	  IC_Visible          = false,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



self:BeginControlNest("Parameter", "_Parameter", true, {})
  InLook = self:AddInput("Look","Look", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InLayer1 = self:AddInput("Layer 1","Layer1", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.25,
    INP_DefaultY = 0.75,
	  IC_Visible          = false,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InLayer2 = self:AddInput("Layer 2","Layer2", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.5,
	  IC_Visible          = false,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Line Color",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.42,
	  IC_Visible          = false,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.32,
	  IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.12,
	  IC_Visible          = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })


self:EndControlNest()

--------------------------------------------

  --  InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })


--------------------------------------------
ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	  LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)


  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
	  --   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end



    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________FlightThroughANebula______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "FlightThroughANebulaKernel", FlightThroughANebulaKernel, "FlightThroughANebulaParams", FlightThroughANebulaParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

		params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(FlightThroughANebulaParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	      params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
end


