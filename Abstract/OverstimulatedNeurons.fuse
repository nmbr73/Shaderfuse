--[[--
OverstimulatedNeurons

    Based on https://www.shadertoy.com/view/NdlSD8 a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/c/JiPi_YT)
    for use in DaFusion.

    Shader created by Chaotnix


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()


-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,
  REG_Fuse_NoEdit        = not(FC_DEVEVELOP),
  REG_Fuse_NoReload      = not(FC_DEVEVELOP),

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess   = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-- // ------------------------------------------------------------------------
-- // DCTL kernel parameters
-- // ------------------------------------------------------------------------
OverstimulatedNeuronsParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  float fogfactor;
  float vignette;
  float diffuse;
  float phase;
  float look[3];
  float color[3];
  float color2[3];
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
OverstimulatedNeuronsKernel =
    [[
//-----------------------
//-------- mat3 ---------
//-----------------------

//**** mat3 ****
 typedef struct
  {
	float3 r0, r1, r2;
  } mat3;


  __DEVICE__ inline mat3 make_mat3( float3 A, float3 B, float3 C)
  {
	mat3 D;
	D.r0 = A;
	D.r1 = B;
	D.r2 = C;
	return D;
  }


 __DEVICE__ inline float3 mat3_multi_f3( mat3 B, float3 A) {
	float3 C;

	C.x = A.x * B.r0.x + A.y * B.r1.x + A.z * B.r2.x;
	C.y = A.x * B.r0.y + A.y * B.r1.y + A.z * B.r2.y;
	C.z = A.x * B.r0.z + A.y * B.r1.z + A.z * B.r2.z;
	return C;
  }

 __DEVICE__ inline float3 f3_multi_mat3( float3 A, mat3 B) {
  float3 C;

  C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z;
  C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z;
  C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
  return C;
 }


__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
__DEVICE__ float3 sqrt_f3(float3 a) {float3 r; r.x = _sqrtf(a.x); r.y = _sqrtf(a.y); r.z = _sqrtf(a.z); return r;}
__DEVICE__ float3 sin_f3(float3 i) {float3 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); return r;}
__DEVICE__ float4 sin_f4(float4 i) {float4 r; r.x = _sinf(i.x); r.y = _sinf(i.y); r.z = _sinf(i.z); r.w = _sinf(i.w); return r;}
__DEVICE__ float3 cos_f3(float3 i) {float3 r; r.x = _cosf(i.x); r.y = _cosf(i.y); r.z = _cosf(i.z); return r;}
__DEVICE__ float4 cos_f4(float4 i) {float4 r; r.x = _cosf(i.x); r.y = _cosf(i.y); r.z = _cosf(i.z); r.w = _cosf(i.w);return r;}
#define lpowf _powf
__DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}

__DEVICE__ float4 fract_f4(float4 A){return make_float4(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.w), A.w - _floor(A.w));}
__DEVICE__ float mod_f(float value, float divisor) {  return value - divisor * _floor(value / divisor);}

#if defined(DEVICE_IS_OPENCL) || defined(DEVICE_IS_METAL)
__DEVICE__ float3 reflect(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}
#endif

__DEVICE__ float3 refract_f3(float3 I, float3 N, float eta) {
   float dotNI = dot(N, I);
   float k = 1.0f - eta * eta * (1.0f - dotNI * dotNI);
   if (k < 0.0f) {
     return to_float3_s(0.0);
   }
   return eta * I - (eta * dotNI * _sqrtf(k)) * N+0.5f;
}


#define swixy(V) to_float2((V).x,(V).y)
#define swixz(V) to_float2((V).x,(V).z)
#define swiyz(V) to_float2((V).y,(V).z)

#define swixyz(V) to_float3((V).x,(V).y,(V).z)
#define swiyzx(V) to_float3((V).y,(V).z,(V).x)
#define swizyx(V) to_float3((V).z,(V).y,(V).x)
#define swiyxz(V) to_float3((V).y,(V).x,(V).z)
#define swizxy(V) to_float3((V).z,(V).x,(V).y)
#define swixzy(V) to_float3((V).x,(V).z,(V).y)

  #define swixyy(V) to_float3((V).x,(V).y,(V).y)
  #define swiyxy(V) to_float3((V).y,(V).x,(V).y)
  #define swiyyx(V) to_float3((V).y,(V).y,(V).x)


// Fork of "Abstract Glassy Field" by Shane. https://shadertoy.com/view/4ttGDH
/*
Abstract Glassy Field
---------------------

An abstract, blobby-looking field - rendered the style of hot, glowing glass. It was
produced using cheap low-budget psuedoscience. :)

The surface was constructed with a spherized sinusoidal function, of sorts. I like it, because
it's very cheap to produce, mildly reminiscent of noise and allows a camera to pass through it
without having to resort to trickery.

The fluid filled glass look is fake, but at least interesting to look at. Basically, it was
produced by indexing the reflected and refracted surface rays into a 3D tri-planar texture
lookup. By the way, I've tried the real thing on this particular surface - with multiple ray
bounces and so forth - and to say it's slower is an understatement. :)

By the way, if anyone is aware of some cheap and simple improvements, corrections, etc, feel
free to let me know.

*/

#define FAR 50.0f // Far plane, or maximum distance.

//float objID = 0.0f; // Object ID

//__DEVICE__ float accum; // Used to create the glow, by accumulating values the raymarching function.

// 2x2 matrix rotation. Note the absence of "cos." It's there, but disguise, and comes courtesy
// of Fabrice Neyret's "ouside the box" thinking. :)
//__DEVICE__ mat2 rot2( float a ){ float2 v = _sinf(to_float2(1.570796f, 0) - a);return make_mat2(v.x, v.y, -v.y, v.x); }


// Tri-Planar blending function. Based on an old Nvidia writeup:
// GPU Gems 3 - Ryan Geiss: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.0fhtml
__DEVICE__ float3 tpl( __TEXTURE2D__ t, float3 p, float3 n ){

    n = _fmaxf(abs_f3(n) - 0.2f, to_float3_s(0.001f));
    n /= dot(n, to_float3_s(1));
	float3 tx = swixyz(_tex2DVecN(t, p.z,p.y,15));
    float3 ty = swixyz(_tex2DVecN(t, p.x,p.z,15));
    float3 tz = swixyz(_tex2DVecN(t, p.x,p.y,15));

    // Textures are stored sRGB (I think), so you have to convert them to linear space
    // (squaring is a rough approximation) prior to working with them... or something like that. :)
    // Once the final color value is gamma corrected, you should see correct looking colors.
    return (tx*tx*n.x + ty*ty*n.y + tz*tz*n.z);
}


// Camera path.
__DEVICE__ float3 camPath(float t){

    //return to_float3(0, 0, t); // Straight path.
    //return to_float3(-_sinf(t/2.0f), _sinf(t/2.0f)*0.5f + 1.57f, t); // Windy path.

    //float s = _sinf(t/24.0f)*_cosf(t/12.0f);
    //return to_float3(s*12.0f, 0.0f, t);

    float a = _sinf(t * 0.11f);
    float b = _cosf(t * 0.14f);
    return to_float3(a*4.0f -b*1.5f, b*1.7f + a*1.5f, t);
}


// A fake, noisy looking field - cheaply constructed from a spherized sinusoidal
// combination. I came up with it when I was bored one day. :) Lousy to hone in
// on, but it has the benefit of being able to guide a camera through it.
/*
float map(float3 p){

    p.xy -= camPath(p.z).xy; // Perturb the object around the camera path.


    p = _cosf(p*0.315f*1.25f + _sinf(p.zxy*0.875f*1.25f)); // 3D sinusoidal mutation.


    float n = length(p) + 0.001f* _tex2DVecN(iChannel0, p.xy ).x ; // Spherize. The result is some mutated, spherical blob-like shapes.

    // It's an easy field to create, but not so great to hone one. The "1.4f" fudge factor
    // is there to get a little extra distance... Obtained by trial and error.
    return (n - 1.025f)*2.33f;

}
*/

// Alternative, even more abstract, field.
__DEVICE__ float map(float3 p, __TEXTURE2D__ iChannel0){
    //p.xy -= camPath(p.z).xy; // Perturb the object around the camera path.
	p.x -= camPath(p.z).x; // Perturb the object around the camera path.
	p.y -= camPath(p.z).y; // Perturb the object around the camera path.

	p = cos_f3(p*0.1490f + sin_f3(swizxy(p)*0.4375f)); // 3D sinusoidal mutation.

    // Spherize. The result is some mutated, spherical blob-like shapes.
    float n = dot(p, p);

    p = sin_f3(p*3.0f+cos_f3(swiyzx(p)*12.0f)); // Finer bumps. Subtle.

    return (n - p.x*p.y*p.z*0.35f - 0.9f)*1.33f + 0.001f * _tex2DVecN(iChannel0, p.x,p.y,15 ).x ; // Combine, and we're done.
}

// I keep a collection of occlusion routines... OK, that sounded really nerdy. :)
// Anyway, I like this one. I'm assuming it's based on IQ's original.
__DEVICE__ float cao(float3 p, float3 n, __TEXTURE2D__ iChannel0)
{
    float sca = 1.0f, occ = 0.0f;
    for(float i=0.0f; i<5.0f; i+=1){

        float hr = 0.01f + i*0.35f/4.0f;
        float dd = map(n * hr + p, iChannel0);
        occ += (hr - dd)*sca;
        sca *= 0.7f;
    }
    return clamp(1.0f - occ, 0.3f, 1.0f);
}


// Standard normal function. It's not as fast as the tetrahedral calculation, but more symmetrical.
__DEVICE__ float3 nr(float3 p, __TEXTURE2D__ iChannel0){

	const float2 e = to_float2(0.002f, 0);
	return normalize(to_float3(map(p + swixyy(e),iChannel0) - map(p - swixyy(e),iChannel0),
                               map(p + swiyxy(e),iChannel0) - map(p - swiyxy(e),iChannel0), map(p + swiyyx(e),iChannel0) - map(p - swiyyx(e),iChannel0)));
}

// Basic raymarcher.
__DEVICE__ float trace(float3 ro, float3 rd, __TEXTURE2D__ iChannel0, float *accum){
    *accum = 0.0f;
    float t = 0.0f, h;
    for(int i = 0; i < 128; i++){

        h = map(ro+rd*t,iChannel0);
        // Note the "t*b + a" addition. Basically, we're putting less emphasis on accuracy, as
        // "t" increases. It's a cheap trick that works most situations... Not all, though.
        if(_fabs(h)<0.001f*(t*0.25f + 1.0f) || t>FAR) break; // Alternative: 0.001f*_fmaxf(t*0.25f, 1.0f)
        t += h;

        // Simple distance-based accumulation to produce some glow.
        if(_fabs(h)<0.35f) *accum += (0.35f-_fabs(h))/24.0f;

    }

    return _fminf(t, FAR);
}


// Shadows.
__DEVICE__ float sha(float3 ro, float3 rd, float start, float end, float k, __TEXTURE2D__ iChannel0){

    float shade = 1.0f;
    const int maxIterationsShad = 24;

    float dist = start;
    float stepDist = end/(float)(maxIterationsShad);

    for (int i=0; i<maxIterationsShad; i++){
        float h = map(ro + rd*dist,iChannel0);
        //shade = _fminf(shade, k*h/dist);
        shade = _fminf(shade, smoothstep(0.0f, 1.0f, k*h/dist));

        dist += clamp(h, 0.01f, 0.2f);

        // There's some accuracy loss involved, but early exits from accumulative distance function can help.
        if (_fabs(h)<0.001f || dist > end) break;
    }

    return _fminf(_fmaxf(shade, 0.0f) + 0.4f, 1.0f);
}


// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups total.
__DEVICE__ float3 db( __TEXTURE2D__ tx, float3 p, float3 n, float bf){

    const float2 e = to_float2(0.001f, 0);

    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.
    mat3 m = make_mat3( tpl(tx, p - swixyy(e), n), tpl(tx, p - swiyxy(e), n), tpl(tx, p - swiyyx(e), n));

    float3 g = f3_multi_mat3(to_float3(0.299f, 0.587f, 0.114f), m); // Converting to greyscale.
    g = (g - dot(tpl(tx,  p , n), to_float3(0.299f, 0.587f, 0.114f)) )/e.x; g -= n*dot(n, g);

    return normalize( n + g*bf ); // Bumped normal. "bf" - bump factor.
}

// Compact, self-contained version of IQ's 3D value noise function. I have a transparent noise
// example that explains it, if you require it.
__DEVICE__ float n3D(float3 p){

    const float3 s = to_float3(7, 157, 113);
    float3 ip = _floor(p); p -= ip;
    float4 h = to_float4(0.0f, s.y, s.z, s.y + s.z) + dot(ip, s);
    p = p*p*(3.0f - 2.0f*p); //p *= p*p*(p*(p * 6.0f - 15.0f) + 10.0f);
    h = _mix(fract_f4(sin_f4(h)*43758.5453f), fract_f4(sin_f4(h + s.x)*43758.5453f), p.x);
    //h.xy = _mix(swixz(h), swiyw(h), p.y);

    return _mix(h.x, h.y, p.z); // Range: [0, 1].
}

// Simple environment mapping.
__DEVICE__ float3 envMap(float3 rd, float3 n, __TEXTURE2D__ iChannel0){

    float3 col = tpl(iChannel0, rd*4.0f, n);
    return smoothstep(to_float3_s(0.4f), to_float3_s(0.7f), col/2.0f);
}

__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}

//############################################################################################################################
__KERNEL__ void OverstimulatedNeuronsKernel(__CONSTANTREF__ OverstimulatedNeuronsParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

     //-----------------------
     float2 fragCoord = to_float2(x, y);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime * params->freq;
	 float4 fragColor = to_float4_s(0.0f);
     //-----------------------

     //Functionality.......

    float accum;

    // Screen coordinates.
    float2 u = (fragCoord - iResolution*0.5f)/iResolution.y;

	// Standardparameter
    u -=  to_float2( (params->center[0]-0.5f)*ratio, (params->center[1]-0.5f));
    u *= params->scale;
    float2 pivot = to_float2(((params->pivot[0]-0.5f)*ratio),(params->pivot[1]-0.5f));
    u = spin(u, pivot, params->angle, 1.0f);


    // Camera Setup.
    float speed = 3.0f;
    float3 o = camPath(itime*speed); // Camera position, doubling as the ray origin.
    float3 lk = camPath(itime*speed + 0.25f);  // "Look At" position.
    float3 l = camPath(itime*speed + 2.0f) + to_float3(0, 1, 0); // Light position, somewhere near the moving camera.

	lk += to_float3_v(params->look);

    // Using the above to produce the unit ray-direction vector.
    float FOV = 3.14159f/2.0f; ///3.0f FOV - Field of view.
    float3 fwd = normalize(lk-o);
    float3 rgt = normalize(to_float3(fwd.z, 0, -fwd.x ));
    float3 up = cross(fwd, rgt);

    // Unit direction ray.
    //float3 r = normalize(fwd + FOV*(u.x*rgt + u.y*up));
    // Lens distortion.
    float3 r = fwd + FOV*(u.x*rgt + u.y*up);
    r = normalize(to_float3_aw(swixy(r), (r.z - length(swixy(r))*0.125f)));


    // Raymarch.
    float t = trace(o, r, iChannel0, &accum);

    // Save the object ID directly after the raymarching equation, since other equations that
    // use the "map" function will distort the results. I leaned that the hard way. :)
    //float sObjID = objID;

    // Initialize the scene color to the background.
    float3 col = to_float3_s(0);


    // If the surface is hit, light it up.
    if(t<FAR){
        // Position.
        float3 p = o + r*t;

        // Normal.
        float3 n = nr(p, iChannel0);

        // Sometimes, it's handy to keep a copy of the normal. In this case, I'd prefer the
        // bumps on the surface to not have as much influence on the reflrection and
        // refraction vectors, so I tone down the bumped normal with this. See the reflection
        // and refraction lines.
        float3 svn = n;

        // Texture bump the normal.
        float sz = 1.0f/3.0f;
        n = db(iChannel0, p*sz, n, 0.1f/(1.0f + t*0.25f/FAR));

        l -= p; // Light to surface vector. Ie: Light direction vector.
        float d = _fmaxf(length(l), 0.001f); // Light to surface distance.
        l /= d; // Normalizing the light direction vector.

        float at = 1.0f/(1.0f + d*0.05f + d*d*0.0125f); // Light attenuation.

        // Ambient occlusion and shadowing.
        float ao =  cao(p, n, iChannel0);
        float sh = sha(p, l, 0.04f, d, 16.0f, iChannel0);

        // Diffuse, specular, fresnel. Only the latter is being used here.
        float di = _fmaxf(dot(l, n), 0.0f)*params->diffuse;
        float sp = _powf(_fmaxf( dot( reflect(r, n), l ), 0.0f), 64.0f); // Specular term.
        float fr = clamp(1.0f + dot(r, n), 0.0f, 1.0f); // Fresnel reflection term.

        // Texturing - or coloring - the surface. The "color"' of glass is provide by the surrounds...
        // of it's contents, so just make it dark.
        float3 tx = to_float3_s(0.05f); // tpl(to_float3(0.0f,0.0f,0.0f), p*sz, n);

	    // Very simple coloring.
        col = tx*(di*0.1f + ao*0.25f) + to_float3(0.5f, 0.7f, 1)*sp*2.0f + to_float3(1, 0.7f, 0.4f)*_powf(fr, 8.0f)*0.25f;

        // Very cheap, and totally fake, reflection and refraction. Obtain the reflection and
        // refraction vectors at the surface, then pass them to the environment mapping function.
        // Note that glass and fluid have different refractive indices, so I've fudged them into
        // one figure.
        //float3 refl = envMap(normalize(reflect(r, svn*0.5f + n*0.5f)), svn*0.5f + n*0.5f);
        //float3 refr = envMap(normalize(refract_f(r, svn*0.5f + n*0.5f, 1.0f/1.35f)), svn*0.5f + n*0.5f);

	    // You can also index into a 3D texture, but I prefer the above.
        float3 refl = swixyz(_tex2DVecN(iChannel0, 0.2f* normalize(reflect(r, svn*0.5f + n*0.5f)).x, 0.2f* normalize(reflect(r, svn*0.5f + n*0.5f)).y,15));
        float3 refr = swixyz(_tex2DVecN(iChannel0, 0.2f* normalize(refract_f3(r, svn*0.5f + n*0.5f, 1.0f/1.31f)).x, 0.2f* normalize(refract_f3(r, svn*0.5f + n*0.5f, 1.0f/1.31f)).y,15));
        refl *= refl*0.3f;
        refr *= refr*0.4f;

        // More fake physics that looks like real physics. :) Mixing the reflection and refraction
        // colors according to a Fresnel variation.
        float3 refCol = _mix(refr, refl, _powf(fr, 5.0f)); //(refr + refl)*0.5f; // Adding them, if preferred.

        // Obviously, the reflected\refracted colors will involve lit values from their respective
        // hit points, but this is fake, so we're just combining it with a portion of the surface
        // diffuse value.
        col += refCol*((di*di*0.25f+0.75f) + ao*0.25f)*1.5f; // Add the reflected color. You could combine it other ways too.

        // Based on IQ's suggestion: Using the diffuse setting to vary the color slightly the
        // hope that it adds a little more depth. It also gives the impression that Beer's Law is
        // taking effect, even though it clearly isn't. I might try to vary with curvature - or some other
        // depth guage - later to see if it makes a difference.
        col = _mix(swixzy(col), col, di*0.85f + 0.15f);

        // Glow.
        // Taking the accumulated color (see the raymarching function), tweaking it to look a little
        // hotter, then combining it with the object color.
        float3 accCol = to_float3(1, 0.3f, 0.1f)*accum;
        float3 gc = pow_f3(_fminf(to_float3(1.5f, 1, 1)*accum, to_float3_s(1.0f)), to_float3(1, 2.5f, 12.0f))*0.5f + accCol*0.5f;
        col += col*gc*12.0f;

        // Purple electric charge.
        float hi = _fabs(mod_f(t/1.0f +  0.02f * _tex2DVecN(iChannel0, p.x, p.y,15 ).x, 8.0f) - 8.0f/2.0f)*2.0f;
        float3 cCol = to_float3(0.101f, 0.05f, 1)*col*1.0f/(0.001f + hi*hi*0.2f);

		cCol *= to_float3_v(params->color);

        col += _mix(swiyxz(cCol), cCol, n3D(p*3.0f));
	    // Similar effect.
        //float3 cCol = to_float3(0.01f, 0.05f, 1)*col*_fabs(_tanf(t/1.5f + itime/3.0f));
        //col += cCol;

        // Apply some shading.
        col *= ao*sh*at;
    }

    // Blend a bit of light fog for atmospheric effect.
    float3 fog = to_float3_v(params->color2)*(r.y*0.5f + 0.5f);    // Nebel
    col = _mix(col, fog*params->fogfactor, smoothstep(0.0f, 0.95f, t/FAR)); // _expf(-0.002f*t*t), etc. fog.zxy

    // Subtle vignette.
    u = fragCoord/iResolution;
    col = _mix(to_float3_s(0), col, _powf( 16.0f*u.x*u.y*(1.0f-u.x)*(1.0f-u.y) , 0.125f)*params->vignette + 0.5f);

    // Rough gamma correction, and we're done.
    fragColor = to_float4_aw(sqrt_f3(clamp(col, 0.0f, 1.0f)), 1);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]

-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------
function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------
  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- OverstimulatedNeurons ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    PC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = true,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

self:BeginControlNest("Parameter", "Par", true, {})
 InLook = self:AddInput("Look","Look", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INP_DoNotifyChanged = false,
    INP_DefaultX = 0.0,
    INP_DefaultY = 0.0,
    XF_XAxis = -1,
    XF_YAxis = -1,
    XF_XSize = 1,
    XF_YSize = 1,
    XF_Angle = 0,
    XF_EdgeMode = "Black"
    })
  InLookZ = self:AddInput("LookZ", "LookZ", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InFogfactor = self:AddInput("Fogfactor", "Fogfactor", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	INP_MinScale = -1.0,
	INP_MaxScale = 5.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InVignette = self:AddInput("Vignette", "Vignette", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
    --INP_MinAllowed = 0.0,
    --INP_MaxAllowed = 5.0,
    })
  InDiffuse = self:AddInput("Diffuse", "Diffuse", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	INP_MinScale = -5.0,
	INP_MaxScale = 5.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

 InRedCH = self:AddInput("Red", "RedCH", {
    ICS_Name            = "Electric Charge",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 1,
    IC_ControlID        = 0,
  })
  InGreenCH = self:AddInput("Green", "GreenCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 1,
    IC_ControlID        = 1,
  })
  InBlueCH = self:AddInput("Blue", "BlueCH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 1.0,
    IC_ControlGroup     = 1,
    IC_ControlID        = 2,
  })

  InRed2CH = self:AddInput("Red", "Red2CH", {
    ICS_Name            = "Fog",
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.125,
    INP_MaxScale        = 0.5,
    CLRC_ShowWheel      = false,
    IC_ControlGroup     = 2,
    IC_ControlID        = 0,
  })
  InGreen2CH = self:AddInput("Green", "Green2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.04,
    IC_ControlGroup     = 2,
    IC_ControlID        = 1,
  })
  InBlue2CH = self:AddInput("Blue", "Blue2CH", {
    LINKID_DataType     = "Number",
    INPID_InputControl  = "ColorControl",
    INP_Default         = 0.05,
    IC_ControlGroup     = 2,
    IC_ControlID        = 2,
  })
self:EndControlNest()

-- InLogoSw = self:AddInput("Logo", "LogoSw", {
--   LINKID_DataType = "Number",
--   INPID_InputControl = "CheckboxControl",
--   INP_Integer = true,
--   INP_DoNotifyChanged = true,
--   INP_Default         = 1,
--   IC_Visible          = true,
--   INP_External        = false,
--   INP_Passive         = true,
-- })

--------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
	--LINK_Visible = false,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)
  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end

	-- if inp == InLogoSw then
	--   if param.Value == 1 then
	-- 	 --authorlogo:SetAttrs({IC_Visible = true})
	--   else
	-- 	 --authorlogo:SetAttrs({IC_Visible = false})
	--   end
	-- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end

    local dst = Image {IMG_Like = src1, IMG_DeferAlloc = true}

    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dst, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end

    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    --Sep1:SetAttrs({LINKS_Name = "____________OverstimulatedNeurons______________________",LBLC_LabelColor = 3,})

    node = DVIPComputeNode(req, "OverstimulatedNeuronsKernel", OverstimulatedNeuronsKernel, "OverstimulatedNeuronsParams", OverstimulatedNeuronsParams)

    if not pcall(function ()
        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.fogfactor   = InFogfactor:GetValue(req).Value
		params.vignette    = InVignette:GetValue(req).Value
		params.diffuse     = InDiffuse:GetValue(req).Value
        params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y,InLookZ:GetValue(req).Value}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(OverstimulatedNeuronsParams)

        params.center[0] = center.X
        params.center[1] = center.Y
	    params.scale = 1/scale
        params.angle = angle
        params.pivot[0] = InPivot:GetValue(req).X
        params.pivot[1] = InPivot:GetValue(req).Y
        params.debug = debug
        params.freq = freq

        params.fogfactor   = InFogfactor:GetValue(req).Value
		params.vignette    = InVignette:GetValue(req).Value
		params.diffuse     = InDiffuse:GetValue(req).Value
        params.look        = {InLook:GetValue(req).X,InLook:GetValue(req).Y,InLookZ:GetValue(req).Value}
        params.color       = {InRedCH:GetValue(req).Value, InGreenCH:GetValue(req).Value, InBlueCH:GetValue(req).Value}
		params.color2      = {InRed2CH:GetValue(req).Value, InGreen2CH:GetValue(req).Value, InBlue2CH:GetValue(req).Value}

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()

        params.itime = acttime  --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)


    node:AddInput("iChannel0", src1)
    node:AddOutput("dst", dst)

    local success = node:RunSession(req)
    if not success then
        dst = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dst)
	collectgarbage();
end

-- **/ "End of LUA CODE"

