--[[--
Vine

    Based on https://www.shadertoy.com/view/XldSz7 a WebGL
    shader from shadertoy.com converted to DCTL and embeddet
    into a Lua Fuse by JiPi (https://www.youtube.com/channel/UCItO4q_3JgMVV2MFIPDGQGg)
    for use in DaFusion.

    Shader created by gaz


--]] --

local ShaderFuse = require("Shaderfuse/ShaderFuse")
ShaderFuse.init()

-- // ------------------------------------------------------------------------
-- // Registry declaration
-- // ------------------------------------------------------------------------
FuRegisterClass(ShaderFuse.FuRegister.Name, CT_SourceTool, {
  ShaderFuse.FuRegister.Attributes,
  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  REG_OpNoMask           = true,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess    = true,  -- call Process for precalc requests (instead of PreCalcProcess)

  })

-----------------------------------
-- Description of kernel parameters

----------------BufferA---------------
BufferAParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float coordscor[2];
  float scale;
  float freq;
  bool reset;
  float fade;
  int lines;
  int steps;
  float dotted;
  float brightness;
  float color;
  float alpha;
  int width;
  int height;
  int frame;
  float itime;
  int compOrder;
]]


-- source of kernel
BufferAKernel =
    [[
//-----------------------
//-------- mat2 ---------
//-----------------------
 typedef struct
  {
  float2 r0, r1;
  } mat2;

 __DEVICE__ inline mat2 make_mat2( float2 A, float2 B)
  {
  mat2 C;
  C.r0 = A;
  C.r1 = B;
  return C;
  }

 __DEVICE__ inline mat2 make_mat2_2( float A, float B, float C, float D)
  {
  mat2 E;
  E.r0 = to_float2(A,B);
  E.r1 = to_float2(C,D);
  return E;
  }

__DEVICE__ inline float2 mat2_multi_2f( mat2 B, float2 A)
  {
  float2 C;
  C.x = A.x * B.r0.x + A.y * B.r0.y;
  C.y = A.x * B.r1.x + A.y * B.r1.y;
  return C;
  }
#define lpowf _powf
__DEVICE__ float3 pow_f3(float3 a, float3 b) {float3 r; r.x = lpowf(a.x,b.x); r.y = lpowf(a.y,b.y); r.z = lpowf(a.z,b.z); return r;}
__DEVICE__ float fract_f(float A){return A - _floor(A);}
__DEVICE__ float3 fract_f3(float3 A){return make_float3(A.x - _floor(A.x), A.y - _floor(A.y), A.z - _floor(A.z));}
__DEVICE__ float sign_f(float value) {
  if (value == 0.0f) return 0.0f;
  return value > 0.0f ? 1.0f : -1.0f;
}
__DEVICE__ float2 sign_f2(float2 a) {return (to_float2(sign_f(a.x), sign_f(a.y)));}

__DEVICE__ float3 abs_f3(float3 a) {return (to_float3(_fabs(a.x), _fabs(a.y),_fabs(a.z)));}
#define radians(a) a * M_PI/180.0f
#define swixyz(V) to_float3((V).x,(V).y,(V).z)


//Buffer A
__DEVICE__ mat2 _rotate(float a)
{
    float s = _sinf(a), c = _cosf(a);
return make_mat2_2(c, s, -s, c);
}

__DEVICE__ float3 hsv(float h, float s, float v)
{
  return _mix(to_float3_s(1.0f),clamp((abs_f3(fract_f3(
    h+to_float3(3.0f, 2.0f, 1.0f)/4.0f)*6.0f-3.0f)-1.0f), 0.0f, 1.0f),s)*v;
}

__DEVICE__ float2 bezier(float2 a, float2 b, float2 c, float t){
  return _mix(_mix(a,b,t),_mix(b,c,t),t);
}

__DEVICE__ float hash( float2 p )
{
float var;
    float h = dot(p,to_float2(127.1f,311.7f));
    return -1.0f + 2.0f*fract_f(_sinf(h)*43758.5453123f);
}

__DEVICE__ float2 vine(float2 a, float2 b, float t)
{
    const int STEP = 10;
    float theta = (hash(a)-0.5f)*0.3f;
    theta += sign_f(theta)*0.05f;
    float2 v = normalize(b-a);
    float len = length(b-a);
    len = _fminf(0.2f,len);
    float2 p;
    b=a;
    for (int i = 0; i < STEP; i++)
    {
        if (hash(b)>0.9f) theta *= -1.0f;
        if((float)(i)/(float)(STEP)>t) break;
        a = b;
        p = a + v * len / 2.0f;
        b = a + mat2_multi_2f(_rotate(theta) , v*len);
        v = normalize(b-p);
        len *= 0.9f;
    }
    return bezier(a,p,b,fract_f(t*(float)(STEP)));
}


__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
  float C = _cosf(angle);
  float S = _sinf(angle);

  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;

return uv;
}




//############################################################################################################################
__KERNEL__ void BufferAKernel(__CONSTANTREF__ BufferAParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height)
  {

    //-----------------------
     float2 fragCoord = to_float2(x+0.50f, y+0.50f);
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime*params->freq;
     float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......

    float2 p = (fragCoord *2.0f-iResolution)/iResolution.y;
    float3 col=to_float3_s(0);

    col = swixyz(_tex2DVecN(iChannel0, fragCoord.x/iResolution.x,fragCoord.y/iResolution.y, 15)*params->fade );

    float t;
    float2 pos;
    float2 o = to_float2_s(0);
    for (int i = 0; i < params->lines; i++)
    {
        t = itime + hash(to_float2(0.22558f, _sinf((float)(i)*0.55688f)+2.558f))*3.0f;
        t *= params->dotted;
        float r = _floor(t);
        t = fract_f(t);
        o = to_float2(hash(normalize(to_float2((float)(i)*0.458878f,r*358.22f))),
        hash(normalize(to_float2((float)(i)*0.445578f,r*5899.22f))));
        o = o + sign_f2(o)*0.36f;
        pos = vine(o,mat2_multi_2f( _rotate(radians(360.0f)*hash(normalize(to_float2(_sinf(((float)(i)+0.33f)*0.445578f),_sinf(r*358.22f))))),to_float2(0.2f,0) ),t);
        col = _mix(col, hsv(hash(o), params->color,params->brightness), smoothstep(0.02f*(1.1f-t), 0.01f*(1.1f-t), length(p-pos)));
    }

	if (params->reset == 1)  col = to_float3_s(0);

    fragColor = to_float4_aw(col, params->alpha);

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]



----------------Image---------------
ImageParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
ImageKernel =
    [[
// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.

// single pass CFD
// ---------------
// this is some "computational flockarooid dynamics" ;)
// the self-advection is done purely rotational on all scales.
// therefore i dont need any divergence-free velocity field.
// with stochastic sampling i get the proper "mean values" of rotations
// over time for higher order scales.
//
// try changing "RotNum" for different accuracies of rotation calculation
// for even RotNum uncomment the line #define SUPPORT_EVEN_ROTNUM

__DEVICE__ float3 reflect_emu(float3 I, float3 N) {return I - 2.0f * dot(N, I) * N;}

__DEVICE__ float getVal(float2 uv, __TEXTURE2D__ iChannel0)
{
    return length(to_float3(_tex2DVecN(iChannel0,uv.x,uv.y,15).x,_tex2DVecN(iChannel0,uv.x,uv.y,15).y,_tex2DVecN(iChannel0,uv.x,uv.y,15).z));
}

__DEVICE__ float2 getGrad(float2 uv,float delta, __TEXTURE2D__ iChannel0)
{
    float2 d=to_float2(delta,0);
    return to_float2(
        getVal(uv+to_float2(d.x,d.y),iChannel0)-getVal(uv-to_float2(d.x,d.y),iChannel0),
        getVal(uv+to_float2(d.y,d.x),iChannel0)-getVal(uv-to_float2(d.y,d.x),iChannel0)
    )/delta;
}

//************************************************************************
__KERNEL__ void ImageKernel(__CONSTANTREF__ ImageParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  if (x < params->width && y < params->height)
  {

    //-----------------------
    float2 fragCoord = to_float2(x+0.5f, y+0.5f);
    float2 iResolution = to_float2(params->width, params->height);
    float ratio = (float)params->width/(float)params->height;
    float itime=params->itime*params->freq;
    float4 fragColor = to_float4_s(0.0f);
    //-----------------------

    //Functionality.......
	float2 uv = fragCoord / iResolution;

	fragColor = _tex2DVecN(iChannel0,uv.x,uv.y,15);

    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]


-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------

function Create()
--------------------------------------------
ShaderFuse.begin_create()
--------------------------------------------

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- BufferA ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
	IC_Visible          = false,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center",
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
	IC_Visible          = false,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",
    IC_Visible          = false,
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	  INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
	  IC_Visible          = false,
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
	  IC_Visible          = false,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	  INP_Passive         = true,
    INP_DoNotifyChanged = true,
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
	  IC_Visible          = false,
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
	IC_Visible          = false,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = false,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })


  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	  IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InReset = self:AddInput("Reset", "Reset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	  INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    INP_External        = false,
  })


  InFade = self:AddInput("Fade", "Fade", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.995,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InLines = self:AddInput("Lines", "Lines", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 40,
	  INP_Integer = true,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InSteps = self:AddInput("Steps", "Steps", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 10,
	  INP_Integer = true,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InDotted = self:AddInput("Dotted", "Dotted", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.3,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InBrightness = self:AddInput("Brightness", "Brightness", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.6,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  InColor = self:AddInput("Color", "Color", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.5,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })



  InAlpha = self:AddInput("Alpha", "Alpha", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
	--INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })




  -- InLogoSw = self:AddInput("Logo", "LogoSw", {
  --   LINKID_DataType = "Number",
  --   INPID_InputControl = "CheckboxControl",
	--   INP_Integer = true,
  --   INP_DoNotifyChanged = true,
  --   INP_Default         = 1,
  --   IC_Visible          = true,
  --   INP_External        = false,
	--   INP_Passive         = true,
  -- })


 --------------------------------------------
 ShaderFuse.end_create()
--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
	LINK_Visible = false,
    LINK_Main = 1,
    INP_Required = false
  })

  InImage2 = self:AddInput("Image2", "Image2", {
    LINKID_DataType = "Image",
    LINK_Visible = false,
	LINK_Main = 2,
    INP_Required = false
  })
  InImage3 = self:AddInput("Image3", "Image3", {
    LINKID_DataType = "Image",
    LINK_Visible = false,
	LINK_Main = 3,
    INP_Required = false
  })

  InImage4 = self:AddInput("Image4", "Image4", {
    LINKID_DataType = "Image",
	LINK_Visible = false,
    LINK_Main = 4,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)

  if inp ~= nil and param ~= nil then

    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y

        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })

        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then
      if param.Value == 0.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end

    if inp == InStop then
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end


    -- if inp == InLogoSw then
    --   if param.Value == 1 then
    --     authorlogo:SetAttrs({IC_Visible = true})
    --   else
    --     authorlogo:SetAttrs({IC_Visible = false})
  	--   end
    -- end
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
imgattrs = {
        --IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
		IMG_DeferAlloc = false,
    }
R_img = Image(imgattrs)


function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }

    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end

    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end

    local p = Pixel({R=0,G=0,B=0,A=0})

      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end
	  if (InImage2:GetValue(req) ~= nil) then
         src2 = InImage2:GetValue(req)
      else
         src2 = Image(imgattrs)
         src2:Fill(p)
      end
      if (InImage3:GetValue(req) ~= nil) then
         src3 = InImage3:GetValue(req)
      else
         src3 = Image(imgattrs)
         src3:Fill(p)
      end
      if (InImage4:GetValue(req) ~= nil) then
         src4 = InImage4:GetValue(req)
      else
         src4 = Image(imgattrs)
         src4:Fill(p)
      end


    local dstA = Image {IMG_Like = src1, IMG_DeferAlloc = true}
	  local dstI = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dstI, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end


    --StartStop
    if InStop:GetValue(req).Value == 0 then
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end
	end

    acttime = _acttime / framerate


    -------------------------- BufferA-Kernel----------------------------------------
    --nodeA = DVIPComputeNode(req, "BufferAKernel", BufferAKernel, "BufferAParams", BufferAParams)
    local nodeName = self.Name
    BufferAKernel = string.gsub(BufferAKernel, "BufferAKernel", nodeName) 
    nodeA = DVIPComputeNode(req, nodeName, BufferAKernel, "BufferAParams", BufferAParams)


	local params = {}
    if not pcall(function ()
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
	    params.freq = freq

		params.reset = InReset:GetValue(req).Value
		params.fade   = InFade:GetValue(req).Value
		params.lines  = InLines:GetValue(req).Value
		params.steps  = InSteps:GetValue(req).Value
		params.dotted = InDotted:GetValue(req).Value
		params.brightness = InBrightness:GetValue(req).Value
		params.color  = InColor:GetValue(req).Value
		params.alpha  = InAlpha:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate
		params.frame  = req.Time

        nodeA:SetParamBlock(params)
    end) then
        params = nodeA:GetParamBlock(BufferAParams)

        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
	    params.freq = freq

		params.reset = InReset:GetValue(req).Value
		params.fade   = InFade:GetValue(req).Value
		params.lines  = InLines:GetValue(req).Value
		params.steps  = InSteps:GetValue(req).Value
		params.dotted = InDotted:GetValue(req).Value
		params.brightness = InBrightness:GetValue(req).Value
		params.color  = InColor:GetValue(req).Value
		params.alpha  = InAlpha:GetValue(req).Value

        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate
        params.frame  = req.Time

        nodeA:SetParamBlock(params)

    end

    nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    nodeA:AddInput("iChannel0", R_img)
	nodeA:AddInput("iChannel1", src2)
	nodeA:AddInput("iChannel2", src3)
	nodeA:AddInput("iChannel3", src4)
    nodeA:AddOutput("dst", dstA)

    local success = nodeA:RunSession(req)
    if not success then
        dstA = nil
        dump(nodeA:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    R_img = dstA --Recursiv Image



    -------------------------- ImageKernel----------------------------------------

    --node = DVIPComputeNode(req, "ImageKernel", ImageKernel, "ImageParams", ImageParams)
	ImageKernel = string.gsub(ImageKernel, "ImageKernel", "IK"..nodeName) 
    node = DVIPComputeNode(req, "IK"..nodeName, ImageKernel, "ImageParams", ImageParams)

	
	local params = {}
    if not pcall(function ()
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
        params.freq = freq
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(ImageParams)

        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
        params.freq = freq
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)

    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", R_img)
	node:AddInput("iChannel1", src2)
	node:AddInput("iChannel2", src3)
	node:AddInput("iChannel3", src4)
    node:AddOutput("dst", dstI)

    local success = node:RunSession(req)
    if not success then
        dstI = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dstI)
	collectgarbage();
end


